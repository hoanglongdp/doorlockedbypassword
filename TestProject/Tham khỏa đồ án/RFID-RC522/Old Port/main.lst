CCS PCM C Compiler, Version 5.025, 28366               04-Oct-14 14:01

               Filename:   C:\Users\Son\Desktop\New folder\main.lst

               ROM used:   2722 words (33%)
                           Largest free fragment is 2048
               RAM used:   98 (27%) at main() level
                           176 (48%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  09
0001:  MOVWF  0A
0002:  GOTO   1BC
0003:  NOP
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 0C,10
0005:  DATA CD,3A
0006:  DATA 61,26
0007:  DATA 69,37
0008:  DATA E8,25
0009:  DATA E9,32
000A:  DATA 6E,17
000B:  DATA 56,37
000C:  DATA 20,05
000D:  DATA D0,24
000E:  DATA 43,10
000F:  DATA 31,1B
0010:  DATA A0,17
0011:  DATA A0,18
0012:  DATA 38,10
0013:  DATA C2,30
0014:  DATA F3,34
0015:  DATA 63,10
0016:  DATA CB,34
0017:  DATA 74,00
0018:  DATA 8C,24
0019:  DATA 44,1D
001A:  DATA 25,19
001B:  DATA 58,1D
001C:  DATA 25,19
001D:  DATA 58,1D
001E:  DATA 25,19
001F:  DATA 58,1D
0020:  DATA 25,19
0021:  DATA 58,00
*
01A6:  MOVF   0B,W
01A7:  BSF    03.5
01A8:  MOVWF  3E
01A9:  BCF    03.5
01AA:  BCF    0B.7
01AB:  BSF    03.5
01AC:  BSF    03.6
01AD:  BSF    0C.7
01AE:  BSF    0C.0
01AF:  NOP
01B0:  NOP
01B1:  BCF    03.6
01B2:  BTFSS  3E.7
01B3:  GOTO   1B7
01B4:  BCF    03.5
01B5:  BSF    0B.7
01B6:  BSF    03.5
01B7:  BCF    03.5
01B8:  BSF    03.6
01B9:  MOVF   0C,W
01BA:  ANDLW  7F
01BB:  BTFSC  03.2
01BC:  GOTO   218
01BD:  BSF    03.5
01BE:  BCF    03.6
01BF:  MOVWF  3E
01C0:  BCF    03.5
01C1:  BSF    03.6
01C2:  MOVF   0D,W
01C3:  BSF    03.5
01C4:  BCF    03.6
01C5:  MOVWF  3F
01C6:  BCF    03.5
01C7:  BSF    03.6
01C8:  MOVF   0F,W
01C9:  BSF    03.5
01CA:  BCF    03.6
01CB:  MOVWF  40
01CC:  MOVF   3E,W
01CD:  MOVWF  42
01CE:  BCF    03.5
01CF:  CALL   16C
01D0:  BSF    03.5
01D1:  MOVF   3F,W
01D2:  BCF    03.5
01D3:  BSF    03.6
01D4:  MOVWF  0D
01D5:  BSF    03.5
01D6:  BCF    03.6
01D7:  MOVF   40,W
01D8:  BCF    03.5
01D9:  BSF    03.6
01DA:  MOVWF  0F
01DB:  BCF    03.6
01DC:  MOVF   0B,W
01DD:  BSF    03.5
01DE:  MOVWF  41
01DF:  BCF    03.5
01E0:  BCF    0B.7
01E1:  BSF    03.5
01E2:  BSF    03.6
01E3:  BSF    0C.7
01E4:  BSF    0C.0
01E5:  NOP
01E6:  NOP
01E7:  BCF    03.6
01E8:  BTFSS  41.7
01E9:  GOTO   1ED
01EA:  BCF    03.5
01EB:  BSF    0B.7
01EC:  BSF    03.5
01ED:  BCF    03.5
01EE:  BSF    03.6
01EF:  RLF    0C,W
01F0:  RLF    0E,W
01F1:  ANDLW  7F
01F2:  BTFSC  03.2
01F3:  GOTO   218
01F4:  BSF    03.5
01F5:  BCF    03.6
01F6:  MOVWF  3E
01F7:  BCF    03.5
01F8:  BSF    03.6
01F9:  MOVF   0D,W
01FA:  BSF    03.5
01FB:  BCF    03.6
01FC:  MOVWF  3F
01FD:  BCF    03.5
01FE:  BSF    03.6
01FF:  MOVF   0F,W
0200:  BSF    03.5
0201:  BCF    03.6
0202:  MOVWF  40
0203:  MOVF   3E,W
0204:  MOVWF  42
0205:  BCF    03.5
0206:  CALL   16C
0207:  BSF    03.5
0208:  MOVF   3F,W
0209:  BCF    03.5
020A:  BSF    03.6
020B:  MOVWF  0D
020C:  BSF    03.5
020D:  BCF    03.6
020E:  MOVF   40,W
020F:  BCF    03.5
0210:  BSF    03.6
0211:  MOVWF  0F
0212:  INCF   0D,F
0213:  BTFSC  03.2
0214:  INCF   0F,F
0215:  BCF    03.6
0216:  GOTO   1A6
0217:  BSF    03.6
0218:  BCF    03.6
0219:  BSF    0A.3
021A:  BCF    0A.4
021B:  GOTO   1E1 (RETURN)
*
0770:  MOVF   0B,W
0771:  BSF    03.5
0772:  MOVWF  3F
0773:  BCF    03.5
0774:  BCF    0B.7
0775:  BSF    03.5
0776:  BSF    03.6
0777:  BSF    0C.7
0778:  BSF    0C.0
0779:  NOP
077A:  NOP
077B:  BCF    03.6
077C:  BTFSS  3F.7
077D:  GOTO   781
077E:  BCF    03.5
077F:  BSF    0B.7
0780:  BSF    03.5
0781:  BTFSC  03.0
0782:  GOTO   7BA
0783:  BCF    03.5
0784:  BSF    03.6
0785:  MOVF   0C,W
0786:  ANDLW  7F
0787:  BSF    03.5
0788:  BCF    03.6
0789:  MOVWF  3F
078A:  BCF    03.5
078B:  BSF    03.6
078C:  MOVF   0D,W
078D:  BSF    03.5
078E:  BCF    03.6
078F:  MOVWF  40
0790:  BCF    03.5
0791:  BSF    03.6
0792:  MOVF   0F,W
0793:  BSF    03.5
0794:  BCF    03.6
0795:  MOVWF  41
0796:  MOVF   3F,W
0797:  MOVWF  42
0798:  BCF    03.5
0799:  CALL   16C
079A:  BSF    03.5
079B:  MOVF   40,W
079C:  BCF    03.5
079D:  BSF    03.6
079E:  MOVWF  0D
079F:  BSF    03.5
07A0:  BCF    03.6
07A1:  MOVF   41,W
07A2:  BCF    03.5
07A3:  BSF    03.6
07A4:  MOVWF  0F
07A5:  BCF    03.6
07A6:  MOVF   0B,W
07A7:  BSF    03.5
07A8:  MOVWF  42
07A9:  BCF    03.5
07AA:  BCF    0B.7
07AB:  BSF    03.5
07AC:  BSF    03.6
07AD:  BSF    0C.7
07AE:  BSF    0C.0
07AF:  NOP
07B0:  NOP
07B1:  BCF    03.6
07B2:  BTFSS  42.7
07B3:  GOTO   7B7
07B4:  BCF    03.5
07B5:  BSF    0B.7
07B6:  BSF    03.5
07B7:  DECFSZ 3E,F
07B8:  GOTO   7BA
07B9:  GOTO   7E8
07BA:  BCF    03.5
07BB:  BSF    03.6
07BC:  RLF    0C,W
07BD:  RLF    0E,W
07BE:  ANDLW  7F
07BF:  BSF    03.5
07C0:  BCF    03.6
07C1:  MOVWF  3F
07C2:  BCF    03.5
07C3:  BSF    03.6
07C4:  MOVF   0D,W
07C5:  BSF    03.5
07C6:  BCF    03.6
07C7:  MOVWF  40
07C8:  BCF    03.5
07C9:  BSF    03.6
07CA:  MOVF   0F,W
07CB:  BSF    03.5
07CC:  BCF    03.6
07CD:  MOVWF  41
07CE:  MOVF   3F,W
07CF:  MOVWF  42
07D0:  BCF    03.5
07D1:  CALL   16C
07D2:  BSF    03.5
07D3:  MOVF   40,W
07D4:  BCF    03.5
07D5:  BSF    03.6
07D6:  MOVWF  0D
07D7:  BSF    03.5
07D8:  BCF    03.6
07D9:  MOVF   41,W
07DA:  BCF    03.5
07DB:  BSF    03.6
07DC:  MOVWF  0F
07DD:  INCF   0D,F
07DE:  BTFSC  03.2
07DF:  INCF   0F,F
07E0:  BCF    03.0
07E1:  BSF    03.5
07E2:  BCF    03.6
07E3:  DECFSZ 3E,F
07E4:  GOTO   7E6
07E5:  GOTO   7E8
07E6:  BCF    03.5
07E7:  GOTO   770
07E8:  BCF    03.5
07E9:  BSF    0A.3
07EA:  BCF    0A.4
07EB:  GOTO   244 (RETURN)
*
0800:  BSF    03.5
0801:  BTFSC  3F.7
0802:  GOTO   017
0803:  MOVLW  0F
0804:  MOVWF  77
0805:  SWAPF  3E,W
0806:  ANDWF  77,F
0807:  MOVLW  0A
0808:  SUBWF  77,W
0809:  BTFSC  03.0
080A:  GOTO   00E
080B:  MOVLW  30
080C:  ADDWF  77,F
080D:  GOTO   010
080E:  MOVF   3F,W
080F:  ADDWF  77,F
0810:  MOVF   77,W
0811:  MOVWF  42
0812:  BCF    0A.3
0813:  BCF    03.5
0814:  CALL   16C
0815:  BSF    0A.3
0816:  BSF    03.5
0817:  MOVLW  0F
0818:  ANDWF  3E,F
0819:  MOVLW  0A
081A:  SUBWF  3E,W
081B:  BTFSC  03.0
081C:  GOTO   01F
081D:  MOVLW  30
081E:  GOTO   021
081F:  BCF    3F.7
0820:  MOVF   3F,W
0821:  ADDWF  3E,F
0822:  MOVF   3E,W
0823:  MOVWF  42
0824:  BCF    0A.3
0825:  BCF    03.5
0826:  CALL   16C
0827:  BSF    0A.3
0828:  RETURN
*
0970:  MOVF   00,F
0971:  BTFSC  03.2
0972:  GOTO   18E
0973:  BSF    03.5
0974:  CLRF   3F
0975:  MOVF   04,W
0976:  MOVWF  3E
0977:  BCF    3F.0
0978:  BTFSC  03.7
0979:  BSF    3F.0
097A:  MOVF   00,W
097B:  MOVWF  42
097C:  BCF    0A.3
097D:  BCF    03.5
097E:  CALL   16C
097F:  BSF    0A.3
0980:  BSF    03.5
0981:  MOVF   3E,W
0982:  MOVWF  04
0983:  BCF    03.7
0984:  BTFSC  3F.0
0985:  BSF    03.7
0986:  INCF   04,F
0987:  BTFSS  03.2
0988:  GOTO   18C
0989:  BCF    03.5
098A:  INCF   05,F
098B:  BSF    03.5
098C:  BCF    03.5
098D:  GOTO   170
098E:  BSF    0A.3
098F:  BCF    0A.4
0990:  GOTO   2B3 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used FOR I/O 
.................... #use delay(crystal=12MHz) 
*
0022:  MOVLW  C3
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   036
0028:  MOVLW  03
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  E3
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  NOP
0034:  DECFSZ 00,F
0035:  GOTO   028
0036:  RETURN
.................... #define DELAY 10     
.................... #define RC PIN_E0  
.................... #define LCD_ENABLE_PIN PIN_D2              
.................... #define LCD_RS_PIN PIN_D0                  
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_DATA4 PIN_D4    
.................... #define LCD_DATA5 PIN_D5                                     
.................... #define LCD_DATA6 PIN_D6                              
.................... #define LCD_DATA7 PIN_D7  
.................... /* 
.................... SPI SS      RFID-RC522(SDA) - SlaveSelect (SS) 
.................... SPI SDI     RFID-RC522(MOSI) 
.................... SPI SDO     RFID-RC522(MISO) 
.................... SPI SCK     RFID-RC522(SCK)            
....................  */ 
.................... #define MF522_NSS PIN_E2 
.................... #define MF522_SCK PIN_C3 
.................... #define MF522_SI  PIN_C4 
.................... #define MF522_SO  PIN_C5               
.................... #define MF522_RST PIN_E0                
.................... #include <lcd.c>  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A9:  BSF    08.4
....................    output_float(LCD_DATA5); 
00AA:  BSF    08.5
....................    output_float(LCD_DATA6); 
00AB:  BSF    08.6
....................    output_float(LCD_DATA7); 
00AC:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AD:  BCF    03.5
00AE:  BSF    08.1
00AF:  BSF    03.5
00B0:  BCF    08.1
....................    delay_cycles(1); 
00B1:  NOP
....................    lcd_output_enable(1); 
00B2:  BCF    03.5
00B3:  BSF    08.2
00B4:  BSF    03.5
00B5:  BCF    08.2
....................    delay_cycles(1); 
00B6:  NOP
....................    high = lcd_read_nibble(); 
00B7:  BCF    03.5
00B8:  CALL   06E
00B9:  MOVF   78,W
00BA:  BSF    03.5
00BB:  MOVWF  4A
....................        
....................    lcd_output_enable(0); 
00BC:  BCF    03.5
00BD:  BCF    08.2
00BE:  BSF    03.5
00BF:  BCF    08.2
....................    delay_cycles(1); 
00C0:  NOP
....................    lcd_output_enable(1); 
00C1:  BCF    03.5
00C2:  BSF    08.2
00C3:  BSF    03.5
00C4:  BCF    08.2
....................    delay_us(1); 
00C5:  GOTO   0C6
00C6:  NOP
....................    low = lcd_read_nibble(); 
00C7:  BCF    03.5
00C8:  CALL   06E
00C9:  MOVF   78,W
00CA:  BSF    03.5
00CB:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
00CC:  BCF    03.5
00CD:  BCF    08.2
00CE:  BSF    03.5
00CF:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00D0:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00D1:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00D2:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00D3:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D4:  SWAPF  4A,W
00D5:  MOVWF  77
00D6:  MOVLW  F0
00D7:  ANDWF  77,F
00D8:  MOVF   77,W
00D9:  IORWF  49,W
00DA:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006E:  BSF    03.5
006F:  CLRF   4B
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0070:  BSF    08.4
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.4
0074:  MOVLW  01
0075:  BSF    03.5
0076:  IORWF  4B,F
....................    n |= input(LCD_DATA5) << 1; 
0077:  BSF    08.5
0078:  MOVLW  00
0079:  BCF    03.5
007A:  BTFSC  08.5
007B:  MOVLW  01
007C:  MOVWF  77
007D:  BCF    03.0
007E:  RLF    77,F
007F:  MOVF   77,W
0080:  BSF    03.5
0081:  IORWF  4B,F
....................    n |= input(LCD_DATA6) << 2; 
0082:  BSF    08.6
0083:  MOVLW  00
0084:  BCF    03.5
0085:  BTFSC  08.6
0086:  MOVLW  01
0087:  MOVWF  77
0088:  RLF    77,F
0089:  RLF    77,F
008A:  MOVLW  FC
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  BSF    03.5
008E:  IORWF  4B,F
....................    n |= input(LCD_DATA7) << 3; 
008F:  BSF    08.7
0090:  MOVLW  00
0091:  BCF    03.5
0092:  BTFSC  08.7
0093:  MOVLW  01
0094:  MOVWF  77
0095:  RLF    77,F
0096:  RLF    77,F
0097:  RLF    77,F
0098:  MOVLW  F8
0099:  ANDWF  77,F
009A:  MOVF   77,W
009B:  BSF    03.5
009C:  IORWF  4B,F
....................     
....................    return(n); 
009D:  MOVF   4B,W
009E:  MOVWF  78
....................   #else 
009F:  BCF    03.5
00A0:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0037:  BSF    03.5
0038:  BTFSC  4A.0
0039:  GOTO   03E
003A:  BCF    03.5
003B:  BCF    08.4
003C:  GOTO   040
003D:  BSF    03.5
003E:  BCF    03.5
003F:  BSF    08.4
0040:  BSF    03.5
0041:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0042:  BTFSC  4A.1
0043:  GOTO   048
0044:  BCF    03.5
0045:  BCF    08.5
0046:  GOTO   04A
0047:  BSF    03.5
0048:  BCF    03.5
0049:  BSF    08.5
004A:  BSF    03.5
004B:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004C:  BTFSC  4A.2
004D:  GOTO   052
004E:  BCF    03.5
004F:  BCF    08.6
0050:  GOTO   054
0051:  BSF    03.5
0052:  BCF    03.5
0053:  BSF    08.6
0054:  BSF    03.5
0055:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0056:  BTFSC  4A.3
0057:  GOTO   05C
0058:  BCF    03.5
0059:  BCF    08.7
005A:  GOTO   05E
005B:  BSF    03.5
005C:  BCF    03.5
005D:  BSF    08.7
005E:  BSF    03.5
005F:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_enable(1); 
0061:  BCF    03.5
0062:  BSF    08.2
0063:  BSF    03.5
0064:  BCF    08.2
....................    delay_us(2); 
0065:  GOTO   066
0066:  GOTO   067
0067:  GOTO   068
....................    lcd_output_enable(0); 
0068:  BCF    03.5
0069:  BCF    08.2
006A:  BSF    03.5
006B:  BCF    08.2
006C:  BCF    03.5
006D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A1:  BSF    03.5
00A2:  BCF    08.2
....................    lcd_rs_tris(); 
00A3:  BCF    08.0
....................    lcd_rw_tris(); 
00A4:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A5:  BCF    03.5
00A6:  BCF    08.0
00A7:  BSF    03.5
00A8:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00DB:  MOVF   78,W
00DC:  MOVWF  49
00DD:  BTFSC  49.7
00DE:  GOTO   0A9
....................    lcd_output_rs(address); 
00DF:  MOVF   47,F
00E0:  BTFSS  03.2
00E1:  GOTO   0E6
00E2:  BCF    03.5
00E3:  BCF    08.0
00E4:  GOTO   0E8
00E5:  BSF    03.5
00E6:  BCF    03.5
00E7:  BSF    08.0
00E8:  BSF    03.5
00E9:  BCF    08.0
....................    delay_cycles(1); 
00EA:  NOP
....................    lcd_output_rw(0); 
00EB:  BCF    03.5
00EC:  BCF    08.1
00ED:  BSF    03.5
00EE:  BCF    08.1
....................    delay_cycles(1); 
00EF:  NOP
....................    lcd_output_enable(0); 
00F0:  BCF    03.5
00F1:  BCF    08.2
00F2:  BSF    03.5
00F3:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
00F4:  SWAPF  48,W
00F5:  MOVWF  49
00F6:  MOVLW  0F
00F7:  ANDWF  49,F
00F8:  MOVF   49,W
00F9:  MOVWF  4A
00FA:  BCF    03.5
00FB:  CALL   037
....................    lcd_send_nibble(n & 0xf); 
00FC:  BSF    03.5
00FD:  MOVF   48,W
00FE:  ANDLW  0F
00FF:  MOVWF  49
0100:  MOVWF  4A
0101:  BCF    03.5
0102:  CALL   037
0103:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0104:  MOVLW  28
0105:  BSF    03.5
0106:  MOVWF  3F
0107:  MOVLW  0C
0108:  MOVWF  40
0109:  MOVLW  01
010A:  MOVWF  41
010B:  MOVLW  06
010C:  MOVWF  42
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
010D:  BCF    03.5
010E:  BCF    08.2
010F:  BSF    03.5
0110:  BCF    08.2
....................    lcd_output_rs(0); 
0111:  BCF    03.5
0112:  BCF    08.0
0113:  BSF    03.5
0114:  BCF    08.0
....................    lcd_output_rw(0); 
0115:  BCF    03.5
0116:  BCF    08.1
0117:  BSF    03.5
0118:  BCF    08.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0119:  BCF    08.4
....................    output_drive(LCD_DATA5); 
011A:  BCF    08.5
....................    output_drive(LCD_DATA6); 
011B:  BCF    08.6
....................    output_drive(LCD_DATA7); 
011C:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
011D:  BCF    08.2
....................    lcd_rs_tris(); 
011E:  BCF    08.0
....................    lcd_rw_tris(); 
011F:  BCF    08.1
....................  #endif 
....................      
....................    delay_ms(15); 
0120:  MOVLW  0F
0121:  MOVWF  43
0122:  BCF    03.5
0123:  CALL   022
....................    for(i=1;i<=3;++i) 
0124:  MOVLW  01
0125:  BSF    03.5
0126:  MOVWF  3E
0127:  MOVF   3E,W
0128:  SUBLW  03
0129:  BTFSS  03.0
012A:  GOTO   137
....................    { 
....................        lcd_send_nibble(3); 
012B:  MOVLW  03
012C:  MOVWF  4A
012D:  BCF    03.5
012E:  CALL   037
....................        delay_ms(5); 
012F:  MOVLW  05
0130:  BSF    03.5
0131:  MOVWF  43
0132:  BCF    03.5
0133:  CALL   022
0134:  BSF    03.5
0135:  INCF   3E,F
0136:  GOTO   127
....................    } 
....................     
....................    lcd_send_nibble(2); 
0137:  MOVLW  02
0138:  MOVWF  4A
0139:  BCF    03.5
013A:  CALL   037
....................    delay_ms(5); 
013B:  MOVLW  05
013C:  BSF    03.5
013D:  MOVWF  43
013E:  BCF    03.5
013F:  CALL   022
....................    for(i=0;i<=3;++i) 
0140:  BSF    03.5
0141:  CLRF   3E
0142:  MOVF   3E,W
0143:  SUBLW  03
0144:  BTFSS  03.0
0145:  GOTO   154
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0146:  MOVLW  BF
0147:  ADDWF  3E,W
0148:  MOVWF  04
0149:  BCF    03.7
014A:  MOVF   00,W
014B:  MOVWF  43
014C:  CLRF   47
014D:  MOVF   43,W
014E:  MOVWF  48
014F:  BCF    03.5
0150:  CALL   0A1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0151:  BSF    03.5
0152:  INCF   3E,F
0153:  GOTO   142
0154:  BCF    03.5
0155:  BSF    0A.3
0156:  BCF    0A.4
0157:  GOTO   1D8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0158:  BSF    03.5
0159:  DECFSZ 44,W
015A:  GOTO   15C
015B:  GOTO   15F
....................       address=LCD_LINE_TWO; 
015C:  MOVLW  40
015D:  MOVWF  45
015E:  GOTO   160
....................    else 
....................       address=0; 
015F:  CLRF   45
....................       
....................    address+=x-1; 
0160:  MOVLW  01
0161:  SUBWF  43,W
0162:  ADDWF  45,F
....................    lcd_send_byte(0,0x80|address); 
0163:  MOVF   45,W
0164:  IORLW  80
0165:  MOVWF  46
0166:  CLRF   47
0167:  MOVF   46,W
0168:  MOVWF  48
0169:  BCF    03.5
016A:  CALL   0A1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
016B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
016C:  BSF    03.5
016D:  MOVF   42,W
016E:  XORLW  07
016F:  BCF    03.5
0170:  BTFSC  03.2
0171:  GOTO   17C
0172:  XORLW  0B
0173:  BTFSC  03.2
0174:  GOTO   183
0175:  XORLW  06
0176:  BTFSC  03.2
0177:  GOTO   18F
0178:  XORLW  02
0179:  BTFSC  03.2
017A:  GOTO   197
017B:  GOTO   19E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
017C:  MOVLW  01
017D:  BSF    03.5
017E:  MOVWF  43
017F:  MOVWF  44
0180:  BCF    03.5
0181:  CALL   158
0182:  GOTO   1A5
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0183:  BSF    03.5
0184:  CLRF   47
0185:  MOVLW  01
0186:  MOVWF  48
0187:  BCF    03.5
0188:  CALL   0A1
....................                      delay_ms(2); 
0189:  MOVLW  02
018A:  BSF    03.5
018B:  MOVWF  43
018C:  BCF    03.5
018D:  CALL   022
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
018E:  GOTO   1A5
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
018F:  MOVLW  01
0190:  BSF    03.5
0191:  MOVWF  43
0192:  MOVLW  02
0193:  MOVWF  44
0194:  BCF    03.5
0195:  CALL   158
0196:  GOTO   1A5
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0197:  BSF    03.5
0198:  CLRF   47
0199:  MOVLW  10
019A:  MOVWF  48
019B:  BCF    03.5
019C:  CALL   0A1
019D:  GOTO   1A5
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
019E:  MOVLW  01
019F:  BSF    03.5
01A0:  MOVWF  47
01A1:  MOVF   42,W
01A2:  MOVWF  48
01A3:  BCF    03.5
01A4:  CALL   0A1
....................      #endif 
....................    } 
01A5:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... typedef   SIGNED char int8_t; 
....................  
.................... typedef   SIGNED int int16_t; 
.................... typedef   SIGNED long int32_t; 
.................... typedef   UNSIGNED char uint8_t; 
.................... typedef   UNSIGNED int  uint16_t;                                  
.................... typedef   UNSIGNED long uint32_t; 
.................... typedef   float FLOAT32_t;   
.................... #include "mfrc522/mfrc522.c" 
....................  
.................... #include "mfrc522.h" 
.................... #ifndef __MFRC522_H 
.................... #define __MFRC522_H 
....................  
.................... #include "mfrc522/mfrc522.h" 
.................... #ifndef __MFRC522_H 
.................... #define __MFRC522_H 
....................  
.................... #include "mfrc522/mfrc522.h" 
....................  
.................... uint8_t MFRC522_Reset(void); 
.................... void MFRC522_AntennaOn(void); 
.................... void MFRC522_AntennaOff(void); 
.................... uint8_t MFRC522_Request(uint8_t req_code,uint8_t *pTagType);    
.................... uint8_t MFRC522_Anticoll(uint8_t *pSnr); 
.................... uint8_t MFRC522_Select(uint8_t *pSnr);          
.................... uint8_t MFRC522_AuthState(uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr);      
.................... uint8_t MFRC522_Read(uint8_t addr,uint8_t *pData);      
.................... uint8_t MFRC522_Write(uint8_t addr,uint8_t *pData);     
.................... uint8_t MFRC522_Value(uint8_t dd_mode,uint8_t addr,uint8_t *pValue);    
.................... uint8_t MFRC522_BakValue(uint8_t sourceaddr, uint8_t goaladdr);                                  
.................... uint8_t MFRC522_Halt(void); 
.................... uint8_t MFRC522_ComMF522(uint8_t Command,  
....................                  uint8_t *pInData,  
....................                  uint8_t InLenByte, 
....................                  uint8_t *pOutData,  
....................                  uint16_t  *pOutLenBit); 
.................... void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData); 
.................... void MFRC522_WriteRegister(uint8_t Address,uint8_t value); 
.................... uint8_t MFRC522_ReadRegister(uint8_t Address);  
.................... void SetBitMask(uint8_t reg,uint8_t mask);  
.................... void ClearBitMask(uint8_t reg,uint8_t mask);  
.................... /********************************************************************************* 
.................... *********************************************************************************/ 
.................... #define     MFRC522_IDLE              0x00                
.................... #define     MFRC522_AUTHENT           0x0E                
.................... #define     MFRC522_RECEIVE           0x08                
.................... #define     MFRC522_TRANSMIT          0x04                
.................... #define     MFRC522_TRANSCEIVE        0x0C                
.................... #define     MFRC522_RESETPHASE        0x0F                
.................... #define     MFRC522_CALCCRC           0x03                
....................  
....................  
.................... #define     PICC_REQIDL           0x26                
.................... #define     PICC_REQALL           0x52                
.................... #define     PICC_ANTICOLL1        0x93                
.................... #define     PICC_ANTICOLL2        0x95                
.................... #define     PICC_AUTHENT1A        0x60                
.................... #define     PICC_AUTHENT1B        0x61                
.................... #define     PICC_READ             0x30                
.................... #define     PICC_WRITE            0xA0                
.................... #define     PICC_DECREMENT        0xC0                
.................... #define     PICC_INCREMENT        0xC1                
.................... #define     PICC_RESTORE          0xC2                
.................... #define     PICC_TRANSFER         0xB0                
.................... #define     PICC_HALT             0x50                
....................  
....................  
.................... #define     DEF_FIFO_LENGTH          64                 //FIFO size=64byte 
....................  
....................  
.................... // PAGE 0 
.................... #define     RFU00                       0x00     
.................... #define     COMMAND_REGISTER            0x01     
.................... #define     IE_REGISTER                 0x02     
.................... #define     DIV_IE_REGISTER             0x03     
.................... #define     IRQ_REGISTER                0x04     
.................... #define     DIV_IRQ_REGISTER            0x05 
.................... #define     ERROR_REGISTER              0x06     
.................... #define     STATUS1_REGISTER            0x07     
.................... #define     STATUS2_REGISTER            0x08     
.................... #define     FIFO_DATA_REGISTER          0x09 
.................... #define     FIFO_LEVEL_REGISTER         0x0A 
.................... #define     WATER_LEVEL_REGISTER        0x0B 
.................... #define     CONTROL_REGISTER            0x0C 
.................... #define     BIT_FRAMING_REGISTER        0x0D 
.................... #define     COLLISION_REGISTER          0x0E 
.................... #define     RFU0F                       0x0F 
.................... // PAGE 1      
.................... #define     RFU10                       0x10 
.................... #define     MODE_REGISTER               0x11 
.................... #define     TX_MODE_REGISTER            0x12 
.................... #define     RX_MODE_REGISTER            0x13 
.................... #define     TX_CONTROL_REGISTER         0x14 
.................... #define     TX_ASK_REGISTER             0x15 
.................... #define     TX_SEL_REGISTER             0x16 
.................... #define     RX_SEL_REGISTER             0x17 
.................... #define     RX_THRESHOLD_REGISTER       0x18 
.................... #define     DEMOD_REGISTER              0x19 
.................... #define     RFU1A                       0x1A 
.................... #define     RFU1B                       0x1B 
.................... #define     MIFARE_REGISTER             0x1C 
.................... #define     RFU1D                       0x1D 
.................... #define     RFU1E                       0x1E 
.................... #define     SERIAL_SPEED_REGISTER       0x1F 
.................... // PAGE 2     
.................... #define     RFU20                       0x20   
.................... #define     CRC_RESULT_M_REGISTER       0x21 
.................... #define     CRC_RESULT_L_REGISTER       0x22 
.................... #define     RFU23                       0x23 
.................... #define     MOD_WIDTH_REGISTER          0x24 
.................... #define     RFU25                       0x25 
.................... #define     RF_CONFIG_REGISTER          0x26 
.................... #define     GSN_REGISTER                0x27 
.................... #define     CWF_CONFIG_REGISTER         0x28 
.................... #define     MODGS_CONFIG_REGISTER       0x29 
.................... #define     TMODE_REGISTER              0x2A 
.................... #define     TIMER_PRESCALER_REGISTER    0x2B 
.................... #define     TIMER_RELOAD_H_REGISTER     0x2C 
.................... #define     TIMER_RELOAD_L_REGISTER     0x2D 
.................... #define     TIMER_VALUE_H_REGISTER      0x2E 
.................... #define     TIMER_VALUE_L_REGISTER      0x2F 
.................... // PAGE 3       
.................... #define     RFU30                       0x30 
.................... #define     TEST_SEL_1_REGISTER         0x31 
.................... #define     TEST_SEL_2_REGISTER         0x32 
.................... #define     TEST_PIN_EN_REGISTER        0x33 
.................... #define     TEST_PIN_VALUE_REGISTER     0x34 
.................... #define     TEST_BUS_REGISTER           0x35 
.................... #define     AUTO_TEST_REGISTER          0x36 
.................... #define     VERSION_REGISTER            0x37 
.................... #define     ANALOG_TEST_REGISTER        0x38 
.................... #define     TEST_ADC1_REGISTER          0x39   
.................... #define     TEST_ADC2_REGISTER          0x3A    
.................... #define     TEST_ADC_REGISTER           0x3B    
.................... #define     RFU3C                       0x3C    
.................... #define     RFU3D                       0x3D    
.................... #define     RFU3E                       0x3E    
.................... #define     RFU3F                          0x3F 
....................  
.................... #define     MI_OK                       0 
.................... #define     MI_NOTAGERR                 1 
.................... #define     MI_ERR                      2 
....................  
.................... #endif 
....................  
....................  
.................... uint8_t MFRC522_Reset(void); 
.................... void MFRC522_AntennaOn(void); 
.................... void MFRC522_AntennaOff(void); 
.................... uint8_t MFRC522_Request(uint8_t req_code,uint8_t *pTagType);    
.................... uint8_t MFRC522_Anticoll(uint8_t *pSnr); 
.................... uint8_t MFRC522_Select(uint8_t *pSnr);          
.................... uint8_t MFRC522_AuthState(uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr);      
.................... uint8_t MFRC522_Read(uint8_t addr,uint8_t *pData);      
.................... uint8_t MFRC522_Write(uint8_t addr,uint8_t *pData);     
.................... uint8_t MFRC522_Value(uint8_t dd_mode,uint8_t addr,uint8_t *pValue);    
.................... uint8_t MFRC522_BakValue(uint8_t sourceaddr, uint8_t goaladdr);                                  
.................... uint8_t MFRC522_Halt(void); 
.................... uint8_t MFRC522_ComMF522(uint8_t Command,  
....................                  uint8_t *pInData,  
....................                  uint8_t InLenByte, 
....................                  uint8_t *pOutData,  
....................                  uint16_t  *pOutLenBit); 
.................... void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData); 
.................... void MFRC522_WriteRegister(uint8_t Address,uint8_t value); 
.................... uint8_t MFRC522_ReadRegister(uint8_t Address);  
.................... void SetBitMask(uint8_t reg,uint8_t mask);  
.................... void ClearBitMask(uint8_t reg,uint8_t mask);  
.................... /********************************************************************************* 
.................... *********************************************************************************/ 
.................... #define     MFRC522_IDLE              0x00                
.................... #define     MFRC522_AUTHENT           0x0E                
.................... #define     MFRC522_RECEIVE           0x08                
.................... #define     MFRC522_TRANSMIT          0x04                
.................... #define     MFRC522_TRANSCEIVE        0x0C                
.................... #define     MFRC522_RESETPHASE        0x0F                
.................... #define     MFRC522_CALCCRC           0x03                
....................  
....................  
.................... #define     PICC_REQIDL           0x26                
.................... #define     PICC_REQALL           0x52                
.................... #define     PICC_ANTICOLL1        0x93                
.................... #define     PICC_ANTICOLL2        0x95                
.................... #define     PICC_AUTHENT1A        0x60                
.................... #define     PICC_AUTHENT1B        0x61                
.................... #define     PICC_READ             0x30                
.................... #define     PICC_WRITE            0xA0                
.................... #define     PICC_DECREMENT        0xC0                
.................... #define     PICC_INCREMENT        0xC1                
.................... #define     PICC_RESTORE          0xC2                
.................... #define     PICC_TRANSFER         0xB0                
.................... #define     PICC_HALT             0x50                
....................  
....................  
.................... #define     DEF_FIFO_LENGTH          64                 //FIFO size=64byte 
....................  
....................  
.................... // PAGE 0 
.................... #define     RFU00                       0x00     
.................... #define     COMMAND_REGISTER            0x01     
.................... #define     IE_REGISTER                 0x02     
.................... #define     DIV_IE_REGISTER             0x03     
.................... #define     IRQ_REGISTER                0x04     
.................... #define     DIV_IRQ_REGISTER            0x05 
.................... #define     ERROR_REGISTER              0x06     
.................... #define     STATUS1_REGISTER            0x07     
.................... #define     STATUS2_REGISTER            0x08     
.................... #define     FIFO_DATA_REGISTER          0x09 
.................... #define     FIFO_LEVEL_REGISTER         0x0A 
.................... #define     WATER_LEVEL_REGISTER        0x0B 
.................... #define     CONTROL_REGISTER            0x0C 
.................... #define     BIT_FRAMING_REGISTER        0x0D 
.................... #define     COLLISION_REGISTER          0x0E 
.................... #define     RFU0F                       0x0F 
.................... // PAGE 1      
.................... #define     RFU10                       0x10 
.................... #define     MODE_REGISTER               0x11 
.................... #define     TX_MODE_REGISTER            0x12 
.................... #define     RX_MODE_REGISTER            0x13 
.................... #define     TX_CONTROL_REGISTER         0x14 
.................... #define     TX_ASK_REGISTER             0x15 
.................... #define     TX_SEL_REGISTER             0x16 
.................... #define     RX_SEL_REGISTER             0x17 
.................... #define     RX_THRESHOLD_REGISTER       0x18 
.................... #define     DEMOD_REGISTER              0x19 
.................... #define     RFU1A                       0x1A 
.................... #define     RFU1B                       0x1B 
.................... #define     MIFARE_REGISTER             0x1C 
.................... #define     RFU1D                       0x1D 
.................... #define     RFU1E                       0x1E 
.................... #define     SERIAL_SPEED_REGISTER       0x1F 
.................... // PAGE 2     
.................... #define     RFU20                       0x20   
.................... #define     CRC_RESULT_M_REGISTER       0x21 
.................... #define     CRC_RESULT_L_REGISTER       0x22 
.................... #define     RFU23                       0x23 
.................... #define     MOD_WIDTH_REGISTER          0x24 
.................... #define     RFU25                       0x25 
.................... #define     RF_CONFIG_REGISTER          0x26 
.................... #define     GSN_REGISTER                0x27 
.................... #define     CWF_CONFIG_REGISTER         0x28 
.................... #define     MODGS_CONFIG_REGISTER       0x29 
.................... #define     TMODE_REGISTER              0x2A 
.................... #define     TIMER_PRESCALER_REGISTER    0x2B 
.................... #define     TIMER_RELOAD_H_REGISTER     0x2C 
.................... #define     TIMER_RELOAD_L_REGISTER     0x2D 
.................... #define     TIMER_VALUE_H_REGISTER      0x2E 
.................... #define     TIMER_VALUE_L_REGISTER      0x2F 
.................... // PAGE 3       
.................... #define     RFU30                       0x30 
.................... #define     TEST_SEL_1_REGISTER         0x31 
.................... #define     TEST_SEL_2_REGISTER         0x32 
.................... #define     TEST_PIN_EN_REGISTER        0x33 
.................... #define     TEST_PIN_VALUE_REGISTER     0x34 
.................... #define     TEST_BUS_REGISTER           0x35 
.................... #define     AUTO_TEST_REGISTER          0x36 
.................... #define     VERSION_REGISTER            0x37 
.................... #define     ANALOG_TEST_REGISTER        0x38 
.................... #define     TEST_ADC1_REGISTER          0x39   
.................... #define     TEST_ADC2_REGISTER          0x3A    
.................... #define     TEST_ADC_REGISTER           0x3B    
.................... #define     RFU3C                       0x3C    
.................... #define     RFU3D                       0x3D    
.................... #define     RFU3E                       0x3E    
.................... #define     RFU3F                          0x3F 
....................  
.................... #define     MI_OK                       0 
.................... #define     MI_NOTAGERR                 1 
.................... #define     MI_ERR                      2 
....................  
.................... #endif 
....................  
.................... #define MAXRLEN    18 
....................  
....................  
....................                                      
.................... uint8_t MFRC522_Request(uint8_t req_code,uint8_t *pTagType) 
*
06B6:  MOVLW  02
06B7:  BSF    03.5
06B8:  MOVWF  41
.................... { 
....................    uint8_t status = MI_ERR; 
....................    uint16_t Length; 
....................    uint8_t Buffer[MAXRLEN]; 
....................    ClearBitMask (STATUS2_REGISTER, 0x08) ; 
06B9:  MOVLW  08
06BA:  MOVWF  67
06BB:  MOVWF  68
06BC:  BCF    03.5
06BD:  CALL   2E0
....................    MFRC522_WriteRegister (BIT_FRAMING_REGISTER, 0x07) ; 
06BE:  MOVLW  0D
06BF:  BSF    03.5
06C0:  MOVWF  6B
06C1:  MOVLW  07
06C2:  MOVWF  6C
06C3:  BCF    03.5
06C4:  CALL   27F
....................    SetBitMask (TX_CONTROL_REGISTER, 0x03) ; 
06C5:  MOVLW  14
06C6:  BSF    03.5
06C7:  MOVWF  67
06C8:  MOVLW  03
06C9:  MOVWF  68
06CA:  BCF    03.5
06CB:  CALL   2F4
....................     
....................     
....................    Buffer[0] = req_code; 
06CC:  BSF    03.5
06CD:  MOVF   3E,W
06CE:  MOVWF  43
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 1, Buffer,&Length); 
06CF:  MOVLW  0C
06D0:  MOVWF  59
06D1:  CLRF   5B
06D2:  MOVLW  C3
06D3:  MOVWF  5A
06D4:  MOVLW  01
06D5:  MOVWF  5C
06D6:  CLRF   5E
06D7:  MOVLW  C3
06D8:  MOVWF  5D
06D9:  CLRF   60
06DA:  MOVLW  C2
06DB:  MOVWF  5F
06DC:  BCF    03.5
06DD:  CALL   37B
06DE:  MOVF   78,W
06DF:  BSF    03.5
06E0:  MOVWF  41
....................  
....................    IF ((status == MI_OK) && (Length == 0x10)) 
06E1:  MOVF   41,F
06E2:  BTFSS  03.2
06E3:  GOTO   6FE
06E4:  MOVF   42,W
06E5:  SUBLW  10
06E6:  BTFSS  03.2
06E7:  GOTO   6FE
....................    { 
....................       * pTagType = Buffer[0]; 
06E8:  MOVF   3F,W
06E9:  MOVWF  04
06EA:  BCF    03.7
06EB:  BTFSC  40.0
06EC:  BSF    03.7
06ED:  MOVF   43,W
06EE:  MOVWF  00
....................       * (pTagType + 1) = Buffer[1]; 
06EF:  MOVLW  01
06F0:  ADDWF  3F,W
06F1:  MOVWF  78
06F2:  MOVF   40,W
06F3:  MOVWF  7A
06F4:  BTFSC  03.0
06F5:  INCF   7A,F
06F6:  MOVF   78,W
06F7:  MOVWF  04
06F8:  BCF    03.7
06F9:  BTFSC  7A.0
06FA:  BSF    03.7
06FB:  MOVF   44,W
06FC:  MOVWF  00
....................    } 
06FD:  GOTO   700
....................  
....................    ELSE 
....................    { 
....................       status = MI_ERR; 
06FE:  MOVLW  02
06FF:  MOVWF  41
....................    } 
....................  
....................    RETURN status; 
0700:  MOVF   41,W
0701:  MOVWF  78
0702:  BCF    03.5
0703:  BSF    0A.3
0704:  BCF    0A.4
0705:  GOTO   224 (RETURN)
.................... } 
....................  
....................  
.................... uint8_t MFRC522_Anticoll(uint8_t *pSnr) 
0706:  BSF    03.5
0707:  CLRF   42
.................... { 
....................    uint8_t status; 
....................    uint8_t i, snr_check = 0; 
....................    uint16_t Length; 
....................    uint8_t Buffer[MAXRLEN]; 
....................     
....................    ClearBitMask (STATUS2_REGISTER, 0x08) ; 
0708:  MOVLW  08
0709:  MOVWF  67
070A:  MOVWF  68
070B:  BCF    03.5
070C:  CALL   2E0
....................    MFRC522_WriteRegister (BIT_FRAMING_REGISTER, 0x00) ; 
070D:  MOVLW  0D
070E:  BSF    03.5
070F:  MOVWF  6B
0710:  CLRF   6C
0711:  BCF    03.5
0712:  CALL   27F
....................    ClearBitMask (COLLISION_REGISTER, 0x80) ; 
0713:  MOVLW  0E
0714:  BSF    03.5
0715:  MOVWF  67
0716:  MOVLW  80
0717:  MOVWF  68
0718:  BCF    03.5
0719:  CALL   2E0
....................    Buffer[0] = PICC_ANTICOLL1; 
071A:  MOVLW  93
071B:  BSF    03.5
071C:  MOVWF  44
....................    Buffer[1] = 0x20; 
071D:  MOVLW  20
071E:  MOVWF  45
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 2, Buffer,&Length); 
071F:  MOVLW  0C
0720:  MOVWF  59
0721:  CLRF   5B
0722:  MOVLW  C4
0723:  MOVWF  5A
0724:  MOVLW  02
0725:  MOVWF  5C
0726:  CLRF   5E
0727:  MOVLW  C4
0728:  MOVWF  5D
0729:  CLRF   60
072A:  MOVLW  C3
072B:  MOVWF  5F
072C:  BCF    03.5
072D:  CALL   37B
072E:  MOVF   78,W
072F:  BSF    03.5
0730:  MOVWF  40
....................  
....................    IF (status == MI_OK) 
0731:  MOVF   40,F
0732:  BTFSS  03.2
0733:  GOTO   763
....................    { 
....................       FOR (i = 0; i < 4; i++) 
0734:  CLRF   41
0735:  MOVF   41,W
0736:  SUBLW  03
0737:  BTFSS  03.0
0738:  GOTO   759
....................       { 
....................          * (pSnr + i) = Buffer[i]; 
0739:  MOVF   41,W
073A:  ADDWF  3E,W
073B:  MOVWF  78
073C:  MOVF   3F,W
073D:  MOVWF  7A
073E:  BTFSC  03.0
073F:  INCF   7A,F
0740:  MOVF   78,W
0741:  MOVWF  56
0742:  MOVF   7A,W
0743:  MOVWF  57
0744:  MOVLW  C4
0745:  ADDWF  41,W
0746:  MOVWF  04
0747:  BCF    03.7
0748:  MOVF   00,W
0749:  MOVWF  58
074A:  MOVF   56,W
074B:  MOVWF  04
074C:  BCF    03.7
074D:  BTFSC  57.0
074E:  BSF    03.7
074F:  MOVF   58,W
0750:  MOVWF  00
....................          snr_check ^= Buffer[i]; 
0751:  MOVLW  C4
0752:  ADDWF  41,W
0753:  MOVWF  04
0754:  BCF    03.7
0755:  MOVF   00,W
0756:  XORWF  42,F
0757:  INCF   41,F
0758:  GOTO   735
....................       } 
....................  
....................       IF (snr_check != Buffer[i]) 
0759:  MOVLW  C4
075A:  ADDWF  41,W
075B:  MOVWF  04
075C:  BCF    03.7
075D:  MOVF   00,W
075E:  SUBWF  42,W
075F:  BTFSC  03.2
0760:  GOTO   763
....................       { status = MI_ERR; } 
0761:  MOVLW  02
0762:  MOVWF  40
....................    } 
....................  
....................     
....................    SetBitMask (COLLISION_REGISTER, 0x80) ; 
0763:  MOVLW  0E
0764:  MOVWF  67
0765:  MOVLW  80
0766:  MOVWF  68
0767:  BCF    03.5
0768:  CALL   2F4
....................    RETURN status; 
0769:  BSF    03.5
076A:  MOVF   40,W
076B:  MOVWF  78
076C:  BCF    03.5
076D:  BSF    0A.3
076E:  BCF    0A.4
076F:  GOTO   231 (RETURN)
.................... } 
....................  
....................  
.................... uint8_t MFRC522_Select(uint8_t *pSnr) 
.................... { 
....................    uint8_t status; 
....................    uint8_t i; 
....................    uint16_t Length; 
....................    uint8_t Buffer[MAXRLEN]; 
....................     
....................    Buffer[0] = PICC_ANTICOLL1; 
*
0829:  MOVLW  93
082A:  BSF    03.5
082B:  MOVWF  43
....................    Buffer[1] = 0x70; 
082C:  MOVLW  70
082D:  MOVWF  44
....................    Buffer[6] = 0; 
082E:  CLRF   49
....................    FOR (i = 0; i < 4; i++) 
082F:  CLRF   41
0830:  MOVF   41,W
0831:  SUBLW  03
0832:  BTFSS  03.0
0833:  GOTO   064
....................    { 
....................       Buffer[i + 2] = * (pSnr + i); 
0834:  MOVLW  02
0835:  ADDWF  41,W
0836:  ADDLW  C3
0837:  MOVWF  78
0838:  CLRF   7A
0839:  BTFSC  03.0
083A:  INCF   7A,F
083B:  MOVF   78,W
083C:  MOVWF  55
083D:  MOVF   7A,W
083E:  MOVWF  56
083F:  MOVF   41,W
0840:  ADDWF  3E,W
0841:  MOVWF  78
0842:  MOVF   3F,W
0843:  MOVWF  7A
0844:  BTFSC  03.0
0845:  INCF   7A,F
0846:  MOVF   78,W
0847:  MOVWF  04
0848:  BCF    03.7
0849:  BTFSC  7A.0
084A:  BSF    03.7
084B:  MOVF   00,W
084C:  MOVWF  57
084D:  MOVF   55,W
084E:  MOVWF  04
084F:  BCF    03.7
0850:  BTFSC  56.0
0851:  BSF    03.7
0852:  MOVF   57,W
0853:  MOVWF  00
....................       Buffer[6] ^= *(pSnr + i) ; 
0854:  MOVF   41,W
0855:  ADDWF  3E,W
0856:  MOVWF  78
0857:  MOVF   3F,W
0858:  MOVWF  7A
0859:  BTFSC  03.0
085A:  INCF   7A,F
085B:  MOVF   78,W
085C:  MOVWF  04
085D:  BCF    03.7
085E:  BTFSC  7A.0
085F:  BSF    03.7
0860:  MOVF   00,W
0861:  XORWF  49,F
0862:  INCF   41,F
0863:  GOTO   030
....................    } 
....................  
....................    CalulateCRC (Buffer, 7,&Buffer[7]) ; 
0864:  CLRF   58
0865:  MOVLW  C3
0866:  MOVWF  57
0867:  MOVLW  07
0868:  MOVWF  59
0869:  CLRF   5B
086A:  MOVLW  CA
086B:  MOVWF  5A
086C:  BCF    0A.3
086D:  BCF    03.5
086E:  CALL   307
086F:  BSF    0A.3
....................     
....................    ClearBitMask (STATUS2_REGISTER, 0x08) ; 
0870:  MOVLW  08
0871:  BSF    03.5
0872:  MOVWF  67
0873:  MOVWF  68
0874:  BCF    0A.3
0875:  BCF    03.5
0876:  CALL   2E0
0877:  BSF    0A.3
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 9, Buffer,&Length); 
0878:  MOVLW  0C
0879:  BSF    03.5
087A:  MOVWF  59
087B:  CLRF   5B
087C:  MOVLW  C3
087D:  MOVWF  5A
087E:  MOVLW  09
087F:  MOVWF  5C
0880:  CLRF   5E
0881:  MOVLW  C3
0882:  MOVWF  5D
0883:  CLRF   60
0884:  MOVLW  C2
0885:  MOVWF  5F
0886:  BCF    0A.3
0887:  BCF    03.5
0888:  CALL   37B
0889:  BSF    0A.3
088A:  MOVF   78,W
088B:  BSF    03.5
088C:  MOVWF  40
....................     
....................    IF ((status == MI_OK) && (Length == 0x18)) 
088D:  MOVF   40,F
088E:  BTFSS  03.2
088F:  GOTO   096
0890:  MOVF   42,W
0891:  SUBLW  18
0892:  BTFSS  03.2
0893:  GOTO   096
....................    { status = MI_OK; } 
0894:  CLRF   40
0895:  GOTO   098
....................    ELSE 
....................    { status = MI_ERR; } 
0896:  MOVLW  02
0897:  MOVWF  40
....................    RETURN status; 
0898:  MOVF   40,W
0899:  MOVWF  78
089A:  BCF    03.5
089B:  BSF    0A.3
089C:  BCF    0A.4
089D:  GOTO   27C (RETURN)
.................... } 
....................  
....................   
.................... uint8_t MFRC522_AuthState(uint8_t auth_mode,uint8_t addr,uint8_t *pKey,uint8_t *pSnr) 
.................... { 
....................    uint8_t status; 
....................    uint16_t Length; 
....................    uint8_t i, Buffer[MAXRLEN]; 
....................    Buffer[0] = auth_mode; 
089E:  BSF    03.5
089F:  MOVF   3E,W
08A0:  MOVWF  47
....................    Buffer[1] = addr; 
08A1:  MOVF   3F,W
08A2:  MOVWF  48
....................    FOR (i = 0; i < 6; i++) 
08A3:  CLRF   46
08A4:  MOVF   46,W
08A5:  SUBLW  05
08A6:  BTFSS  03.0
08A7:  GOTO   0CA
....................    { 
....................       Buffer[i + 2] = * (pKey + i); 
08A8:  MOVLW  02
08A9:  ADDWF  46,W
08AA:  ADDLW  C7
08AB:  MOVWF  78
08AC:  CLRF   7A
08AD:  BTFSC  03.0
08AE:  INCF   7A,F
08AF:  MOVF   78,W
08B0:  MOVWF  59
08B1:  MOVF   7A,W
08B2:  MOVWF  5A
08B3:  MOVF   46,W
08B4:  ADDWF  40,W
08B5:  MOVWF  78
08B6:  MOVF   41,W
08B7:  MOVWF  7A
08B8:  BTFSC  03.0
08B9:  INCF   7A,F
08BA:  MOVF   78,W
08BB:  MOVWF  04
08BC:  BCF    03.7
08BD:  BTFSC  7A.0
08BE:  BSF    03.7
08BF:  MOVF   00,W
08C0:  MOVWF  5B
08C1:  MOVF   59,W
08C2:  MOVWF  04
08C3:  BCF    03.7
08C4:  BTFSC  5A.0
08C5:  BSF    03.7
08C6:  MOVF   5B,W
08C7:  MOVWF  00
08C8:  INCF   46,F
08C9:  GOTO   0A4
....................    } 
....................  
....................    FOR (i = 0; i < 4; i++) 
08CA:  CLRF   46
08CB:  MOVF   46,W
08CC:  SUBLW  03
08CD:  BTFSS  03.0
08CE:  GOTO   0F1
....................    { Buffer[i + 8] = * (pSnr + i); } 
08CF:  MOVLW  08
08D0:  ADDWF  46,W
08D1:  ADDLW  C7
08D2:  MOVWF  78
08D3:  CLRF   7A
08D4:  BTFSC  03.0
08D5:  INCF   7A,F
08D6:  MOVF   78,W
08D7:  MOVWF  59
08D8:  MOVF   7A,W
08D9:  MOVWF  5A
08DA:  MOVF   46,W
08DB:  ADDWF  42,W
08DC:  MOVWF  78
08DD:  MOVF   43,W
08DE:  MOVWF  7A
08DF:  BTFSC  03.0
08E0:  INCF   7A,F
08E1:  MOVF   78,W
08E2:  MOVWF  04
08E3:  BCF    03.7
08E4:  BTFSC  7A.0
08E5:  BSF    03.7
08E6:  MOVF   00,W
08E7:  MOVWF  5B
08E8:  MOVF   59,W
08E9:  MOVWF  04
08EA:  BCF    03.7
08EB:  BTFSC  5A.0
08EC:  BSF    03.7
08ED:  MOVF   5B,W
08EE:  MOVWF  00
08EF:  INCF   46,F
08F0:  GOTO   0CB
....................    status = MFRC522_ComMF522 (MFRC522_AUTHENT, Buffer, 12, Buffer,&Length); 
08F1:  MOVLW  0E
08F2:  MOVWF  59
08F3:  CLRF   5B
08F4:  MOVLW  C7
08F5:  MOVWF  5A
08F6:  MOVLW  0C
08F7:  MOVWF  5C
08F8:  CLRF   5E
08F9:  MOVLW  C7
08FA:  MOVWF  5D
08FB:  CLRF   60
08FC:  MOVLW  C5
08FD:  MOVWF  5F
08FE:  BCF    0A.3
08FF:  BCF    03.5
0900:  CALL   37B
0901:  BSF    0A.3
0902:  MOVF   78,W
0903:  BSF    03.5
0904:  MOVWF  44
....................  
....................    if ((status != MI_OK) || (! (MFRC522_ReadRegister (STATUS2_REGISTER)&0x08))) 
0905:  MOVF   44,F
0906:  BTFSS  03.2
0907:  GOTO   111
0908:  MOVLW  08
0909:  MOVWF  6A
090A:  BCF    0A.3
090B:  BCF    03.5
090C:  CALL   21C
090D:  BSF    0A.3
090E:  BTFSC  78.3
090F:  GOTO   114
0910:  BSF    03.5
....................    { status = MI_ERR; } 
0911:  MOVLW  02
0912:  MOVWF  44
0913:  BCF    03.5
....................     
....................    RETURN status; 
0914:  BSF    03.5
0915:  MOVF   44,W
0916:  MOVWF  78
0917:  BCF    03.5
0918:  BSF    0A.3
0919:  BCF    0A.4
091A:  GOTO   28E (RETURN)
.................... } 
....................  
....................  
.................... uint8_t MFRC522_Read(uint8_t addr,uint8_t *pData) 
.................... { 
....................    uint8_t status; 
....................    uint16_t Length; 
....................    uint8_t i, Buffer[MAXRLEN]; 
....................    Buffer[0] = PICC_READ; 
091B:  MOVLW  30
091C:  BSF    03.5
091D:  MOVWF  44
....................    Buffer[1] = addr; 
091E:  MOVF   3E,W
091F:  MOVWF  45
....................    CalulateCRC (Buffer, 2,&Buffer[2]) ; 
0920:  CLRF   58
0921:  MOVLW  C4
0922:  MOVWF  57
0923:  MOVLW  02
0924:  MOVWF  59
0925:  CLRF   5B
0926:  MOVLW  C6
0927:  MOVWF  5A
0928:  BCF    0A.3
0929:  BCF    03.5
092A:  CALL   307
092B:  BSF    0A.3
....................     
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
092C:  MOVLW  0C
092D:  BSF    03.5
092E:  MOVWF  59
092F:  CLRF   5B
0930:  MOVLW  C4
0931:  MOVWF  5A
0932:  MOVLW  04
0933:  MOVWF  5C
0934:  CLRF   5E
0935:  MOVLW  C4
0936:  MOVWF  5D
0937:  CLRF   60
0938:  MOVLW  C2
0939:  MOVWF  5F
093A:  BCF    0A.3
093B:  BCF    03.5
093C:  CALL   37B
093D:  BSF    0A.3
093E:  MOVF   78,W
093F:  BSF    03.5
0940:  MOVWF  41
....................  
....................    IF ((status == MI_OK) && (Length == 0x90)) 
0941:  MOVF   41,F
0942:  BTFSS  03.2
0943:  GOTO   168
0944:  MOVF   42,W
0945:  SUBLW  90
0946:  BTFSS  03.2
0947:  GOTO   168
....................    { 
....................       FOR (i = 0; i < 16; i++) 
0948:  CLRF   43
0949:  MOVF   43,W
094A:  SUBLW  0F
094B:  BTFSS  03.0
094C:  GOTO   167
....................       { * (pData + i) = Buffer[i]; } 
094D:  MOVF   43,W
094E:  ADDWF  3F,W
094F:  MOVWF  78
0950:  MOVF   40,W
0951:  MOVWF  7A
0952:  BTFSC  03.0
0953:  INCF   7A,F
0954:  MOVF   78,W
0955:  MOVWF  56
0956:  MOVF   7A,W
0957:  MOVWF  57
0958:  MOVLW  C4
0959:  ADDWF  43,W
095A:  MOVWF  04
095B:  BCF    03.7
095C:  MOVF   00,W
095D:  MOVWF  58
095E:  MOVF   56,W
095F:  MOVWF  04
0960:  BCF    03.7
0961:  BTFSC  57.0
0962:  BSF    03.7
0963:  MOVF   58,W
0964:  MOVWF  00
0965:  INCF   43,F
0966:  GOTO   149
....................    } 
0967:  GOTO   16A
....................  
....................    ELSE 
....................    { status = MI_ERR; } 
0968:  MOVLW  02
0969:  MOVWF  41
....................     
....................    RETURN status; 
096A:  MOVF   41,W
096B:  MOVWF  78
096C:  BCF    03.5
096D:  BSF    0A.3
096E:  BCF    0A.4
096F:  GOTO   29B (RETURN)
.................... } 
....................  
.................... uint8_t MFRC522_Write(uint8_t addr,uint8_t *pData) 
.................... { 
....................    uint8_t status; 
....................    uint16_t Length; 
....................    uint8_t i, Buffer[MAXRLEN]; 
....................     
....................    Buffer[0] = PICC_WRITE; 
*
047E:  MOVLW  A0
047F:  BSF    03.5
0480:  MOVWF  44
....................    Buffer[1] = addr; 
0481:  MOVF   3E,W
0482:  MOVWF  45
....................    CalulateCRC (Buffer, 2,&Buffer[2]) ; 
0483:  CLRF   58
0484:  MOVLW  C4
0485:  MOVWF  57
0486:  MOVLW  02
0487:  MOVWF  59
0488:  CLRF   5B
0489:  MOVLW  C6
048A:  MOVWF  5A
048B:  BCF    03.5
048C:  CALL   307
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
048D:  MOVLW  0C
048E:  BSF    03.5
048F:  MOVWF  59
0490:  CLRF   5B
0491:  MOVLW  C4
0492:  MOVWF  5A
0493:  MOVLW  04
0494:  MOVWF  5C
0495:  CLRF   5E
0496:  MOVLW  C4
0497:  MOVWF  5D
0498:  CLRF   60
0499:  MOVLW  C2
049A:  MOVWF  5F
049B:  BCF    03.5
049C:  CALL   37B
049D:  MOVF   78,W
049E:  BSF    03.5
049F:  MOVWF  41
....................  
....................    IF ((status != MI_OK) || (Length != 4) || ((Buffer[0]&0x0F) != 0x0A) ) 
04A0:  MOVF   41,F
04A1:  BTFSS  03.2
04A2:  GOTO   4AC
04A3:  MOVF   42,W
04A4:  SUBLW  04
04A5:  BTFSS  03.2
04A6:  GOTO   4AC
04A7:  MOVF   44,W
04A8:  ANDLW  0F
04A9:  SUBLW  0A
04AA:  BTFSC  03.2
04AB:  GOTO   4AE
....................    { status = MI_ERR; } 
04AC:  MOVLW  02
04AD:  MOVWF  41
....................     
....................    IF (status == MI_OK) 
04AE:  MOVF   41,F
04AF:  BTFSS  03.2
04B0:  GOTO   502
....................    { 
....................       FOR (i = 0; i < 16; i++) 
04B1:  CLRF   43
04B2:  MOVF   43,W
04B3:  SUBLW  0F
04B4:  BTFSS  03.0
04B5:  GOTO   4D7
....................       { Buffer[i] = * (pData + i) ; } 
04B6:  MOVLW  C4
04B7:  ADDWF  43,W
04B8:  MOVWF  78
04B9:  CLRF   7A
04BA:  BTFSC  03.0
04BB:  INCF   7A,F
04BC:  MOVF   78,W
04BD:  MOVWF  56
04BE:  MOVF   7A,W
04BF:  MOVWF  57
04C0:  MOVF   43,W
04C1:  ADDWF  3F,W
04C2:  MOVWF  78
04C3:  MOVF   40,W
04C4:  MOVWF  7A
04C5:  BTFSC  03.0
04C6:  INCF   7A,F
04C7:  MOVF   78,W
04C8:  MOVWF  04
04C9:  BCF    03.7
04CA:  BTFSC  7A.0
04CB:  BSF    03.7
04CC:  MOVF   00,W
04CD:  MOVWF  58
04CE:  MOVF   56,W
04CF:  MOVWF  04
04D0:  BCF    03.7
04D1:  BTFSC  57.0
04D2:  BSF    03.7
04D3:  MOVF   58,W
04D4:  MOVWF  00
04D5:  INCF   43,F
04D6:  GOTO   4B2
....................       CalulateCRC (Buffer, 16,&Buffer[16]) ; 
04D7:  CLRF   58
04D8:  MOVLW  C4
04D9:  MOVWF  57
04DA:  MOVLW  10
04DB:  MOVWF  59
04DC:  CLRF   5B
04DD:  MOVLW  D4
04DE:  MOVWF  5A
04DF:  BCF    03.5
04E0:  CALL   307
....................       status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 18, Buffer,&Length); 
04E1:  MOVLW  0C
04E2:  BSF    03.5
04E3:  MOVWF  59
04E4:  CLRF   5B
04E5:  MOVLW  C4
04E6:  MOVWF  5A
04E7:  MOVLW  12
04E8:  MOVWF  5C
04E9:  CLRF   5E
04EA:  MOVLW  C4
04EB:  MOVWF  5D
04EC:  CLRF   60
04ED:  MOVLW  C2
04EE:  MOVWF  5F
04EF:  BCF    03.5
04F0:  CALL   37B
04F1:  MOVF   78,W
04F2:  BSF    03.5
04F3:  MOVWF  41
....................  
....................       IF ((status != MI_OK) || (Length != 4) || ((Buffer[0]&0x0F) != 0x0A) ) 
04F4:  MOVF   41,F
04F5:  BTFSS  03.2
04F6:  GOTO   500
04F7:  MOVF   42,W
04F8:  SUBLW  04
04F9:  BTFSS  03.2
04FA:  GOTO   500
04FB:  MOVF   44,W
04FC:  ANDLW  0F
04FD:  SUBLW  0A
04FE:  BTFSC  03.2
04FF:  GOTO   502
....................       { status = MI_ERR; } 
0500:  MOVLW  02
0501:  MOVWF  41
....................    } 
....................  
....................     
....................    RETURN status; 
0502:  MOVF   41,W
0503:  MOVWF  78
0504:  BCF    03.5
0505:  BSF    0A.3
0506:  BCF    0A.4
0507:  GOTO   1EB (RETURN)
.................... } 
....................  
.................... uint8_t MFRC522_Value(uint8_t dd_mode,uint8_t addr,uint8_t *pValue) 
.................... { 
....................    uint8_t status; 
....................    uint16_t Length; 
....................    uint8_t i, Buffer[MAXRLEN]; 
....................     
....................    Buffer[0] = dd_mode; 
*
059B:  BSF    03.5
059C:  MOVF   3E,W
059D:  MOVWF  45
....................    Buffer[1] = addr; 
059E:  MOVF   3F,W
059F:  MOVWF  46
....................    CalulateCRC (Buffer, 2,&Buffer[2]) ; 
05A0:  CLRF   58
05A1:  MOVLW  C5
05A2:  MOVWF  57
05A3:  MOVLW  02
05A4:  MOVWF  59
05A5:  CLRF   5B
05A6:  MOVLW  C7
05A7:  MOVWF  5A
05A8:  BCF    03.5
05A9:  CALL   307
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
05AA:  MOVLW  0C
05AB:  BSF    03.5
05AC:  MOVWF  59
05AD:  CLRF   5B
05AE:  MOVLW  C5
05AF:  MOVWF  5A
05B0:  MOVLW  04
05B1:  MOVWF  5C
05B2:  CLRF   5E
05B3:  MOVLW  C5
05B4:  MOVWF  5D
05B5:  CLRF   60
05B6:  MOVLW  C3
05B7:  MOVWF  5F
05B8:  BCF    03.5
05B9:  CALL   37B
05BA:  MOVF   78,W
05BB:  BSF    03.5
05BC:  MOVWF  42
....................  
....................    IF ((status != MI_OK) || (Length != 4) || ((Buffer[0]&0x0F) != 0x0A) ) 
05BD:  MOVF   42,F
05BE:  BTFSS  03.2
05BF:  GOTO   5C9
05C0:  MOVF   43,W
05C1:  SUBLW  04
05C2:  BTFSS  03.2
05C3:  GOTO   5C9
05C4:  MOVF   45,W
05C5:  ANDLW  0F
05C6:  SUBLW  0A
05C7:  BTFSC  03.2
05C8:  GOTO   5CB
....................    { status = MI_ERR; } 
05C9:  MOVLW  02
05CA:  MOVWF  42
....................     
....................    IF (status == MI_OK) 
05CB:  MOVF   42,F
05CC:  BTFSS  03.2
05CD:  GOTO   616
....................    { 
....................       FOR (i = 0; i < 16; i++) 
05CE:  CLRF   44
05CF:  MOVF   44,W
05D0:  SUBLW  0F
05D1:  BTFSS  03.0
05D2:  GOTO   5F4
....................       { Buffer[i] = * (pValue + i) ; } 
05D3:  MOVLW  C5
05D4:  ADDWF  44,W
05D5:  MOVWF  78
05D6:  CLRF   7A
05D7:  BTFSC  03.0
05D8:  INCF   7A,F
05D9:  MOVF   78,W
05DA:  MOVWF  57
05DB:  MOVF   7A,W
05DC:  MOVWF  58
05DD:  MOVF   44,W
05DE:  ADDWF  40,W
05DF:  MOVWF  78
05E0:  MOVF   41,W
05E1:  MOVWF  7A
05E2:  BTFSC  03.0
05E3:  INCF   7A,F
05E4:  MOVF   78,W
05E5:  MOVWF  04
05E6:  BCF    03.7
05E7:  BTFSC  7A.0
05E8:  BSF    03.7
05E9:  MOVF   00,W
05EA:  MOVWF  59
05EB:  MOVF   57,W
05EC:  MOVWF  04
05ED:  BCF    03.7
05EE:  BTFSC  58.0
05EF:  BSF    03.7
05F0:  MOVF   59,W
05F1:  MOVWF  00
05F2:  INCF   44,F
05F3:  GOTO   5CF
....................       CalulateCRC (Buffer, 4,&Buffer[4]) ; 
05F4:  CLRF   58
05F5:  MOVLW  C5
05F6:  MOVWF  57
05F7:  MOVLW  04
05F8:  MOVWF  59
05F9:  CLRF   5B
05FA:  MOVLW  C9
05FB:  MOVWF  5A
05FC:  BCF    03.5
05FD:  CALL   307
....................       Length = 0; 
05FE:  BSF    03.5
05FF:  CLRF   43
....................       status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 6, Buffer,&Length); 
0600:  MOVLW  0C
0601:  MOVWF  59
0602:  CLRF   5B
0603:  MOVLW  C5
0604:  MOVWF  5A
0605:  MOVLW  06
0606:  MOVWF  5C
0607:  CLRF   5E
0608:  MOVLW  C5
0609:  MOVWF  5D
060A:  CLRF   60
060B:  MOVLW  C3
060C:  MOVWF  5F
060D:  BCF    03.5
060E:  CALL   37B
060F:  MOVF   78,W
0610:  BSF    03.5
0611:  MOVWF  42
....................  
....................       IF (status != MI_ERR) 
0612:  MOVF   42,W
0613:  SUBLW  02
0614:  BTFSS  03.2
....................       { status = MI_OK; } 
0615:  CLRF   42
....................    } 
....................  
....................     
....................    IF (status == MI_OK) 
0616:  MOVF   42,F
0617:  BTFSS  03.2
0618:  GOTO   648
....................    { 
....................       Buffer[0] = PICC_TRANSFER; 
0619:  MOVLW  B0
061A:  MOVWF  45
....................       Buffer[1] = addr; 
061B:  MOVF   3F,W
061C:  MOVWF  46
....................       CalulateCRC (Buffer, 2,&Buffer[2]); 
061D:  CLRF   58
061E:  MOVLW  C5
061F:  MOVWF  57
0620:  MOVLW  02
0621:  MOVWF  59
0622:  CLRF   5B
0623:  MOVLW  C7
0624:  MOVWF  5A
0625:  BCF    03.5
0626:  CALL   307
....................        
....................       status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
0627:  MOVLW  0C
0628:  BSF    03.5
0629:  MOVWF  59
062A:  CLRF   5B
062B:  MOVLW  C5
062C:  MOVWF  5A
062D:  MOVLW  04
062E:  MOVWF  5C
062F:  CLRF   5E
0630:  MOVLW  C5
0631:  MOVWF  5D
0632:  CLRF   60
0633:  MOVLW  C3
0634:  MOVWF  5F
0635:  BCF    03.5
0636:  CALL   37B
0637:  MOVF   78,W
0638:  BSF    03.5
0639:  MOVWF  42
....................  
....................       IF ((status != MI_OK) || (Length != 4) || ((Buffer[0]&0x0F) != 0x0A) ) 
063A:  MOVF   42,F
063B:  BTFSS  03.2
063C:  GOTO   646
063D:  MOVF   43,W
063E:  SUBLW  04
063F:  BTFSS  03.2
0640:  GOTO   646
0641:  MOVF   45,W
0642:  ANDLW  0F
0643:  SUBLW  0A
0644:  BTFSC  03.2
0645:  GOTO   648
....................       { status = MI_ERR; } 
0646:  MOVLW  02
0647:  MOVWF  42
....................    } 
....................  
....................    RETURN status; 
0648:  MOVF   42,W
0649:  MOVWF  78
064A:  BCF    03.5
064B:  BSF    0A.3
064C:  BCF    0A.4
064D:  GOTO   204 (RETURN)
.................... } 
....................  
.................... uint8_t MFRC522_BakValue(uint8_t sourceaddr, uint8_t goaladdr) 
.................... { 
....................    uint8_t status; 
....................    uint16_t Length; 
....................    uint8_t Buffer[MAXRLEN]; 
....................    Buffer[0] = PICC_RESTORE; 
*
0508:  MOVLW  C2
0509:  BSF    03.5
050A:  MOVWF  42
....................    Buffer[1] = sourceaddr; 
050B:  MOVF   3E,W
050C:  MOVWF  43
....................    CalulateCRC (Buffer, 2,&Buffer[2]) ; 
050D:  CLRF   58
050E:  MOVLW  C2
050F:  MOVWF  57
0510:  MOVLW  02
0511:  MOVWF  59
0512:  CLRF   5B
0513:  MOVLW  C4
0514:  MOVWF  5A
0515:  BCF    03.5
0516:  CALL   307
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
0517:  MOVLW  0C
0518:  BSF    03.5
0519:  MOVWF  59
051A:  CLRF   5B
051B:  MOVLW  C2
051C:  MOVWF  5A
051D:  MOVLW  04
051E:  MOVWF  5C
051F:  CLRF   5E
0520:  MOVLW  C2
0521:  MOVWF  5D
0522:  CLRF   60
0523:  MOVLW  C1
0524:  MOVWF  5F
0525:  BCF    03.5
0526:  CALL   37B
0527:  MOVF   78,W
0528:  BSF    03.5
0529:  MOVWF  40
....................  
....................    IF ((status != MI_OK) || (Length != 4) || ((Buffer[0]&0x0F) != 0x0A) ) 
052A:  MOVF   40,F
052B:  BTFSS  03.2
052C:  GOTO   536
052D:  MOVF   41,W
052E:  SUBLW  04
052F:  BTFSS  03.2
0530:  GOTO   536
0531:  MOVF   42,W
0532:  ANDLW  0F
0533:  SUBLW  0A
0534:  BTFSC  03.2
0535:  GOTO   538
....................    { status = MI_ERR; } 
0536:  MOVLW  02
0537:  MOVWF  40
....................     
....................    IF (status == MI_OK) 
0538:  MOVF   40,F
0539:  BTFSS  03.2
053A:  GOTO   560
....................    { 
....................       Buffer[0] = 0; 
053B:  CLRF   42
....................       Buffer[1] = 0; 
053C:  CLRF   43
....................       Buffer[2] = 0; 
053D:  CLRF   44
....................       Buffer[3] = 0; 
053E:  CLRF   45
....................       CalulateCRC (Buffer, 4,&Buffer[4]) ; 
053F:  CLRF   58
0540:  MOVLW  C2
0541:  MOVWF  57
0542:  MOVLW  04
0543:  MOVWF  59
0544:  CLRF   5B
0545:  MOVLW  C6
0546:  MOVWF  5A
0547:  BCF    03.5
0548:  CALL   307
....................       status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 6, Buffer,&Length); 
0549:  MOVLW  0C
054A:  BSF    03.5
054B:  MOVWF  59
054C:  CLRF   5B
054D:  MOVLW  C2
054E:  MOVWF  5A
054F:  MOVLW  06
0550:  MOVWF  5C
0551:  CLRF   5E
0552:  MOVLW  C2
0553:  MOVWF  5D
0554:  CLRF   60
0555:  MOVLW  C1
0556:  MOVWF  5F
0557:  BCF    03.5
0558:  CALL   37B
0559:  MOVF   78,W
055A:  BSF    03.5
055B:  MOVWF  40
....................  
....................       IF (status != MI_ERR) 
055C:  MOVF   40,W
055D:  SUBLW  02
055E:  BTFSS  03.2
....................       { status = MI_OK; } 
055F:  CLRF   40
....................    } 
....................  
....................     
....................    IF (status != MI_OK) 
0560:  MOVF   40,F
0561:  BTFSC  03.2
0562:  GOTO   566
....................    { RETURN MI_ERR; } 
0563:  MOVLW  02
0564:  MOVWF  78
0565:  GOTO   597
....................     
....................    Buffer[0] = PICC_TRANSFER; 
0566:  MOVLW  B0
0567:  MOVWF  42
....................    Buffer[1] = goaladdr; 
0568:  MOVF   3F,W
0569:  MOVWF  43
....................    CalulateCRC (Buffer, 2,&Buffer[2]) ; 
056A:  CLRF   58
056B:  MOVLW  C2
056C:  MOVWF  57
056D:  MOVLW  02
056E:  MOVWF  59
056F:  CLRF   5B
0570:  MOVLW  C4
0571:  MOVWF  5A
0572:  BCF    03.5
0573:  CALL   307
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
0574:  MOVLW  0C
0575:  BSF    03.5
0576:  MOVWF  59
0577:  CLRF   5B
0578:  MOVLW  C2
0579:  MOVWF  5A
057A:  MOVLW  04
057B:  MOVWF  5C
057C:  CLRF   5E
057D:  MOVLW  C2
057E:  MOVWF  5D
057F:  CLRF   60
0580:  MOVLW  C1
0581:  MOVWF  5F
0582:  BCF    03.5
0583:  CALL   37B
0584:  MOVF   78,W
0585:  BSF    03.5
0586:  MOVWF  40
....................  
....................    IF ((status != MI_OK) || (Length != 4) || ((Buffer[0]&0x0F) != 0x0A) ) 
0587:  MOVF   40,F
0588:  BTFSS  03.2
0589:  GOTO   593
058A:  MOVF   41,W
058B:  SUBLW  04
058C:  BTFSS  03.2
058D:  GOTO   593
058E:  MOVF   42,W
058F:  ANDLW  0F
0590:  SUBLW  0A
0591:  BTFSC  03.2
0592:  GOTO   595
....................    { status = MI_ERR; } 
0593:  MOVLW  02
0594:  MOVWF  40
....................    RETURN status; 
0595:  MOVF   40,W
0596:  MOVWF  78
0597:  BCF    03.5
0598:  BSF    0A.3
0599:  BCF    0A.4
059A:  GOTO   1F6 (RETURN)
.................... } 
....................  
.................... uint8_t MFRC522_Halt(VOID) 
.................... { 
....................    uint8_t status; 
....................    uint16_t Length; 
....................    uint8_t Buffer[MAXRLEN]; 
....................    Buffer[0] = PICC_HALT; 
*
0991:  MOVLW  50
0992:  BSF    03.5
0993:  MOVWF  40
....................    Buffer[1] = 0; 
0994:  CLRF   41
....................    CalulateCRC (Buffer, 2,&Buffer[2]) ; 
0995:  CLRF   58
0996:  MOVLW  C0
0997:  MOVWF  57
0998:  MOVLW  02
0999:  MOVWF  59
099A:  CLRF   5B
099B:  MOVLW  C2
099C:  MOVWF  5A
099D:  BCF    0A.3
099E:  BCF    03.5
099F:  CALL   307
09A0:  BSF    0A.3
....................    status = MFRC522_ComMF522 (MFRC522_TRANSCEIVE, Buffer, 4, Buffer,&Length); 
09A1:  MOVLW  0C
09A2:  BSF    03.5
09A3:  MOVWF  59
09A4:  CLRF   5B
09A5:  MOVLW  C0
09A6:  MOVWF  5A
09A7:  MOVLW  04
09A8:  MOVWF  5C
09A9:  CLRF   5E
09AA:  MOVLW  C0
09AB:  MOVWF  5D
09AC:  CLRF   60
09AD:  MOVLW  BF
09AE:  MOVWF  5F
09AF:  BCF    0A.3
09B0:  BCF    03.5
09B1:  CALL   37B
09B2:  BSF    0A.3
09B3:  MOVF   78,W
09B4:  BSF    03.5
09B5:  MOVWF  3E
....................    RETURN MI_OK; 
09B6:  MOVLW  00
09B7:  MOVWF  78
09B8:  BCF    03.5
09B9:  BSF    0A.3
09BA:  BCF    0A.4
09BB:  GOTO   2B4 (RETURN)
.................... } 
....................  
.................... void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData) 
.................... { 
....................    uint8_t i, n; 
....................    ClearBitMask (DIV_IRQ_REGISTER, 0x04) ; 
*
0307:  MOVLW  05
0308:  BSF    03.5
0309:  MOVWF  67
030A:  MOVLW  04
030B:  MOVWF  68
030C:  BCF    03.5
030D:  CALL   2E0
....................    MFRC522_WriteRegister (COMMAND_REGISTER, MFRC522_IDLE) ; 
030E:  MOVLW  01
030F:  BSF    03.5
0310:  MOVWF  6B
0311:  CLRF   6C
0312:  BCF    03.5
0313:  CALL   27F
....................    SetBitMask (FIFO_LEVEL_REGISTER, 0x80) ; 
0314:  MOVLW  0A
0315:  BSF    03.5
0316:  MOVWF  67
0317:  MOVLW  80
0318:  MOVWF  68
0319:  BCF    03.5
031A:  CALL   2F4
....................    FOR (i = 0; i < len; i++) 
031B:  BSF    03.5
031C:  CLRF   5C
031D:  MOVF   59,W
031E:  SUBWF  5C,W
031F:  BTFSC  03.0
0320:  GOTO   338
....................    { MFRC522_WriteRegister (FIFO_DATA_REGISTER, * (pIndata + i)); } 
0321:  MOVF   5C,W
0322:  ADDWF  57,W
0323:  MOVWF  78
0324:  MOVF   58,W
0325:  MOVWF  7A
0326:  BTFSC  03.0
0327:  INCF   7A,F
0328:  MOVF   78,W
0329:  MOVWF  04
032A:  BCF    03.7
032B:  BTFSC  7A.0
032C:  BSF    03.7
032D:  MOVF   00,W
032E:  MOVWF  5E
032F:  MOVLW  09
0330:  MOVWF  6B
0331:  MOVF   5E,W
0332:  MOVWF  6C
0333:  BCF    03.5
0334:  CALL   27F
0335:  BSF    03.5
0336:  INCF   5C,F
0337:  GOTO   31D
....................    MFRC522_WriteRegister (COMMAND_REGISTER, MFRC522_CALCCRC); 
0338:  MOVLW  01
0339:  MOVWF  6B
033A:  MOVLW  03
033B:  MOVWF  6C
033C:  BCF    03.5
033D:  CALL   27F
....................    i = 0xFF; 
033E:  MOVLW  FF
033F:  BSF    03.5
0340:  MOVWF  5C
....................  
....................    DO 
....................    { 
....................       n = MFRC522_ReadRegister (DIV_IRQ_REGISTER); 
0341:  MOVLW  05
0342:  MOVWF  6A
0343:  BCF    03.5
0344:  CALL   21C
0345:  MOVF   78,W
0346:  BSF    03.5
0347:  MOVWF  5D
....................       i--; 
0348:  DECF   5C,F
....................    } 
....................  
....................    WHILE ((i != 0)&& ! (n&0x04)); 
0349:  MOVF   5C,F
034A:  BTFSC  03.2
034B:  GOTO   34E
034C:  BTFSS  5D.2
034D:  GOTO   341
....................    pOutData[0] = MFRC522_ReadRegister (CRC_RESULT_L_REGISTER); 
034E:  MOVF   5A,W
034F:  MOVWF  78
0350:  MOVF   5B,W
0351:  MOVWF  7A
0352:  MOVF   5A,W
0353:  MOVWF  5E
0354:  MOVF   5B,W
0355:  MOVWF  5F
0356:  MOVLW  22
0357:  MOVWF  6A
0358:  BCF    03.5
0359:  CALL   21C
035A:  BSF    03.5
035B:  MOVF   5E,W
035C:  MOVWF  04
035D:  BCF    03.7
035E:  BTFSC  5F.0
035F:  BSF    03.7
0360:  MOVF   78,W
0361:  MOVWF  00
....................    pOutData[1] = MFRC522_ReadRegister (CRC_RESULT_M_REGISTER); 
0362:  MOVLW  01
0363:  ADDWF  5A,W
0364:  MOVWF  78
0365:  MOVF   5B,W
0366:  MOVWF  7A
0367:  BTFSC  03.0
0368:  INCF   7A,F
0369:  MOVF   78,W
036A:  MOVWF  5E
036B:  MOVF   7A,W
036C:  MOVWF  5F
036D:  MOVLW  21
036E:  MOVWF  6A
036F:  BCF    03.5
0370:  CALL   21C
0371:  BSF    03.5
0372:  MOVF   5E,W
0373:  MOVWF  04
0374:  BCF    03.7
0375:  BTFSC  5F.0
0376:  BSF    03.7
0377:  MOVF   78,W
0378:  MOVWF  00
0379:  BCF    03.5
037A:  RETURN
.................... } 
....................  
.................... uint8_t MFRC522_Reset(VOID) 
.................... { 
....................    output_bit (MF522_RST, 1) ; 
*
064E:  BSF    09.0
064F:  BSF    03.5
0650:  BCF    09.0
....................    delay_us (1); 
0651:  GOTO   652
0652:  NOP
....................    output_bit (MF522_RST, 0) ; 
0653:  BCF    03.5
0654:  BCF    09.0
0655:  BSF    03.5
0656:  BCF    09.0
....................    delay_us (1); 
0657:  GOTO   658
0658:  NOP
....................    output_bit (MF522_RST, 1) ; 
0659:  BCF    03.5
065A:  BSF    09.0
065B:  BSF    03.5
065C:  BCF    09.0
....................    delay_us (1); 
065D:  GOTO   65E
065E:  NOP
....................    MFRC522_WriteRegister (COMMAND_REGISTER, MFRC522_RESETPHASE) ; 
065F:  MOVLW  01
0660:  MOVWF  6B
0661:  MOVLW  0F
0662:  MOVWF  6C
0663:  BCF    03.5
0664:  CALL   27F
....................    delay_us (1); 
0665:  GOTO   666
0666:  NOP
....................     
....................    MFRC522_WriteRegister (MODE_REGISTER, 0x3D); 
0667:  MOVLW  11
0668:  BSF    03.5
0669:  MOVWF  6B
066A:  MOVLW  3D
066B:  MOVWF  6C
066C:  BCF    03.5
066D:  CALL   27F
....................    MFRC522_WriteRegister (TIMER_RELOAD_L_REGISTER, 30); 
066E:  MOVLW  2D
066F:  BSF    03.5
0670:  MOVWF  6B
0671:  MOVLW  1E
0672:  MOVWF  6C
0673:  BCF    03.5
0674:  CALL   27F
....................    MFRC522_WriteRegister (TIMER_RELOAD_H_REGISTER, 0) ; 
0675:  MOVLW  2C
0676:  BSF    03.5
0677:  MOVWF  6B
0678:  CLRF   6C
0679:  BCF    03.5
067A:  CALL   27F
....................    MFRC522_WriteRegister (TMODE_REGISTER, 0x8D) ; 
067B:  MOVLW  2A
067C:  BSF    03.5
067D:  MOVWF  6B
067E:  MOVLW  8D
067F:  MOVWF  6C
0680:  BCF    03.5
0681:  CALL   27F
....................    MFRC522_WriteRegister (TIMER_PRESCALER_REGISTER, 0x3E) ; 
0682:  MOVLW  2B
0683:  BSF    03.5
0684:  MOVWF  6B
0685:  MOVLW  3E
0686:  MOVWF  6C
0687:  BCF    03.5
0688:  CALL   27F
....................    MFRC522_WriteRegister (TX_ASK_REGISTER, 0x40) ; 
0689:  MOVLW  15
068A:  BSF    03.5
068B:  MOVWF  6B
068C:  MOVLW  40
068D:  MOVWF  6C
068E:  BCF    03.5
068F:  CALL   27F
....................     
....................    RETURN MI_OK; 
0690:  MOVLW  00
0691:  MOVWF  78
0692:  BSF    0A.3
0693:  BCF    0A.4
0694:  GOTO   209 (RETURN)
.................... } 
....................  
.................... uint8_t MFRC522_ReadRegister(uint8_t Address) 
*
021C:  BSF    03.5
021D:  CLRF   6D
.................... { 
....................    uint8_t i, ucAddr; 
....................    uint8_t ucResult = 0; 
....................    output_bit (MF522_SCK, 0); 
021E:  BCF    03.5
021F:  BCF    07.3
0220:  BCF    20.3
0221:  MOVF   20,W
0222:  BSF    03.5
0223:  MOVWF  07
....................    output_bit (MF522_NSS, 0); 
0224:  BCF    03.5
0225:  BCF    09.2
0226:  BSF    03.5
0227:  BCF    09.2
....................    ucAddr = ( (Address<<1)&0x7E)|0x80; 
0228:  BCF    03.0
0229:  RLF    6A,W
022A:  ANDLW  7E
022B:  IORLW  80
022C:  MOVWF  6C
....................    FOR (i = 8; i > 0; i--) 
022D:  MOVLW  08
022E:  MOVWF  6B
022F:  MOVF   6B,F
0230:  BTFSC  03.2
0231:  GOTO   251
....................    { 
....................       output_bit (MF522_SI, ((ucAddr&0x80) == 0x80)); 
0232:  MOVF   6C,W
0233:  ANDLW  80
0234:  SUBLW  80
0235:  BTFSC  03.2
0236:  GOTO   23B
0237:  BCF    03.5
0238:  BCF    07.4
0239:  GOTO   23D
023A:  BSF    03.5
023B:  BCF    03.5
023C:  BSF    07.4
023D:  BCF    20.4
023E:  MOVF   20,W
023F:  BSF    03.5
0240:  MOVWF  07
....................       output_bit (MF522_SCK, 1); 
0241:  BCF    03.5
0242:  BSF    07.3
0243:  BCF    20.3
0244:  MOVF   20,W
0245:  BSF    03.5
0246:  MOVWF  07
....................       ucAddr <<= 1; 
0247:  BCF    03.0
0248:  RLF    6C,F
....................       output_bit (MF522_SCK, 0); 
0249:  BCF    03.5
024A:  BCF    07.3
024B:  BCF    20.3
024C:  MOVF   20,W
024D:  BSF    03.5
024E:  MOVWF  07
024F:  DECF   6B,F
0250:  GOTO   22F
....................    } 
....................  
....................    FOR (i = 8; i > 0; i--) 
0251:  MOVLW  08
0252:  MOVWF  6B
0253:  MOVF   6B,F
0254:  BTFSC  03.2
0255:  GOTO   271
....................    { 
....................       output_bit (MF522_SCK, 1); 
0256:  BCF    03.5
0257:  BSF    07.3
0258:  BCF    20.3
0259:  MOVF   20,W
025A:  BSF    03.5
025B:  MOVWF  07
....................       ucResult <<= 1; 
025C:  BCF    03.0
025D:  RLF    6D,F
....................       ucResult|= (INT1) input (MF522_SO); 
025E:  BCF    03.5
025F:  BSF    20.5
0260:  MOVF   20,W
0261:  BSF    03.5
0262:  MOVWF  07
0263:  MOVLW  00
0264:  BCF    03.5
0265:  BTFSC  07.5
0266:  MOVLW  01
0267:  BSF    03.5
0268:  IORWF  6D,F
....................       output_bit (MF522_SCK, 0); 
0269:  BCF    03.5
026A:  BCF    07.3
026B:  BCF    20.3
026C:  MOVF   20,W
026D:  BSF    03.5
026E:  MOVWF  07
026F:  DECF   6B,F
0270:  GOTO   253
....................    } 
....................  
....................     
....................    output_bit (MF522_NSS, 1); 
0271:  BCF    03.5
0272:  BSF    09.2
0273:  BSF    03.5
0274:  BCF    09.2
....................    output_bit (MF522_SCK, 1); 
0275:  BCF    03.5
0276:  BSF    07.3
0277:  BCF    20.3
0278:  MOVF   20,W
0279:  BSF    03.5
027A:  MOVWF  07
....................    RETURN ucResult; 
027B:  MOVF   6D,W
027C:  MOVWF  78
027D:  BCF    03.5
027E:  RETURN
.................... } 
....................  
.................... void MFRC522_WriteRegister(uint8_t Address, uint8_t value) 
.................... { 
....................     
....................    uint8_t i, ucAddr; 
....................    output_bit (MF522_SCK, 0); 
027F:  BCF    07.3
0280:  BCF    20.3
0281:  MOVF   20,W
0282:  BSF    03.5
0283:  MOVWF  07
....................    output_bit (MF522_NSS, 0); 
0284:  BCF    03.5
0285:  BCF    09.2
0286:  BSF    03.5
0287:  BCF    09.2
....................    ucAddr = ( (Address<<1)&0x7E); 
0288:  BCF    03.0
0289:  RLF    6B,W
028A:  ANDLW  7E
028B:  MOVWF  6E
....................    FOR (i = 8; i > 0; i--) 
028C:  MOVLW  08
028D:  MOVWF  6D
028E:  MOVF   6D,F
028F:  BTFSC  03.2
0290:  GOTO   2B0
....................    { 
....................       output_bit (MF522_SI, ( (ucAddr&0x80) == 0x80)); 
0291:  MOVF   6E,W
0292:  ANDLW  80
0293:  SUBLW  80
0294:  BTFSC  03.2
0295:  GOTO   29A
0296:  BCF    03.5
0297:  BCF    07.4
0298:  GOTO   29C
0299:  BSF    03.5
029A:  BCF    03.5
029B:  BSF    07.4
029C:  BCF    20.4
029D:  MOVF   20,W
029E:  BSF    03.5
029F:  MOVWF  07
....................       output_bit (MF522_SCK, 1); 
02A0:  BCF    03.5
02A1:  BSF    07.3
02A2:  BCF    20.3
02A3:  MOVF   20,W
02A4:  BSF    03.5
02A5:  MOVWF  07
....................       ucAddr <<= 1; 
02A6:  BCF    03.0
02A7:  RLF    6E,F
....................       output_bit (MF522_SCK, 0); 
02A8:  BCF    03.5
02A9:  BCF    07.3
02AA:  BCF    20.3
02AB:  MOVF   20,W
02AC:  BSF    03.5
02AD:  MOVWF  07
02AE:  DECF   6D,F
02AF:  GOTO   28E
....................    } 
....................  
....................     
....................    FOR (i = 8; i > 0; i--) 
02B0:  MOVLW  08
02B1:  MOVWF  6D
02B2:  MOVF   6D,F
02B3:  BTFSC  03.2
02B4:  GOTO   2D4
....................    { 
....................       output_bit (MF522_SI, ( (value&0x80) == 0x80)); 
02B5:  MOVF   6C,W
02B6:  ANDLW  80
02B7:  SUBLW  80
02B8:  BTFSC  03.2
02B9:  GOTO   2BE
02BA:  BCF    03.5
02BB:  BCF    07.4
02BC:  GOTO   2C0
02BD:  BSF    03.5
02BE:  BCF    03.5
02BF:  BSF    07.4
02C0:  BCF    20.4
02C1:  MOVF   20,W
02C2:  BSF    03.5
02C3:  MOVWF  07
....................       output_bit (MF522_SCK, 1); 
02C4:  BCF    03.5
02C5:  BSF    07.3
02C6:  BCF    20.3
02C7:  MOVF   20,W
02C8:  BSF    03.5
02C9:  MOVWF  07
....................       value <<= 1; 
02CA:  BCF    03.0
02CB:  RLF    6C,F
....................       output_bit (MF522_SCK, 0); 
02CC:  BCF    03.5
02CD:  BCF    07.3
02CE:  BCF    20.3
02CF:  MOVF   20,W
02D0:  BSF    03.5
02D1:  MOVWF  07
02D2:  DECF   6D,F
02D3:  GOTO   2B2
....................    } 
....................  
....................    output_bit (MF522_NSS, 1); 
02D4:  BCF    03.5
02D5:  BSF    09.2
02D6:  BSF    03.5
02D7:  BCF    09.2
....................    output_bit (MF522_SCK, 1); 
02D8:  BCF    03.5
02D9:  BSF    07.3
02DA:  BCF    20.3
02DB:  MOVF   20,W
02DC:  BSF    03.5
02DD:  MOVWF  07
02DE:  BCF    03.5
02DF:  RETURN
.................... } 
....................  
.................... void SetBitMask(uint8_t reg,uint8_t mask)   
*
02F4:  BSF    03.5
02F5:  CLRF   69
.................... { 
....................    uint8_t tmp = 0x0; 
....................    tmp = MFRC522_ReadRegister (reg); 
02F6:  MOVF   67,W
02F7:  MOVWF  6A
02F8:  BCF    03.5
02F9:  CALL   21C
02FA:  MOVF   78,W
02FB:  BSF    03.5
02FC:  MOVWF  69
....................    MFRC522_WriteRegister (reg, tmp|mask); // set bit mask 
02FD:  MOVF   69,W
02FE:  IORWF  68,W
02FF:  MOVWF  6A
0300:  MOVF   67,W
0301:  MOVWF  6B
0302:  MOVF   6A,W
0303:  MOVWF  6C
0304:  BCF    03.5
0305:  CALL   27F
0306:  RETURN
.................... } 
....................  
.................... void ClearBitMask(uint8_t reg,uint8_t mask)   
*
02E0:  BSF    03.5
02E1:  CLRF   69
.................... { 
....................    uint8_t tmp = 0x0; 
....................    tmp = MFRC522_ReadRegister (reg); 
02E2:  MOVF   67,W
02E3:  MOVWF  6A
02E4:  BCF    03.5
02E5:  CALL   21C
02E6:  MOVF   78,W
02E7:  BSF    03.5
02E8:  MOVWF  69
....................    MFRC522_WriteRegister (reg, tmp&~mask); // clear bit mask 
02E9:  MOVF   68,W
02EA:  XORLW  FF
02EB:  ANDWF  69,W
02EC:  MOVWF  6A
02ED:  MOVF   67,W
02EE:  MOVWF  6B
02EF:  MOVF   6A,W
02F0:  MOVWF  6C
02F1:  BCF    03.5
02F2:  CALL   27F
02F3:  RETURN
.................... } 
....................  
.................... uint8_t MFRC522_ComMF522(uint8_t  Command,  
....................                          uint8_t * pInData,  
....................                          uint8_t InLenByte, 
....................                          uint8_t * pOutData,  
....................                          uint16_t * pOutLenBit) 
*
037B:  MOVLW  02
037C:  BSF    03.5
037D:  MOVWF  61
037E:  CLRF   62
037F:  CLRF   63
.................... { 
....................                             uint8_t status = MI_ERR; 
....................                             uint8_t irqEn = 0x00; 
....................                             uint8_t waitFor = 0x00; 
....................                             uint8_t lastBits; 
....................                             uint8_t n; 
....................                             uint16_t i; 
....................  
....................                             SWITCH (Command) 
0380:  MOVF   59,W
0381:  XORLW  0E
0382:  BCF    03.5
0383:  BTFSC  03.2
0384:  GOTO   389
0385:  XORLW  02
0386:  BTFSC  03.2
0387:  GOTO   38F
0388:  GOTO   396
....................                             { 
....................                                CASE MFRC522_AUTHENT: 
....................                                irqEn = 0x12; 
0389:  MOVLW  12
038A:  BSF    03.5
038B:  MOVWF  62
....................                                waitFor = 0x10; 
038C:  MOVLW  10
038D:  MOVWF  63
....................                                BREAK; 
038E:  GOTO   397
....................  
....................                                CASE MFRC522_TRANSCEIVE: 
....................                                irqEn = 0x77; 
038F:  MOVLW  77
0390:  BSF    03.5
0391:  MOVWF  62
....................                                waitFor = 0x30; 
0392:  MOVLW  30
0393:  MOVWF  63
....................                                BREAK; 
0394:  GOTO   397
0395:  BCF    03.5
....................  
....................                                DEFAULT: 
....................                                BREAK; 
0396:  BSF    03.5
....................                             } 
....................  
....................                              
....................                             MFRC522_WriteRegister (IE_REGISTER, irqEn|0x80) ; 
0397:  MOVF   62,W
0398:  IORLW  80
0399:  MOVWF  67
039A:  MOVLW  02
039B:  MOVWF  6B
039C:  MOVF   67,W
039D:  MOVWF  6C
039E:  BCF    03.5
039F:  CALL   27F
....................                             ClearBitMask (IRQ_REGISTER, 0x80) ; 
03A0:  MOVLW  04
03A1:  BSF    03.5
03A2:  MOVWF  67
03A3:  MOVLW  80
03A4:  MOVWF  68
03A5:  BCF    03.5
03A6:  CALL   2E0
....................                             MFRC522_WriteRegister (COMMAND_REGISTER, MFRC522_IDLE) ; 
03A7:  MOVLW  01
03A8:  BSF    03.5
03A9:  MOVWF  6B
03AA:  CLRF   6C
03AB:  BCF    03.5
03AC:  CALL   27F
....................                             SetBitMask (FIFO_LEVEL_REGISTER, 0x80) ; 
03AD:  MOVLW  0A
03AE:  BSF    03.5
03AF:  MOVWF  67
03B0:  MOVLW  80
03B1:  MOVWF  68
03B2:  BCF    03.5
03B3:  CALL   2F4
....................                              
....................                             FOR (i = 0; i < InLenByte; i++) 
03B4:  BSF    03.5
03B5:  CLRF   66
03B6:  MOVF   5C,W
03B7:  SUBWF  66,W
03B8:  BTFSC  03.0
03B9:  GOTO   3CB
....................                             { 
....................                                MFRC522_WriteRegister (FIFO_DATA_REGISTER, pInData[i]); 
03BA:  MOVF   66,W
03BB:  ADDWF  5A,W
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  BTFSC  5B.0
03BF:  BSF    03.7
03C0:  MOVF   00,W
03C1:  MOVWF  67
03C2:  MOVLW  09
03C3:  MOVWF  6B
03C4:  MOVF   67,W
03C5:  MOVWF  6C
03C6:  BCF    03.5
03C7:  CALL   27F
03C8:  BSF    03.5
03C9:  INCF   66,F
03CA:  GOTO   3B6
....................                             } 
....................  
....................                             MFRC522_WriteRegister (COMMAND_REGISTER, Command); 
03CB:  MOVLW  01
03CC:  MOVWF  6B
03CD:  MOVF   59,W
03CE:  MOVWF  6C
03CF:  BCF    03.5
03D0:  CALL   27F
....................  
....................                             IF (Command == MFRC522_TRANSCEIVE) 
03D1:  BSF    03.5
03D2:  MOVF   59,W
03D3:  SUBLW  0C
03D4:  BTFSS  03.2
03D5:  GOTO   3DD
....................                             { SetBitMask (BIT_FRAMING_REGISTER, 0x80); } 
03D6:  MOVLW  0D
03D7:  MOVWF  67
03D8:  MOVLW  80
03D9:  MOVWF  68
03DA:  BCF    03.5
03DB:  CALL   2F4
03DC:  BSF    03.5
....................                              
....................                             i = 600; //25ms 
03DD:  MOVLW  58
03DE:  MOVWF  66
....................                             DO 
....................                             { 
....................                                n = MFRC522_ReadRegister (IRQ_REGISTER); 
03DF:  MOVLW  04
03E0:  MOVWF  6A
03E1:  BCF    03.5
03E2:  CALL   21C
03E3:  MOVF   78,W
03E4:  BSF    03.5
03E5:  MOVWF  65
....................                                i--; 
03E6:  DECF   66,F
....................                             } 
....................  
....................                             WHILE ((i != 0)&& ! (n&0x01) && ! (n&waitFor)); 
03E7:  MOVF   66,F
03E8:  BTFSC  03.2
03E9:  GOTO   3F0
03EA:  BTFSC  65.0
03EB:  GOTO   3F0
03EC:  MOVF   65,W
03ED:  ANDWF  63,W
03EE:  BTFSC  03.2
03EF:  GOTO   3DF
....................                             ClearBitMask (BIT_FRAMING_REGISTER, 0x80) ; 
03F0:  MOVLW  0D
03F1:  MOVWF  67
03F2:  MOVLW  80
03F3:  MOVWF  68
03F4:  BCF    03.5
03F5:  CALL   2E0
....................                              
....................                             IF (i != 0) 
03F6:  BSF    03.5
03F7:  MOVF   66,F
03F8:  BTFSC  03.2
03F9:  GOTO   46D
....................                             { 
....................                                if ( ! (MFRC522_ReadRegister (ERROR_REGISTER)&0x1B)) 
03FA:  MOVLW  06
03FB:  MOVWF  6A
03FC:  BCF    03.5
03FD:  CALL   21C
03FE:  MOVF   78,W
03FF:  ANDLW  1B
0400:  BTFSS  03.2
0401:  GOTO   46A
....................                                { 
....................                                   status = MI_OK; 
0402:  BSF    03.5
0403:  CLRF   61
....................  
....................                                   IF (n&irqEn&0x01) 
0404:  MOVF   65,W
0405:  ANDWF  62,W
0406:  ANDLW  01
0407:  BTFSC  03.2
0408:  GOTO   40B
....................                                   { 
....................                                      status = MI_NOTAGERR; 
0409:  MOVLW  01
040A:  MOVWF  61
....................                                   } 
....................  
....................                                   IF (Command == MFRC522_TRANSCEIVE) 
040B:  MOVF   59,W
040C:  SUBLW  0C
040D:  BTFSS  03.2
040E:  GOTO   468
....................                                   { 
....................                                      n = MFRC522_ReadRegister (FIFO_LEVEL_REGISTER); 
040F:  MOVLW  0A
0410:  MOVWF  6A
0411:  BCF    03.5
0412:  CALL   21C
0413:  MOVF   78,W
0414:  BSF    03.5
0415:  MOVWF  65
....................                                      lastBits = MFRC522_ReadRegister (CONTROL_REGISTER)&0x07; 
0416:  MOVLW  0C
0417:  MOVWF  6A
0418:  BCF    03.5
0419:  CALL   21C
041A:  MOVF   78,W
041B:  ANDLW  07
041C:  BSF    03.5
041D:  MOVWF  64
....................  
....................                                      IF (lastBits) 
041E:  MOVF   64,F
041F:  BTFSC  03.2
0420:  GOTO   432
....................                                      { 
....................                                         * pOutLenBit = (n - 1) * 8 + lastBits; 
0421:  MOVF   5F,W
0422:  MOVWF  04
0423:  BCF    03.7
0424:  BTFSC  60.0
0425:  BSF    03.7
0426:  MOVLW  01
0427:  SUBWF  65,W
0428:  MOVWF  77
0429:  RLF    77,F
042A:  RLF    77,F
042B:  RLF    77,F
042C:  MOVLW  F8
042D:  ANDWF  77,F
042E:  MOVF   77,W
042F:  ADDWF  64,W
0430:  MOVWF  00
....................                                      } 
0431:  GOTO   43F
....................  
....................                                      ELSE 
....................                                      { 
....................                                         * pOutLenBit = n*8; 
0432:  MOVF   5F,W
0433:  MOVWF  04
0434:  BCF    03.7
0435:  BTFSC  60.0
0436:  BSF    03.7
0437:  RLF    65,W
0438:  MOVWF  77
0439:  RLF    77,F
043A:  RLF    77,F
043B:  MOVLW  F8
043C:  ANDWF  77,F
043D:  MOVF   77,W
043E:  MOVWF  00
....................                                      } 
....................  
....................                                      IF (n == 0) 
043F:  MOVF   65,F
0440:  BTFSS  03.2
0441:  GOTO   444
....................                                      { 
....................                                         n = 1; 
0442:  MOVLW  01
0443:  MOVWF  65
....................                                      } 
....................  
....................                                      IF (n > MAXRLEN) 
0444:  MOVF   65,W
0445:  SUBLW  12
0446:  BTFSC  03.0
0447:  GOTO   44A
....................                                      { 
....................                                         n = MAXRLEN; 
0448:  MOVLW  12
0449:  MOVWF  65
....................                                      } 
....................  
....................                                      FOR (i = 0; i < n; i++) 
044A:  CLRF   66
044B:  MOVF   65,W
044C:  SUBWF  66,W
044D:  BTFSC  03.0
044E:  GOTO   468
....................                                      { 
....................                                         pOutData[i] = MFRC522_ReadRegister (FIFO_DATA_REGISTER); 
044F:  MOVF   66,W
0450:  ADDWF  5D,W
0451:  MOVWF  78
0452:  MOVF   5E,W
0453:  MOVWF  7A
0454:  BTFSC  03.0
0455:  INCF   7A,F
0456:  MOVF   78,W
0457:  MOVWF  67
0458:  MOVF   7A,W
0459:  MOVWF  68
045A:  MOVLW  09
045B:  MOVWF  6A
045C:  BCF    03.5
045D:  CALL   21C
045E:  BSF    03.5
045F:  MOVF   67,W
0460:  MOVWF  04
0461:  BCF    03.7
0462:  BTFSC  68.0
0463:  BSF    03.7
0464:  MOVF   78,W
0465:  MOVWF  00
0466:  INCF   66,F
0467:  GOTO   44B
....................                                      } 
....................                                   } 
....................                                } 
0468:  GOTO   46D
0469:  BCF    03.5
....................  
....................                                ELSE 
....................                                { 
....................                                   status = MI_ERR; 
046A:  MOVLW  02
046B:  BSF    03.5
046C:  MOVWF  61
....................                                } 
....................                             } 
....................  
....................                             SetBitMask (CONTROL_REGISTER, 0x80); // stop timer now 
046D:  MOVLW  0C
046E:  MOVWF  67
046F:  MOVLW  80
0470:  MOVWF  68
0471:  BCF    03.5
0472:  CALL   2F4
....................                             MFRC522_WriteRegister (COMMAND_REGISTER, MFRC522_IDLE); 
0473:  MOVLW  01
0474:  BSF    03.5
0475:  MOVWF  6B
0476:  CLRF   6C
0477:  BCF    03.5
0478:  CALL   27F
....................                             RETURN status; 
0479:  BSF    03.5
047A:  MOVF   61,W
047B:  MOVWF  78
047C:  BCF    03.5
047D:  RETURN
.................... } 
....................  
....................                          VOID MFRC522_AntennaOn () 
....................                          { 
....................                             uint8_t i; 
....................                             i = MFRC522_ReadRegister (TX_CONTROL_REGISTER); 
*
069F:  MOVLW  14
06A0:  BSF    03.5
06A1:  MOVWF  6A
06A2:  BCF    03.5
06A3:  CALL   21C
06A4:  MOVF   78,W
06A5:  BSF    03.5
06A6:  MOVWF  3E
....................  
....................                             IF (! (i&0x03)) 
06A7:  MOVF   3E,W
06A8:  ANDLW  03
06A9:  BTFSS  03.2
06AA:  GOTO   6B2
....................                             { 
....................                                SetBitMask (TX_CONTROL_REGISTER, 0x03); 
06AB:  MOVLW  14
06AC:  MOVWF  67
06AD:  MOVLW  03
06AE:  MOVWF  68
06AF:  BCF    03.5
06B0:  CALL   2F4
06B1:  BSF    03.5
....................                             } 
06B2:  BCF    03.5
06B3:  BSF    0A.3
06B4:  BCF    0A.4
06B5:  GOTO   20F (RETURN)
....................                          } 
....................  
....................                          VOID MFRC522_AntennaOff () 
....................                          { 
....................                             ClearBitMask (TX_CONTROL_REGISTER, 0x03); 
*
0695:  MOVLW  14
0696:  BSF    03.5
0697:  MOVWF  67
0698:  MOVLW  03
0699:  MOVWF  68
069A:  BCF    03.5
069B:  CALL   2E0
069C:  BSF    0A.3
069D:  BCF    0A.4
069E:  GOTO   20C (RETURN)
....................                          } 
....................  
....................  
.................... uint8_t  data2[4]  = {0x12,0,0,0}; 
*
09C9:  MOVLW  12
09CA:  BCF    03.5
09CB:  MOVWF  21
09CC:  CLRF   22
09CD:  CLRF   23
09CE:  CLRF   24
.................... uint8_t  DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};  
09CF:  MOVLW  FF
09D0:  MOVWF  25
09D1:  MOVWF  26
09D2:  MOVWF  27
09D3:  MOVWF  28
09D4:  MOVWF  29
09D5:  MOVWF  2A
.................... uint8_t g_ucTempbuf[20];  
....................                                                        
....................                                                        
.................... void main() 
*
09BC:  MOVF   03,W
09BD:  ANDLW  1F
09BE:  MOVWF  03
09BF:  MOVLW  FF
09C0:  MOVWF  20
09C1:  BSF    03.5
09C2:  BSF    1F.0
09C3:  BSF    1F.1
09C4:  BSF    1F.2
09C5:  BCF    1F.3
09C6:  MOVLW  07
09C7:  MOVWF  1C
09C8:  BCF    03.7
.................... { 
....................     
....................    uint8_t status; 
....................    uint8_t TempStr[30]; 
....................    uint8_t Str[30]; 
....................    lcd_init (); 
*
09D6:  BCF    0A.3
09D7:  GOTO   104
09D8:  BSF    0A.3
....................    printf (LCD_PUTC, "\f MuaLinhKien.Vn \nPIC 16 / 18 Basic Kit"); 
09D9:  MOVLW  04
09DA:  BSF    03.6
09DB:  MOVWF  0D
09DC:  MOVLW  00
09DD:  MOVWF  0F
09DE:  BCF    0A.3
09DF:  BCF    03.6
09E0:  GOTO   1A6
09E1:  BSF    0A.3
....................    status = MFRC522_Write (1, Str); 
09E2:  MOVLW  01
09E3:  BSF    03.5
09E4:  MOVWF  3E
09E5:  CLRF   40
09E6:  MOVLW  A0
09E7:  MOVWF  3F
09E8:  BCF    0A.3
09E9:  BCF    03.5
09EA:  GOTO   47E
09EB:  BSF    0A.3
09EC:  MOVF   78,W
09ED:  MOVWF  3F
....................    status = MFRC522_BakValue (1, 2); 
09EE:  MOVLW  01
09EF:  BSF    03.5
09F0:  MOVWF  3E
09F1:  MOVLW  02
09F2:  MOVWF  3F
09F3:  BCF    0A.3
09F4:  BCF    03.5
09F5:  GOTO   508
09F6:  BSF    0A.3
09F7:  MOVF   78,W
09F8:  MOVWF  3F
....................    status = MFRC522_Value (PICC_DECREMENT, 1, data2); 
09F9:  MOVLW  C0
09FA:  BSF    03.5
09FB:  MOVWF  3E
09FC:  MOVLW  01
09FD:  MOVWF  3F
09FE:  CLRF   41
09FF:  MOVLW  21
0A00:  MOVWF  40
0A01:  BCF    0A.3
0A02:  BCF    03.5
0A03:  GOTO   59B
0A04:  BSF    0A.3
0A05:  MOVF   78,W
0A06:  MOVWF  3F
....................     
....................    MFRC522_Reset () ; 
0A07:  BCF    0A.3
0A08:  GOTO   64E
0A09:  BSF    0A.3
....................    MFRC522_AntennaOff (); 
0A0A:  BCF    0A.3
0A0B:  GOTO   695
0A0C:  BSF    0A.3
....................    MFRC522_AntennaOn (); 
0A0D:  BCF    0A.3
0A0E:  GOTO   69F
0A0F:  BSF    0A.3
....................    delay_ms (2000); 
0A10:  MOVLW  08
0A11:  MOVWF  5E
0A12:  MOVLW  FA
0A13:  BSF    03.5
0A14:  MOVWF  43
0A15:  BCF    0A.3
0A16:  BCF    03.5
0A17:  CALL   022
0A18:  BSF    0A.3
0A19:  DECFSZ 5E,F
0A1A:  GOTO   212
....................  
....................    WHILE (true) 
....................    { 
....................       //REQUEST 
....................       status = MFRC522_Request (PICC_REQALL, g_ucTempbuf); 
0A1B:  MOVLW  52
0A1C:  BSF    03.5
0A1D:  MOVWF  3E
0A1E:  CLRF   40
0A1F:  MOVLW  2B
0A20:  MOVWF  3F
0A21:  BCF    0A.3
0A22:  BCF    03.5
0A23:  GOTO   6B6
0A24:  BSF    0A.3
0A25:  MOVF   78,W
0A26:  MOVWF  3F
....................  
....................       IF (status != MI_OK) 
0A27:  MOVF   3F,F
0A28:  BTFSS  03.2
....................       { 
....................          //LED_GREEN = 1;            
....................          CONTINUE; 
0A29:  GOTO   21B
....................       } 
....................  
....................       //LED_GREEN = 0; 
....................       status = MFRC522_Anticoll (g_ucTempbuf); 
0A2A:  BSF    03.5
0A2B:  CLRF   3F
0A2C:  MOVLW  2B
0A2D:  MOVWF  3E
0A2E:  BCF    0A.3
0A2F:  BCF    03.5
0A30:  GOTO   706
0A31:  BSF    0A.3
0A32:  MOVF   78,W
0A33:  MOVWF  3F
....................  
....................       IF (status != MI_OK) 
0A34:  MOVF   3F,F
0A35:  BTFSS  03.2
....................       { CONTINUE; } 
0A36:  GOTO   21B
....................       printf (LCD_PUTC, "\fID:%2X:%2X:%2X:%2X", (uint16_t)g_ucTempbuf[0], (uint16_t) g_ucTempbuf[1], (uint16_t) g_ucTempbuf[2], (uint16_t) g_ucTempbuf[3]); 
0A37:  MOVLW  18
0A38:  BSF    03.6
0A39:  MOVWF  0D
0A3A:  MOVLW  00
0A3B:  MOVWF  0F
0A3C:  BCF    03.0
0A3D:  MOVLW  04
0A3E:  BSF    03.5
0A3F:  BCF    03.6
0A40:  MOVWF  3E
0A41:  BCF    0A.3
0A42:  BCF    03.5
0A43:  GOTO   770
0A44:  BSF    0A.3
0A45:  MOVF   2B,W
0A46:  BSF    03.5
0A47:  MOVWF  3E
0A48:  MOVLW  37
0A49:  MOVWF  3F
0A4A:  BCF    03.5
0A4B:  CALL   000
0A4C:  MOVLW  3A
0A4D:  BSF    03.5
0A4E:  MOVWF  42
0A4F:  BCF    0A.3
0A50:  BCF    03.5
0A51:  CALL   16C
0A52:  BSF    0A.3
0A53:  MOVF   2C,W
0A54:  BSF    03.5
0A55:  MOVWF  3E
0A56:  MOVLW  37
0A57:  MOVWF  3F
0A58:  BCF    03.5
0A59:  CALL   000
0A5A:  MOVLW  3A
0A5B:  BSF    03.5
0A5C:  MOVWF  42
0A5D:  BCF    0A.3
0A5E:  BCF    03.5
0A5F:  CALL   16C
0A60:  BSF    0A.3
0A61:  MOVF   2D,W
0A62:  BSF    03.5
0A63:  MOVWF  3E
0A64:  MOVLW  37
0A65:  MOVWF  3F
0A66:  BCF    03.5
0A67:  CALL   000
0A68:  MOVLW  3A
0A69:  BSF    03.5
0A6A:  MOVWF  42
0A6B:  BCF    0A.3
0A6C:  BCF    03.5
0A6D:  CALL   16C
0A6E:  BSF    0A.3
0A6F:  MOVF   2E,W
0A70:  BSF    03.5
0A71:  MOVWF  3E
0A72:  MOVLW  37
0A73:  MOVWF  3F
0A74:  BCF    03.5
0A75:  CALL   000
....................        
....................       status = MFRC522_Select (g_ucTempbuf); 
0A76:  BSF    03.5
0A77:  CLRF   3F
0A78:  MOVLW  2B
0A79:  MOVWF  3E
0A7A:  BCF    03.5
0A7B:  GOTO   029
0A7C:  MOVF   78,W
0A7D:  MOVWF  3F
....................  
....................       //LUA CHON CARD 
....................       IF (status != MI_OK) 
0A7E:  MOVF   3F,F
0A7F:  BTFSS  03.2
....................       { CONTINUE; } 
0A80:  GOTO   21B
....................       status = MFRC522_AuthState (PICC_AUTHENT1A, 1, DefaultKey, g_ucTempbuf); 
0A81:  MOVLW  60
0A82:  BSF    03.5
0A83:  MOVWF  3E
0A84:  MOVLW  01
0A85:  MOVWF  3F
0A86:  CLRF   41
0A87:  MOVLW  25
0A88:  MOVWF  40
0A89:  CLRF   43
0A8A:  MOVLW  2B
0A8B:  MOVWF  42
0A8C:  BCF    03.5
0A8D:  GOTO   09E
0A8E:  MOVF   78,W
0A8F:  MOVWF  3F
....................  
....................       IF (status != MI_OK) 
0A90:  MOVF   3F,F
0A91:  BTFSS  03.2
....................       { CONTINUE; } 
0A92:  GOTO   21B
....................       status = MFRC522_Read (1, g_ucTempbuf); 
0A93:  MOVLW  01
0A94:  BSF    03.5
0A95:  MOVWF  3E
0A96:  CLRF   40
0A97:  MOVLW  2B
0A98:  MOVWF  3F
0A99:  BCF    03.5
0A9A:  GOTO   11B
0A9B:  MOVF   78,W
0A9C:  MOVWF  3F
....................  
....................       IF (status != MI_OK) 
0A9D:  MOVF   3F,F
0A9E:  BTFSS  03.2
....................       { CONTINUE; } 
0A9F:  GOTO   21B
....................        
....................                                            
....................       g_ucTempbuf[15] = 0; 
0AA0:  CLRF   3A
....................        
....................       printf (LCD_PUTC, "\n %s", g_ucTempbuf); 
0AA1:  MOVLW  0A
0AA2:  BSF    03.5
0AA3:  MOVWF  42
0AA4:  BCF    0A.3
0AA5:  BCF    03.5
0AA6:  CALL   16C
0AA7:  BSF    0A.3
0AA8:  MOVLW  20
0AA9:  BSF    03.5
0AAA:  MOVWF  42
0AAB:  BCF    0A.3
0AAC:  BCF    03.5
0AAD:  CALL   16C
0AAE:  BSF    0A.3
0AAF:  MOVLW  2B
0AB0:  MOVWF  04
0AB1:  BCF    03.7
0AB2:  GOTO   170
....................       MFRC522_Halt () ;   //Ngu dong 
0AB3:  GOTO   191
0AB4:  GOTO   21B
....................    } 
.................... }                                      
....................  
0AB5:  SLEEP
....................                                                    

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
