CCS PCM C Compiler, Version 5.101, 43599               27-Jun-22 10:52

               Filename:   D:\DataStorage\PIC\Project2_Code\main.lst

               ROM used:   1127 words (14%)
                           Largest free fragment is 2048
               RAM used:   21 (6%) at main() level
                           35 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   416
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA 31,00
0005:  DATA 34,00
0006:  DATA 37,00
0007:  DATA 2A,00
0008:  DATA 32,00
0009:  DATA 35,00
000A:  DATA 38,00
000B:  DATA 30,00
000C:  DATA 33,00
000D:  DATA 36,00
000E:  DATA 39,00
000F:  DATA 23,00
0010:  DATA D0,30
0011:  DATA F3,39
0012:  DATA 3A,10
0013:  DATA 00,01
0014:  DATA D2,24
0015:  DATA 47,24
0016:  DATA 54,00
0017:  DATA 57,29
0018:  DATA 4F,27
0019:  DATA 47,00
*
016F:  MOVF   0B,W
0170:  MOVWF  30
0171:  BCF    0B.7
0172:  BSF    03.5
0173:  BSF    03.6
0174:  BSF    0C.7
0175:  BSF    0C.0
0176:  NOP
0177:  NOP
0178:  BCF    03.5
0179:  BCF    03.6
017A:  BTFSC  30.7
017B:  BSF    0B.7
017C:  BSF    03.6
017D:  MOVF   0C,W
017E:  ANDLW  7F
017F:  BTFSC  03.2
0180:  GOTO   1C3
0181:  BCF    03.6
0182:  MOVWF  30
0183:  BSF    03.6
0184:  MOVF   0D,W
0185:  BCF    03.6
0186:  MOVWF  31
0187:  BSF    03.6
0188:  MOVF   0F,W
0189:  BCF    03.6
018A:  MOVWF  32
018B:  MOVF   30,W
018C:  MOVWF  33
018D:  CALL   143
018E:  MOVF   31,W
018F:  BSF    03.6
0190:  MOVWF  0D
0191:  BCF    03.6
0192:  MOVF   32,W
0193:  BSF    03.6
0194:  MOVWF  0F
0195:  BCF    03.6
0196:  MOVF   0B,W
0197:  MOVWF  33
0198:  BCF    0B.7
0199:  BSF    03.5
019A:  BSF    03.6
019B:  BSF    0C.7
019C:  BSF    0C.0
019D:  NOP
019E:  NOP
019F:  BCF    03.5
01A0:  BCF    03.6
01A1:  BTFSC  33.7
01A2:  BSF    0B.7
01A3:  BSF    03.6
01A4:  RLF    0C,W
01A5:  RLF    0E,W
01A6:  ANDLW  7F
01A7:  BTFSC  03.2
01A8:  GOTO   1C3
01A9:  BCF    03.6
01AA:  MOVWF  30
01AB:  BSF    03.6
01AC:  MOVF   0D,W
01AD:  BCF    03.6
01AE:  MOVWF  31
01AF:  BSF    03.6
01B0:  MOVF   0F,W
01B1:  BCF    03.6
01B2:  MOVWF  32
01B3:  MOVF   30,W
01B4:  MOVWF  33
01B5:  CALL   143
01B6:  MOVF   31,W
01B7:  BSF    03.6
01B8:  MOVWF  0D
01B9:  BCF    03.6
01BA:  MOVF   32,W
01BB:  BSF    03.6
01BC:  MOVWF  0F
01BD:  INCF   0D,F
01BE:  BTFSC  03.2
01BF:  INCF   0F,F
01C0:  BCF    03.6
01C1:  GOTO   16F
01C2:  BSF    03.6
01C3:  BCF    03.6
01C4:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
*
001A:  MOVLW  34
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02D
0020:  MOVLW  06
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  7B
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 00,F
002C:  GOTO   020
002D:  RETURN
.................... 
.................... #define LCD_ENABLE_PIN  PIN_D0                                    
.................... #define LCD_RS_PIN      PIN_D1                                    
.................... #define LCD_RW_PIN      PIN_D2                                    
.................... #define LCD_DATA4       PIN_D4                                    
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                    
.................... #define LCD_DATA7       PIN_D7   
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0095:  BSF    08.4
....................    output_float(LCD_DATA5);
0096:  BSF    08.5
....................    output_float(LCD_DATA6);
0097:  BSF    08.6
....................    output_float(LCD_DATA7);
0098:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0099:  BCF    03.5
009A:  BSF    08.2
009B:  BSF    03.5
009C:  BCF    08.2
....................    delay_cycles(1);
009D:  NOP
....................    lcd_output_enable(1);
009E:  BCF    03.5
009F:  BSF    08.0
00A0:  BSF    03.5
00A1:  BCF    08.0
....................    delay_cycles(1);
00A2:  NOP
....................    high = lcd_read_nibble();
00A3:  BCF    03.5
00A4:  CALL   05C
00A5:  MOVF   78,W
00A6:  MOVWF  3B
....................       
....................    lcd_output_enable(0);
00A7:  BCF    08.0
00A8:  BSF    03.5
00A9:  BCF    08.0
....................    delay_cycles(1);
00AA:  NOP
....................    lcd_output_enable(1);
00AB:  BCF    03.5
00AC:  BSF    08.0
00AD:  BSF    03.5
00AE:  BCF    08.0
....................    delay_us(1);
00AF:  GOTO   0B0
00B0:  GOTO   0B1
00B1:  NOP
....................    low = lcd_read_nibble();
00B2:  BCF    03.5
00B3:  CALL   05C
00B4:  MOVF   78,W
00B5:  MOVWF  3A
....................       
....................    lcd_output_enable(0);
00B6:  BCF    08.0
00B7:  BSF    03.5
00B8:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00B9:  BCF    08.4
....................    output_drive(LCD_DATA5);
00BA:  BCF    08.5
....................    output_drive(LCD_DATA6);
00BB:  BCF    08.6
....................    output_drive(LCD_DATA7);
00BC:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00BD:  BCF    03.5
00BE:  SWAPF  3B,W
00BF:  MOVWF  77
00C0:  MOVLW  F0
00C1:  ANDWF  77,F
00C2:  MOVF   77,W
00C3:  IORWF  3A,W
00C4:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
005C:  CLRF   3C
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
005D:  BSF    03.5
005E:  BSF    08.4
005F:  MOVLW  00
0060:  BCF    03.5
0061:  BTFSC  08.4
0062:  MOVLW  01
0063:  IORWF  3C,F
....................    n |= input(LCD_DATA5) << 1;
0064:  BSF    03.5
0065:  BSF    08.5
0066:  MOVLW  00
0067:  BCF    03.5
0068:  BTFSC  08.5
0069:  MOVLW  01
006A:  MOVWF  77
006B:  BCF    03.0
006C:  RLF    77,F
006D:  MOVF   77,W
006E:  IORWF  3C,F
....................    n |= input(LCD_DATA6) << 2;
006F:  BSF    03.5
0070:  BSF    08.6
0071:  MOVLW  00
0072:  BCF    03.5
0073:  BTFSC  08.6
0074:  MOVLW  01
0075:  MOVWF  77
0076:  RLF    77,F
0077:  RLF    77,F
0078:  MOVLW  FC
0079:  ANDWF  77,F
007A:  MOVF   77,W
007B:  IORWF  3C,F
....................    n |= input(LCD_DATA7) << 3;
007C:  BSF    03.5
007D:  BSF    08.7
007E:  MOVLW  00
007F:  BCF    03.5
0080:  BTFSC  08.7
0081:  MOVLW  01
0082:  MOVWF  77
0083:  RLF    77,F
0084:  RLF    77,F
0085:  RLF    77,F
0086:  MOVLW  F8
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  3C,F
....................    
....................    return(n);
008A:  MOVF   3C,W
008B:  MOVWF  78
....................   #else
008C:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
002E:  BTFSC  3B.0
002F:  GOTO   032
0030:  BCF    08.4
0031:  GOTO   033
0032:  BSF    08.4
0033:  BSF    03.5
0034:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0035:  BCF    03.5
0036:  BTFSC  3B.1
0037:  GOTO   03A
0038:  BCF    08.5
0039:  GOTO   03B
003A:  BSF    08.5
003B:  BSF    03.5
003C:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
003D:  BCF    03.5
003E:  BTFSC  3B.2
003F:  GOTO   042
0040:  BCF    08.6
0041:  GOTO   043
0042:  BSF    08.6
0043:  BSF    03.5
0044:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0045:  BCF    03.5
0046:  BTFSC  3B.3
0047:  GOTO   04A
0048:  BCF    08.7
0049:  GOTO   04B
004A:  BSF    08.7
004B:  BSF    03.5
004C:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
004D:  NOP
....................    lcd_output_enable(1);
004E:  BCF    03.5
004F:  BSF    08.0
0050:  BSF    03.5
0051:  BCF    08.0
....................    delay_us(2);
0052:  MOVLW  03
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
....................    lcd_output_enable(0);
0056:  BCF    03.5
0057:  BCF    08.0
0058:  BSF    03.5
0059:  BCF    08.0
005A:  BCF    03.5
005B:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
008D:  BSF    03.5
008E:  BCF    08.0
....................    lcd_rs_tris();
008F:  BCF    08.1
....................    lcd_rw_tris();
0090:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0091:  BCF    03.5
0092:  BCF    08.1
0093:  BSF    03.5
0094:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00C5:  MOVF   78,W
00C6:  MOVWF  3A
00C7:  BTFSS  3A.7
00C8:  GOTO   0CB
00C9:  BSF    03.5
00CA:  GOTO   095
....................    lcd_output_rs(address);
00CB:  MOVF   38,F
00CC:  BTFSS  03.2
00CD:  GOTO   0D0
00CE:  BCF    08.1
00CF:  GOTO   0D1
00D0:  BSF    08.1
00D1:  BSF    03.5
00D2:  BCF    08.1
....................    delay_cycles(1);
00D3:  NOP
....................    lcd_output_rw(0);
00D4:  BCF    03.5
00D5:  BCF    08.2
00D6:  BSF    03.5
00D7:  BCF    08.2
....................    delay_cycles(1);
00D8:  NOP
....................    lcd_output_enable(0);
00D9:  BCF    03.5
00DA:  BCF    08.0
00DB:  BSF    03.5
00DC:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
00DD:  BCF    03.5
00DE:  SWAPF  39,W
00DF:  MOVWF  3A
00E0:  MOVLW  0F
00E1:  ANDWF  3A,F
00E2:  MOVF   3A,W
00E3:  MOVWF  3B
00E4:  CALL   02E
....................    lcd_send_nibble(n & 0xf);
00E5:  MOVF   39,W
00E6:  ANDLW  0F
00E7:  MOVWF  3A
00E8:  MOVWF  3B
00E9:  CALL   02E
00EA:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00EB:  MOVLW  28
00EC:  MOVWF  30
00ED:  MOVLW  0C
00EE:  MOVWF  31
00EF:  MOVLW  01
00F0:  MOVWF  32
00F1:  MOVLW  06
00F2:  MOVWF  33
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00F3:  BCF    08.0
00F4:  BSF    03.5
00F5:  BCF    08.0
....................    lcd_output_rs(0);
00F6:  BCF    03.5
00F7:  BCF    08.1
00F8:  BSF    03.5
00F9:  BCF    08.1
....................    lcd_output_rw(0);
00FA:  BCF    03.5
00FB:  BCF    08.2
00FC:  BSF    03.5
00FD:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00FE:  BCF    08.4
....................    output_drive(LCD_DATA5);
00FF:  BCF    08.5
....................    output_drive(LCD_DATA6);
0100:  BCF    08.6
....................    output_drive(LCD_DATA7);
0101:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0102:  BCF    08.0
....................    lcd_rs_tris();
0103:  BCF    08.1
....................    lcd_rw_tris();
0104:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
0105:  MOVLW  0F
0106:  BCF    03.5
0107:  MOVWF  34
0108:  CALL   01A
....................    for(i=1;i<=3;++i)
0109:  MOVLW  01
010A:  MOVWF  2F
010B:  MOVF   2F,W
010C:  SUBLW  03
010D:  BTFSS  03.0
010E:  GOTO   117
....................    {
....................        lcd_send_nibble(3);
010F:  MOVLW  03
0110:  MOVWF  3B
0111:  CALL   02E
....................        delay_ms(5);
0112:  MOVLW  05
0113:  MOVWF  34
0114:  CALL   01A
0115:  INCF   2F,F
0116:  GOTO   10B
....................    }
....................    
....................    lcd_send_nibble(2);
0117:  MOVLW  02
0118:  MOVWF  3B
0119:  CALL   02E
....................    delay_ms(5);
011A:  MOVLW  05
011B:  MOVWF  34
011C:  CALL   01A
....................    for(i=0;i<=3;++i)
011D:  CLRF   2F
011E:  MOVF   2F,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0122:  MOVLW  30
0123:  ADDWF  2F,W
0124:  MOVWF  04
0125:  BCF    03.7
0126:  MOVF   00,W
0127:  MOVWF  34
0128:  CLRF   38
0129:  MOVF   34,W
012A:  MOVWF  39
012B:  CALL   08D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
012C:  INCF   2F,F
012D:  GOTO   11E
012E:  BCF    0A.3
012F:  BCF    0A.4
0130:  GOTO   426 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0131:  DECFSZ 35,W
0132:  GOTO   134
0133:  GOTO   137
....................       address=LCD_LINE_TWO;
0134:  MOVLW  40
0135:  MOVWF  36
0136:  GOTO   138
....................    else
....................       address=0;
0137:  CLRF   36
....................      
....................    address+=x-1;
0138:  MOVLW  01
0139:  SUBWF  34,W
013A:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address);
013B:  MOVF   36,W
013C:  IORLW  80
013D:  MOVWF  37
013E:  CLRF   38
013F:  MOVF   37,W
0140:  MOVWF  39
0141:  CALL   08D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0142:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0143:  MOVF   33,W
0144:  XORLW  07
0145:  BTFSC  03.2
0146:  GOTO   151
0147:  XORLW  0B
0148:  BTFSC  03.2
0149:  GOTO   156
014A:  XORLW  06
014B:  BTFSC  03.2
014C:  GOTO   15E
014D:  XORLW  02
014E:  BTFSC  03.2
014F:  GOTO   164
0150:  GOTO   169
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0151:  MOVLW  01
0152:  MOVWF  34
0153:  MOVWF  35
0154:  CALL   131
0155:  GOTO   16E
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0156:  CLRF   38
0157:  MOVLW  01
0158:  MOVWF  39
0159:  CALL   08D
....................                      delay_ms(2);
015A:  MOVLW  02
015B:  MOVWF  34
015C:  CALL   01A
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
015D:  GOTO   16E
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
015E:  MOVLW  01
015F:  MOVWF  34
0160:  MOVLW  02
0161:  MOVWF  35
0162:  CALL   131
0163:  GOTO   16E
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0164:  CLRF   38
0165:  MOVLW  10
0166:  MOVWF  39
0167:  CALL   08D
0168:  GOTO   16E
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0169:  MOVLW  01
016A:  MOVWF  38
016B:  MOVF   33,W
016C:  MOVWF  39
016D:  CALL   08D
....................      #endif
....................    }
016E:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define COL1 pin_B1
.................... #define COL2 pin_B2
.................... #define COL3 pin_B3
.................... #define ROW1 pin_B4
.................... #define ROW2 pin_B5
.................... #define ROW3 pin_B6
.................... #define ROW4 pin_B7
.................... #include <keypad.c>
.................... #ifndef __KEYPAD_C__
.................... #define __KEYPAD_C__
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
....................    delay_cycles(1);
....................    lcd_output_enable(1);
....................    delay_cycles(1);
....................    high = lcd_read_nibble();
....................       
....................    lcd_output_enable(0);
....................    delay_cycles(1);
....................    lcd_output_enable(1);
....................    delay_us(1);
....................    low = lcd_read_nibble();
....................       
....................    lcd_output_enable(0);
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
....................    lcd_output_enable(1);
....................    delay_us(2);
....................    lcd_output_enable(0);
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
....................    lcd_rs_tris();
....................    lcd_rw_tris();
....................   #endif
.................... 
....................    lcd_output_rs(0);
....................    while ( bit_test(lcd_read_byte(),7) ) ;
....................    lcd_output_rs(address);
....................    delay_cycles(1);
....................    lcd_output_rw(0);
....................    delay_cycles(1);
....................    lcd_output_enable(0);
....................    lcd_send_nibble(n >> 4);
....................    lcd_send_nibble(n & 0xf);
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
....................    lcd_output_rs(0);
....................    lcd_output_rw(0);
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
....................    lcd_rs_tris();
....................    lcd_rw_tris();
....................  #endif
....................     
....................    delay_ms(15);
....................    for(i=1;i<=3;++i)
....................    {
....................        lcd_send_nibble(3);
....................        delay_ms(5);
....................    }
....................    
....................    lcd_send_nibble(2);
....................    delay_ms(5);
....................    for(i=0;i<=3;++i)
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
....................       address=LCD_LINE_TWO;
....................    else
....................       address=0;
....................      
....................    address+=x-1;
....................    lcd_send_byte(0,0x80|address);
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
....................                      delay_ms(2);
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
....................      #endif
....................    }
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... int i=0;
.................... char A[10];
.................... 
.................... void key_init(void) {
....................    output_drive(COL1);  //Set output
....................    output_drive(COL2);
....................    output_drive(COL3);
....................    output_float(ROW1);  //Set input
....................    output_float(ROW2);
....................    output_float(ROW3);
....................    output_float(ROW4);
.................... }
.................... 
.................... unsigned char quet_phim(int x) {
....................    output_b(0b11111101);   //Quet col1
*
01C5:  BSF    03.5
01C6:  CLRF   06
01C7:  MOVLW  FD
01C8:  BCF    03.5
01C9:  MOVWF  06
....................    delay_ms(50);
01CA:  MOVLW  32
01CB:  MOVWF  34
01CC:  CALL   01A
....................    if (!input(ROW1)) {
01CD:  BSF    03.5
01CE:  BSF    06.4
01CF:  BCF    03.5
01D0:  BTFSC  06.4
01D1:  GOTO   1F1
....................       delay_ms(250);
01D2:  MOVLW  FA
01D3:  MOVWF  34
01D4:  CALL   01A
....................       while(!input(ROW1));
01D5:  BSF    03.5
01D6:  BSF    06.4
01D7:  BCF    03.5
01D8:  BTFSS  06.4
01D9:  GOTO   1D5
....................       lcd_gotoxy(x+i, 1);
01DA:  MOVF   20,W
01DB:  ADDWF  2F,W
01DC:  MOVWF  30
01DD:  MOVWF  34
01DE:  MOVLW  01
01DF:  MOVWF  35
01E0:  CALL   131
....................       lcd_putc("1");
01E1:  MOVLW  04
01E2:  BSF    03.6
01E3:  MOVWF  0D
01E4:  MOVLW  00
01E5:  MOVWF  0F
01E6:  BCF    03.6
01E7:  CALL   16F
....................       A[i]='1';
01E8:  MOVLW  21
01E9:  ADDWF  20,W
01EA:  MOVWF  04
01EB:  BCF    03.7
01EC:  MOVLW  31
01ED:  MOVWF  00
....................       i++;
01EE:  INCF   20,F
....................       return '1';
01EF:  MOVWF  78
01F0:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW2)) {
01F1:  BSF    03.5
01F2:  BSF    06.5
01F3:  BCF    03.5
01F4:  BTFSC  06.5
01F5:  GOTO   215
....................       delay_ms(250);
01F6:  MOVLW  FA
01F7:  MOVWF  34
01F8:  CALL   01A
....................       while(!input(ROW2));
01F9:  BSF    03.5
01FA:  BSF    06.5
01FB:  BCF    03.5
01FC:  BTFSS  06.5
01FD:  GOTO   1F9
....................       lcd_gotoxy(x+i, 1);
01FE:  MOVF   20,W
01FF:  ADDWF  2F,W
0200:  MOVWF  30
0201:  MOVWF  34
0202:  MOVLW  01
0203:  MOVWF  35
0204:  CALL   131
....................       lcd_putc("4");
0205:  MOVLW  05
0206:  BSF    03.6
0207:  MOVWF  0D
0208:  MOVLW  00
0209:  MOVWF  0F
020A:  BCF    03.6
020B:  CALL   16F
....................       A[i]='4';
020C:  MOVLW  21
020D:  ADDWF  20,W
020E:  MOVWF  04
020F:  BCF    03.7
0210:  MOVLW  34
0211:  MOVWF  00
....................       i++;
0212:  INCF   20,F
....................       return '4';
0213:  MOVWF  78
0214:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW3)) {
0215:  BSF    03.5
0216:  BSF    06.6
0217:  BCF    03.5
0218:  BTFSC  06.6
0219:  GOTO   239
....................       delay_ms(250);
021A:  MOVLW  FA
021B:  MOVWF  34
021C:  CALL   01A
....................       while(!input(ROW3));
021D:  BSF    03.5
021E:  BSF    06.6
021F:  BCF    03.5
0220:  BTFSS  06.6
0221:  GOTO   21D
....................       lcd_gotoxy(x+i, 1);
0222:  MOVF   20,W
0223:  ADDWF  2F,W
0224:  MOVWF  30
0225:  MOVWF  34
0226:  MOVLW  01
0227:  MOVWF  35
0228:  CALL   131
....................       lcd_putc("7");
0229:  MOVLW  06
022A:  BSF    03.6
022B:  MOVWF  0D
022C:  MOVLW  00
022D:  MOVWF  0F
022E:  BCF    03.6
022F:  CALL   16F
....................       A[i]='7';
0230:  MOVLW  21
0231:  ADDWF  20,W
0232:  MOVWF  04
0233:  BCF    03.7
0234:  MOVLW  37
0235:  MOVWF  00
....................       i++;
0236:  INCF   20,F
....................       return '7';
0237:  MOVWF  78
0238:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW4)) {
0239:  BSF    03.5
023A:  BSF    06.7
023B:  BCF    03.5
023C:  BTFSC  06.7
023D:  GOTO   25D
....................       delay_ms(250);
023E:  MOVLW  FA
023F:  MOVWF  34
0240:  CALL   01A
....................       while(!input(ROW4));
0241:  BSF    03.5
0242:  BSF    06.7
0243:  BCF    03.5
0244:  BTFSS  06.7
0245:  GOTO   241
....................       lcd_gotoxy(x+i, 1);
0246:  MOVF   20,W
0247:  ADDWF  2F,W
0248:  MOVWF  30
0249:  MOVWF  34
024A:  MOVLW  01
024B:  MOVWF  35
024C:  CALL   131
....................       lcd_putc("*");
024D:  MOVLW  07
024E:  BSF    03.6
024F:  MOVWF  0D
0250:  MOVLW  00
0251:  MOVWF  0F
0252:  BCF    03.6
0253:  CALL   16F
....................       A[i]='*';
0254:  MOVLW  21
0255:  ADDWF  20,W
0256:  MOVWF  04
0257:  BCF    03.7
0258:  MOVLW  2A
0259:  MOVWF  00
....................       i++;
025A:  INCF   20,F
....................       return '*';
025B:  MOVWF  78
025C:  GOTO   38C
....................    }
.................... 
....................    output_b(0b11111011);   //Quet col2
025D:  BSF    03.5
025E:  CLRF   06
025F:  MOVLW  FB
0260:  BCF    03.5
0261:  MOVWF  06
....................    delay_ms(50);
0262:  MOVLW  32
0263:  MOVWF  34
0264:  CALL   01A
....................    if (!input(ROW1)) {
0265:  BSF    03.5
0266:  BSF    06.4
0267:  BCF    03.5
0268:  BTFSC  06.4
0269:  GOTO   289
....................       delay_ms(250);
026A:  MOVLW  FA
026B:  MOVWF  34
026C:  CALL   01A
....................       while(!input(ROW1));
026D:  BSF    03.5
026E:  BSF    06.4
026F:  BCF    03.5
0270:  BTFSS  06.4
0271:  GOTO   26D
....................       lcd_gotoxy(x+i, 1);
0272:  MOVF   20,W
0273:  ADDWF  2F,W
0274:  MOVWF  30
0275:  MOVWF  34
0276:  MOVLW  01
0277:  MOVWF  35
0278:  CALL   131
....................       lcd_putc("2");
0279:  MOVLW  08
027A:  BSF    03.6
027B:  MOVWF  0D
027C:  MOVLW  00
027D:  MOVWF  0F
027E:  BCF    03.6
027F:  CALL   16F
....................       A[i]='2';
0280:  MOVLW  21
0281:  ADDWF  20,W
0282:  MOVWF  04
0283:  BCF    03.7
0284:  MOVLW  32
0285:  MOVWF  00
....................       i++;
0286:  INCF   20,F
....................       return '2';
0287:  MOVWF  78
0288:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW2)) {
0289:  BSF    03.5
028A:  BSF    06.5
028B:  BCF    03.5
028C:  BTFSC  06.5
028D:  GOTO   2AD
....................       delay_ms(250);
028E:  MOVLW  FA
028F:  MOVWF  34
0290:  CALL   01A
....................       while(!input(ROW2));
0291:  BSF    03.5
0292:  BSF    06.5
0293:  BCF    03.5
0294:  BTFSS  06.5
0295:  GOTO   291
....................       lcd_gotoxy(x+i, 1);
0296:  MOVF   20,W
0297:  ADDWF  2F,W
0298:  MOVWF  30
0299:  MOVWF  34
029A:  MOVLW  01
029B:  MOVWF  35
029C:  CALL   131
....................       lcd_putc("5");
029D:  MOVLW  09
029E:  BSF    03.6
029F:  MOVWF  0D
02A0:  MOVLW  00
02A1:  MOVWF  0F
02A2:  BCF    03.6
02A3:  CALL   16F
....................       A[i]='5';
02A4:  MOVLW  21
02A5:  ADDWF  20,W
02A6:  MOVWF  04
02A7:  BCF    03.7
02A8:  MOVLW  35
02A9:  MOVWF  00
....................       i++;
02AA:  INCF   20,F
....................       return '5';
02AB:  MOVWF  78
02AC:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW3)) {
02AD:  BSF    03.5
02AE:  BSF    06.6
02AF:  BCF    03.5
02B0:  BTFSC  06.6
02B1:  GOTO   2D1
....................       delay_ms(250);
02B2:  MOVLW  FA
02B3:  MOVWF  34
02B4:  CALL   01A
....................       while(!input(ROW3));
02B5:  BSF    03.5
02B6:  BSF    06.6
02B7:  BCF    03.5
02B8:  BTFSS  06.6
02B9:  GOTO   2B5
....................       lcd_gotoxy(x+i, 1);
02BA:  MOVF   20,W
02BB:  ADDWF  2F,W
02BC:  MOVWF  30
02BD:  MOVWF  34
02BE:  MOVLW  01
02BF:  MOVWF  35
02C0:  CALL   131
....................       lcd_putc("8");
02C1:  MOVLW  0A
02C2:  BSF    03.6
02C3:  MOVWF  0D
02C4:  MOVLW  00
02C5:  MOVWF  0F
02C6:  BCF    03.6
02C7:  CALL   16F
....................       A[i]='8';
02C8:  MOVLW  21
02C9:  ADDWF  20,W
02CA:  MOVWF  04
02CB:  BCF    03.7
02CC:  MOVLW  38
02CD:  MOVWF  00
....................       i++;
02CE:  INCF   20,F
....................       return '8';
02CF:  MOVWF  78
02D0:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW4)) {
02D1:  BSF    03.5
02D2:  BSF    06.7
02D3:  BCF    03.5
02D4:  BTFSC  06.7
02D5:  GOTO   2F5
....................       delay_ms(250);
02D6:  MOVLW  FA
02D7:  MOVWF  34
02D8:  CALL   01A
....................       while(!input(ROW4));
02D9:  BSF    03.5
02DA:  BSF    06.7
02DB:  BCF    03.5
02DC:  BTFSS  06.7
02DD:  GOTO   2D9
....................       lcd_gotoxy(x+i, 1);
02DE:  MOVF   20,W
02DF:  ADDWF  2F,W
02E0:  MOVWF  30
02E1:  MOVWF  34
02E2:  MOVLW  01
02E3:  MOVWF  35
02E4:  CALL   131
....................       lcd_putc("0");
02E5:  MOVLW  0B
02E6:  BSF    03.6
02E7:  MOVWF  0D
02E8:  MOVLW  00
02E9:  MOVWF  0F
02EA:  BCF    03.6
02EB:  CALL   16F
....................       A[i]='0';
02EC:  MOVLW  21
02ED:  ADDWF  20,W
02EE:  MOVWF  04
02EF:  BCF    03.7
02F0:  MOVLW  30
02F1:  MOVWF  00
....................       i++;
02F2:  INCF   20,F
....................       return '0';
02F3:  MOVWF  78
02F4:  GOTO   38C
....................    }
.................... 
....................    output_b(0b11110111);   //Quet col3
02F5:  BSF    03.5
02F6:  CLRF   06
02F7:  MOVLW  F7
02F8:  BCF    03.5
02F9:  MOVWF  06
....................    delay_ms(50);
02FA:  MOVLW  32
02FB:  MOVWF  34
02FC:  CALL   01A
....................    if (!input(ROW1)) {
02FD:  BSF    03.5
02FE:  BSF    06.4
02FF:  BCF    03.5
0300:  BTFSC  06.4
0301:  GOTO   321
....................       delay_ms(250);
0302:  MOVLW  FA
0303:  MOVWF  34
0304:  CALL   01A
....................       while(!input(ROW1));
0305:  BSF    03.5
0306:  BSF    06.4
0307:  BCF    03.5
0308:  BTFSS  06.4
0309:  GOTO   305
....................       lcd_gotoxy(x+i, 1);
030A:  MOVF   20,W
030B:  ADDWF  2F,W
030C:  MOVWF  30
030D:  MOVWF  34
030E:  MOVLW  01
030F:  MOVWF  35
0310:  CALL   131
....................       lcd_putc("3");
0311:  MOVLW  0C
0312:  BSF    03.6
0313:  MOVWF  0D
0314:  MOVLW  00
0315:  MOVWF  0F
0316:  BCF    03.6
0317:  CALL   16F
....................       A[i]='3';
0318:  MOVLW  21
0319:  ADDWF  20,W
031A:  MOVWF  04
031B:  BCF    03.7
031C:  MOVLW  33
031D:  MOVWF  00
....................       i++;
031E:  INCF   20,F
....................       return '3';
031F:  MOVWF  78
0320:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW2)) {
0321:  BSF    03.5
0322:  BSF    06.5
0323:  BCF    03.5
0324:  BTFSC  06.5
0325:  GOTO   345
....................       delay_ms(250);
0326:  MOVLW  FA
0327:  MOVWF  34
0328:  CALL   01A
....................       while(!input(ROW2));
0329:  BSF    03.5
032A:  BSF    06.5
032B:  BCF    03.5
032C:  BTFSS  06.5
032D:  GOTO   329
....................       lcd_gotoxy(x+i, 1);
032E:  MOVF   20,W
032F:  ADDWF  2F,W
0330:  MOVWF  30
0331:  MOVWF  34
0332:  MOVLW  01
0333:  MOVWF  35
0334:  CALL   131
....................       lcd_putc("6");
0335:  MOVLW  0D
0336:  BSF    03.6
0337:  MOVWF  0D
0338:  MOVLW  00
0339:  MOVWF  0F
033A:  BCF    03.6
033B:  CALL   16F
....................       A[i]='6';
033C:  MOVLW  21
033D:  ADDWF  20,W
033E:  MOVWF  04
033F:  BCF    03.7
0340:  MOVLW  36
0341:  MOVWF  00
....................       i++;
0342:  INCF   20,F
....................       return '6';
0343:  MOVWF  78
0344:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW3)) {
0345:  BSF    03.5
0346:  BSF    06.6
0347:  BCF    03.5
0348:  BTFSC  06.6
0349:  GOTO   369
....................       delay_ms(250);
034A:  MOVLW  FA
034B:  MOVWF  34
034C:  CALL   01A
....................       while(!input(ROW3));
034D:  BSF    03.5
034E:  BSF    06.6
034F:  BCF    03.5
0350:  BTFSS  06.6
0351:  GOTO   34D
....................       lcd_gotoxy(x+i, 1);
0352:  MOVF   20,W
0353:  ADDWF  2F,W
0354:  MOVWF  30
0355:  MOVWF  34
0356:  MOVLW  01
0357:  MOVWF  35
0358:  CALL   131
....................       lcd_putc("9");
0359:  MOVLW  0E
035A:  BSF    03.6
035B:  MOVWF  0D
035C:  MOVLW  00
035D:  MOVWF  0F
035E:  BCF    03.6
035F:  CALL   16F
....................       A[i]='9';
0360:  MOVLW  21
0361:  ADDWF  20,W
0362:  MOVWF  04
0363:  BCF    03.7
0364:  MOVLW  39
0365:  MOVWF  00
....................       i++;
0366:  INCF   20,F
....................       return '9';
0367:  MOVWF  78
0368:  GOTO   38C
....................    }
.................... 
....................    if (!input(ROW4)) {
0369:  BSF    03.5
036A:  BSF    06.7
036B:  BCF    03.5
036C:  BTFSC  06.7
036D:  GOTO   38C
....................       delay_ms(250);
036E:  MOVLW  FA
036F:  MOVWF  34
0370:  CALL   01A
....................       while(!input(ROW4));
0371:  BSF    03.5
0372:  BSF    06.7
0373:  BCF    03.5
0374:  BTFSS  06.7
0375:  GOTO   371
....................       lcd_gotoxy(x+i, 1);
0376:  MOVF   20,W
0377:  ADDWF  2F,W
0378:  MOVWF  30
0379:  MOVWF  34
037A:  MOVLW  01
037B:  MOVWF  35
037C:  CALL   131
....................       lcd_putc("#");
037D:  MOVLW  0F
037E:  BSF    03.6
037F:  MOVWF  0D
0380:  MOVLW  00
0381:  MOVWF  0F
0382:  BCF    03.6
0383:  CALL   16F
....................       A[i]='#';
0384:  MOVLW  21
0385:  ADDWF  20,W
0386:  MOVWF  04
0387:  BCF    03.7
0388:  MOVLW  23
0389:  MOVWF  00
....................       i++;
038A:  INCF   20,F
....................       return '#';
038B:  MOVWF  78
....................    }
038C:  BCF    0A.3
038D:  BCF    0A.4
038E:  GOTO   436 (RETURN)
....................    
.................... }
.................... 
.................... int checkpass() {
....................    if (i<=0 && i<6) {
038F:  MOVF   20,F
0390:  BTFSS  03.2
0391:  GOTO   39A
0392:  MOVF   20,W
0393:  SUBLW  05
0394:  BTFSS  03.0
0395:  GOTO   39A
....................       return 0;
0396:  MOVLW  00
0397:  MOVWF  78
0398:  GOTO   3BC
....................    }else {
0399:  GOTO   3BC
....................       if (A[0]=='1' && A[1]=='2' && A[2]=='3'&& A[3]=='4'&& A[4]=='5'&& A[5]=='6' && A[6]=='*') {
039A:  MOVF   21,W
039B:  SUBLW  31
039C:  BTFSS  03.2
039D:  GOTO   3BA
039E:  MOVF   22,W
039F:  SUBLW  32
03A0:  BTFSS  03.2
03A1:  GOTO   3BA
03A2:  MOVF   23,W
03A3:  SUBLW  33
03A4:  BTFSS  03.2
03A5:  GOTO   3BA
03A6:  MOVF   24,W
03A7:  SUBLW  34
03A8:  BTFSS  03.2
03A9:  GOTO   3BA
03AA:  MOVF   25,W
03AB:  SUBLW  35
03AC:  BTFSS  03.2
03AD:  GOTO   3BA
03AE:  MOVF   26,W
03AF:  SUBLW  36
03B0:  BTFSS  03.2
03B1:  GOTO   3BA
03B2:  MOVF   27,W
03B3:  SUBLW  2A
03B4:  BTFSS  03.2
03B5:  GOTO   3BA
....................          return 1;
03B6:  MOVLW  01
03B7:  MOVWF  78
03B8:  GOTO   3BC
....................       }else {
03B9:  GOTO   3BC
....................          return 0;
03BA:  MOVLW  00
03BB:  MOVWF  78
....................       }
....................    }
03BC:  BCF    0A.3
03BD:  BCF    0A.4
03BE:  GOTO   43D (RETURN)
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... //__LCD_Function__Start
.................... void LCD_Enable( void) {
....................    output_high(LCD_ENABLE_PIN);
*
03F1:  BSF    03.5
03F2:  BCF    08.0
03F3:  BCF    03.5
03F4:  BSF    08.0
....................    delay_ms(3);
03F5:  MOVLW  03
03F6:  MOVWF  34
03F7:  CALL   01A
....................    output_low(LCD_ENABLE_PIN);
03F8:  BSF    03.5
03F9:  BCF    08.0
03FA:  BCF    03.5
03FB:  BCF    08.0
....................    delay_ms(50);
03FC:  MOVLW  32
03FD:  MOVWF  34
03FE:  CALL   01A
03FF:  RETURN
.................... }
.................... 
.................... void LCD_Send4Bit(unsigned char Data) {
....................    output_bit(LCD_DATA4, Data && 0x01);
*
03BF:  MOVF   31,F
03C0:  BTFSS  03.2
03C1:  GOTO   3C4
03C2:  BCF    08.4
03C3:  GOTO   3C5
03C4:  BSF    08.4
03C5:  BSF    03.5
03C6:  BCF    08.4
....................    output_bit(LCD_DATA5, (Data>>1) && 1);
03C7:  BCF    03.0
03C8:  BCF    03.5
03C9:  RRF    31,W
03CA:  XORLW  00
03CB:  BTFSS  03.2
03CC:  GOTO   3CF
03CD:  BCF    08.5
03CE:  GOTO   3D0
03CF:  BSF    08.5
03D0:  BSF    03.5
03D1:  BCF    08.5
....................    output_bit(LCD_DATA6, (Data>>2) && 1);
03D2:  BCF    03.5
03D3:  RRF    31,W
03D4:  MOVWF  77
03D5:  RRF    77,F
03D6:  MOVLW  3F
03D7:  ANDWF  77,F
03D8:  MOVF   77,W
03D9:  BTFSS  03.2
03DA:  GOTO   3DD
03DB:  BCF    08.6
03DC:  GOTO   3DE
03DD:  BSF    08.6
03DE:  BSF    03.5
03DF:  BCF    08.6
....................    output_bit(LCD_DATA7, (Data>>3) && 1);
03E0:  BCF    03.5
03E1:  RRF    31,W
03E2:  MOVWF  77
03E3:  RRF    77,F
03E4:  RRF    77,F
03E5:  MOVLW  1F
03E6:  ANDWF  77,F
03E7:  MOVF   77,W
03E8:  BTFSS  03.2
03E9:  GOTO   3EC
03EA:  BCF    08.7
03EB:  GOTO   3ED
03EC:  BSF    08.7
03ED:  BSF    03.5
03EE:  BCF    08.7
03EF:  BCF    03.5
03F0:  RETURN
.................... }
.................... 
.................... void LCD_SendCommand(unsigned char command) {
....................    output_low(LCD_RS_PIN);
*
0402:  BSF    03.5
0403:  BCF    08.1
0404:  BCF    03.5
0405:  BCF    08.1
....................    LCD_Send4Bit(command>>4);
0406:  SWAPF  2F,W
0407:  MOVWF  30
0408:  MOVLW  0F
0409:  ANDWF  30,F
040A:  MOVF   30,W
040B:  MOVWF  31
040C:  CALL   3BF
....................    LCD_Enable();
040D:  CALL   3F1
....................    LCD_Send4Bit(command);
040E:  MOVF   2F,W
040F:  MOVWF  31
0410:  CALL   3BF
....................    LCD_Enable();
0411:  CALL   3F1
.................... }
.................... 
.................... void LCD_Clear() {
....................    LCD_SendCommand(0x01);
*
0400:  MOVLW  01
0401:  MOVWF  2F
....................    delay_ms(10);
*
0412:  MOVLW  0A
0413:  MOVWF  34
0414:  CALL   01A
0415:  RETURN
.................... }
.................... 
.................... 
.................... void main() {
0416:  MOVF   03,W
0417:  ANDLW  1F
0418:  MOVWF  03
0419:  CLRF   20
041A:  CLRF   2C
041B:  CLRF   2B
041C:  BSF    03.5
041D:  BSF    1F.0
041E:  BSF    1F.1
041F:  BSF    1F.2
0420:  BCF    1F.3
0421:  MOVLW  07
0422:  MOVWF  1C
0423:  BCF    03.7
....................    lcd_init();
0424:  BCF    03.5
0425:  GOTO   0EB
....................    set_tris_d(0x00);
0426:  MOVLW  00
0427:  BSF    03.5
0428:  MOVWF  08
....................    lcd_putc("Pass: ");
0429:  MOVLW  10
042A:  BCF    03.5
042B:  BSF    03.6
042C:  MOVWF  0D
042D:  MOVLW  00
042E:  MOVWF  0F
042F:  BCF    03.6
0430:  CALL   16F
....................    char key = ' ';
....................    int result;
0431:  MOVLW  20
0432:  MOVWF  2D
....................    while (TRUE)
....................    {
....................       key = quet_phim(6);
0433:  MOVLW  06
0434:  MOVWF  2F
0435:  GOTO   1C5
0436:  MOVF   78,W
0437:  MOVWF  2D
....................       if (key=='*') {
0438:  MOVF   2D,W
0439:  SUBLW  2A
043A:  BTFSS  03.2
043B:  GOTO   465
....................          result = checkpass();
043C:  GOTO   38F
043D:  MOVF   78,W
043E:  MOVWF  2E
....................          if (result) {
043F:  MOVF   2E,F
0440:  BTFSC  03.2
0441:  GOTO   454
....................             LCD_Clear();
0442:  CALL   400
....................             lcd_putc("RIGHT");
0443:  MOVLW  14
0444:  BSF    03.6
0445:  MOVWF  0D
0446:  MOVLW  00
0447:  MOVWF  0F
0448:  BCF    03.6
0449:  CALL   16F
....................             delay_ms(1000);
044A:  MOVLW  04
044B:  MOVWF  2F
044C:  MOVLW  FA
044D:  MOVWF  34
044E:  CALL   01A
044F:  DECFSZ 2F,F
0450:  GOTO   44C
....................             reset_cpu();
0451:  CLRF   0A
0452:  GOTO   000
....................          }else {
0453:  GOTO   465
....................             LCD_Clear();
0454:  CALL   400
....................             lcd_putc("WRONG");
0455:  MOVLW  17
0456:  BSF    03.6
0457:  MOVWF  0D
0458:  MOVLW  00
0459:  MOVWF  0F
045A:  BCF    03.6
045B:  CALL   16F
....................             delay_ms(1000);
045C:  MOVLW  04
045D:  MOVWF  2F
045E:  MOVLW  FA
045F:  MOVWF  34
0460:  CALL   01A
0461:  DECFSZ 2F,F
0462:  GOTO   45E
....................             reset_cpu();
0463:  CLRF   0A
0464:  GOTO   000
....................          }
....................       }
0465:  GOTO   433
....................    }
.................... }
0466:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
