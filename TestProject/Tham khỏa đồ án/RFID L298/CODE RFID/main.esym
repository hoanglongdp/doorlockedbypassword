D G "__PCM__" 0 589 ""5.092""
D G "__DEVICE__" 0 589 "887"
D G "__DATE__" 0 589 ""14-Mar-21""
D G "__TIME__" 0 589 ""13:06:25""
D G "_UNICODE" 0 589 ""?""
D G "__EVAL" 0 589 ""?"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 39 ""
v L "value" 2 39 "int8" `55 
f B "set_tris_a" 2 39 "void(int8 value)" `54 
f N "set_tris_b" 2 40 ""
v L "value" 2 40 "int8" `57 
f B "set_tris_b" 2 40 "void(int8 value)" `56 
f N "set_tris_c" 2 41 ""
v L "value" 2 41 "int8" `59 
f B "set_tris_c" 2 41 "void(int8 value)" `58 
f N "set_tris_d" 2 42 ""
v L "value" 2 42 "int8" `61 
f B "set_tris_d" 2 42 "void(int8 value)" `60 
f N "set_tris_e" 2 43 ""
v L "value" 2 43 "int8" `63 
f B "set_tris_e" 2 43 "void(int8 value)" `62 
f N "get_tris_a" 2 44 ""
f B "get_tris_a" 2 44 "int8()" `64 
f N "get_tris_b" 2 45 ""
f B "get_tris_b" 2 45 "int8()" `65 
f N "get_tris_c" 2 46 ""
f B "get_tris_c" 2 46 "int8()" `66 
f N "get_tris_d" 2 47 ""
f B "get_tris_d" 2 47 "int8()" `67 
f N "get_tris_e" 2 48 ""
f B "get_tris_e" 2 48 "int8()" `68 
f N "output_a" 2 49 ""
v L "value" 2 49 "int8" `70 
f B "output_a" 2 49 "void(int8 value)" `69 
f N "output_b" 2 50 ""
v L "value" 2 50 "int8" `72 
f B "output_b" 2 50 "void(int8 value)" `71 
f N "output_c" 2 51 ""
v L "value" 2 51 "int8" `74 
f B "output_c" 2 51 "void(int8 value)" `73 
f N "output_d" 2 52 ""
v L "value" 2 52 "int8" `76 
f B "output_d" 2 52 "void(int8 value)" `75 
f N "output_e" 2 53 ""
v L "value" 2 53 "int8" `78 
f B "output_e" 2 53 "void(int8 value)" `77 
f N "input_a" 2 54 ""
f B "input_a" 2 54 "int8()" `79 
f N "input_b" 2 55 ""
f B "input_b" 2 55 "int8()" `80 
f N "input_c" 2 56 ""
f B "input_c" 2 56 "int8()" `81 
f N "input_d" 2 57 ""
f B "input_d" 2 57 "int8()" `82 
f N "input_e" 2 58 ""
f B "input_e" 2 58 "int8()" `83 
f N "input_change_a" 2 59 ""
f B "input_change_a" 2 59 "int8()" `84 
f N "input_change_b" 2 60 ""
f B "input_change_b" 2 60 "int8()" `85 
f N "input_change_c" 2 61 ""
f B "input_change_c" 2 61 "int8()" `86 
f N "input_change_d" 2 62 ""
f B "input_change_d" 2 62 "int8()" `87 
f N "input_change_e" 2 63 ""
f B "input_change_e" 2 63 "int8()" `88 
f N "port_b_pullups" 2 64 ""
v L "upmask" 2 64 "int8" `90 
f B "port_b_pullups" 2 64 "void(int8 upmask)" `89 
f N "input" 2 65 ""
v L "pin" 2 65 "int16" `92 
f B "input" 2 65 "int8(int16 pin)" `91 
f N "input_state" 2 66 ""
v L "pin" 2 66 "int16" `94 
f B "input_state" 2 66 "int8(int16 pin)" `93 
f N "output_low" 2 67 ""
v L "pin" 2 67 "int16" `96 
f B "output_low" 2 67 "void(int16 pin)" `95 
f N "output_high" 2 68 ""
v L "pin" 2 68 "int16" `98 
f B "output_high" 2 68 "void(int16 pin)" `97 
f N "output_toggle" 2 69 ""
v L "pin" 2 69 "int16" `100 
f B "output_toggle" 2 69 "void(int16 pin)" `99 
f N "output_bit" 2 70 ""
v L "pin" 2 70 "int16" `102 
v L "level" 2 70 "int8" `103 
f B "output_bit" 2 70 "void(int16 pin,int8 level)" `101 
f N "output_float" 2 71 ""
v L "pin" 2 71 "int16" `105 
f B "output_float" 2 71 "void(int16 pin)" `104 
f N "output_drive" 2 72 ""
v L "pin" 2 72 "int16" `107 
f B "output_drive" 2 72 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 76 "40"
d G "PIN_A1" 2 77 "41"
d G "PIN_A2" 2 78 "42"
d G "PIN_A3" 2 79 "43"
d G "PIN_A4" 2 80 "44"
d G "PIN_A5" 2 81 "45"
d G "PIN_A6" 2 82 "46"
d G "PIN_A7" 2 83 "47"
d G "PIN_B0" 2 85 "48"
d G "PIN_B1" 2 86 "49"
d G "PIN_B2" 2 87 "50"
d G "PIN_B3" 2 88 "51"
d G "PIN_B4" 2 89 "52"
d G "PIN_B5" 2 90 "53"
d G "PIN_B6" 2 91 "54"
d G "PIN_B7" 2 92 "55"
d G "PIN_C0" 2 94 "56"
d G "PIN_C1" 2 95 "57"
d G "PIN_C2" 2 96 "58"
d G "PIN_C3" 2 97 "59"
d G "PIN_C4" 2 98 "60"
d G "PIN_C5" 2 99 "61"
d G "PIN_C6" 2 100 "62"
d G "PIN_C7" 2 101 "63"
d G "PIN_D0" 2 103 "64"
d G "PIN_D1" 2 104 "65"
d G "PIN_D2" 2 105 "66"
d G "PIN_D3" 2 106 "67"
d G "PIN_D4" 2 107 "68"
d G "PIN_D5" 2 108 "69"
d G "PIN_D6" 2 109 "70"
d G "PIN_D7" 2 110 "71"
d G "PIN_E0" 2 112 "72"
d G "PIN_E1" 2 113 "73"
d G "PIN_E2" 2 114 "74"
d G "PIN_E3" 2 115 "75"
d G "FALSE" 2 118 "0"
d G "TRUE" 2 119 "1"
d G "BYTE" 2 121 "int8"
d G "BOOLEAN" 2 122 "int1"
d G "getc" 2 124 "getch"
d G "fgetc" 2 125 "getch"
d G "getchar" 2 126 "getch"
d G "putc" 2 127 "putchar"
d G "fputc" 2 128 "putchar"
d G "fgets" 2 129 "gets"
d G "fputs" 2 130 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 135 ""
f B "restart_cause" 2 135 "int8()" `108 
f N "reset_cpu" 2 136 ""
f B "reset_cpu" 2 136 "void()" `109 
f N "sleep" 2 137 ""
f B "sleep" 2 137 "void()" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 139 "3"
d G "WDT_TIMEOUT" 2 140 "11"
d G "MCLR_FROM_SLEEP" 2 141 "19"
d G "MCLR_FROM_RUN" 2 142 "27"
d G "NORMAL_POWER_UP" 2 143 "25"
d G "BROWNOUT_RESTART" 2 144 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 151 ""
v L "mode" 2 151 "int8" `112 
f B "setup_timer_0" 2 151 "void(int8 mode)" `111 
f N "set_timer0" 2 152 ""
v L "value" 2 152 "int8" `114 
f B "set_timer0" 2 152 "void(int8 value)" `113 
f N "get_timer0" 2 153 ""
f B "get_timer0" 2 153 "int8()" `115 
f N "setup_counters" 2 154 ""
v L "mode" 2 154 "int8" `117 
v L "prescaler" 2 154 "int8" `118 
f B "setup_counters" 2 154 "void(int8 mode,int8 prescaler)" `116 
f N "set_rtcc" 2 155 ""
v L "value" 2 155 "int8" `120 
f B "set_rtcc" 2 155 "void(int8 value)" `119 
f N "get_rtcc" 2 156 ""
f B "get_rtcc" 2 156 "int8()" `121  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 158 "0"
d G "T0_EXT_L_TO_H" 2 159 "32"
d G "T0_EXT_H_TO_L" 2 160 "48"
d G "T0_DIV_1" 2 162 "8"
d G "T0_DIV_2" 2 163 "0"
d G "T0_DIV_4" 2 164 "1"
d G "T0_DIV_8" 2 165 "2"
d G "T0_DIV_16" 2 166 "3"
d G "T0_DIV_32" 2 167 "4"
d G "T0_DIV_64" 2 168 "5"
d G "T0_DIV_128" 2 169 "6"
d G "T0_DIV_256" 2 170 "7"
d G "T0_8_BIT" 2 173 "0"
d G "RTCC_INTERNAL" 2 177 "0"
d G "RTCC_EXT_L_TO_H" 2 178 "32"
d G "RTCC_EXT_H_TO_L" 2 179 "48"
d G "RTCC_DIV_1" 2 180 "8"
d G "RTCC_DIV_2" 2 181 "0"
d G "RTCC_DIV_4" 2 182 "1"
d G "RTCC_DIV_8" 2 183 "2"
d G "RTCC_DIV_16" 2 184 "3"
d G "RTCC_DIV_32" 2 185 "4"
d G "RTCC_DIV_64" 2 186 "5"
d G "RTCC_DIV_128" 2 187 "6"
d G "RTCC_DIV_256" 2 188 "7"
d G "RTCC_8_BIT" 2 189 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 200 ""
v L "mode" 2 200 "int16" `123 
f B "setup_wdt" 2 200 "void(int16 mode)" `122 
f N "restart_wdt" 2 201 ""
f B "restart_wdt" 2 201 "void()" `124  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 204 "8"
d G "WDT_36MS" 2 205 "9"
d G "WDT_72MS" 2 206 "10"
d G "WDT_144MS" 2 207 "11"
d G "WDT_288MS" 2 208 "12"
d G "WDT_576MS" 2 209 "13"
d G "WDT_1152MS" 2 210 "14"
d G "WDT_2304MS" 2 211 "15"
d G "WDT_ON" 2 216 "0x4000"
d G "WDT_OFF" 2 217 "0"
d G "WDT_DIV_16" 2 218 "0x100"
d G "WDT_DIV_8" 2 219 "0x300"
d G "WDT_DIV_4" 2 220 "0x500"
d G "WDT_DIV_2" 2 221 "0x700"
d G "WDT_TIMES_1" 2 222 "0x900" "Default"
d G "WDT_TIMES_2" 2 223 "0xB00"
d G "WDT_TIMES_4" 2 224 "0xD00"
d G "WDT_TIMES_8" 2 225 "0xF00"
d G "WDT_TIMES_16" 2 226 "0x1100"
d G "WDT_TIMES_32" 2 227 "0x1300"
d G "WDT_TIMES_64" 2 228 "0x1500"
d G "WDT_TIMES_128" 2 229 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 234 ""
v L "mode" 2 234 "int16" `126 
f B "setup_timer_1" 2 234 "void(int16 mode)" `125 
f N "get_timer1" 2 235 ""
f B "get_timer1" 2 235 "int16()" `127 
f N "set_timer1" 2 236 ""
v L "value" 2 236 "int16" `129 
f B "set_timer1" 2 236 "void(int16 value)" `128  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 239 "0"
d G "T1_INTERNAL" 2 240 "5"
d G "T1_EXTERNAL" 2 241 "7"
d G "T1_EXTERNAL_SYNC" 2 242 "3"
d G "T1_CLK_OUT" 2 244 "8"
d G "T1_DIV_BY_1" 2 246 "0"
d G "T1_DIV_BY_2" 2 247 "0x10"
d G "T1_DIV_BY_4" 2 248 "0x20"
d G "T1_DIV_BY_8" 2 249 "0x30"
d G "T1_GATE" 2 251 "0x40"
d G "T1_GATE_INVERTED" 2 252 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 257 ""
v L "mode" 2 257 "int8" `131 
v L "period" 2 257 "int8" `132 
v L "postscale" 2 257 "int8" `133 
f B "setup_timer_2" 2 257 "void(int8 mode,int8 period,int8 postscale)" `130 
f N "get_timer2" 2 258 ""
f B "get_timer2" 2 258 "int8()" `134 
f N "set_timer2" 2 259 ""
v L "value" 2 259 "int8" `136 
f B "set_timer2" 2 259 "void(int8 value)" `135  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 261 "0"
d G "T2_DIV_BY_1" 2 262 "4"
d G "T2_DIV_BY_4" 2 263 "5"
d G "T2_DIV_BY_16" 2 264 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 270 ""
v L "mode" 2 270 "int32" `138 
f B "setup_ccp1" 2 270 "void(int32 mode)" `137 
f N "setup_ccp1" 2 271 ""
v L "mode" 2 271 "int32" `140 
v L "pwm" 2 271 "int8" `141 
f B "setup_ccp1" 2 271 "void(int32 mode,int8 pwm)" `139 
f N "set_pwm1_duty" 2 272 ""
v L "value" 2 272 "int8" `143 
f B "set_pwm1_duty" 2 272 "void(int8 value)" `142 
f N "set_pwm1_duty" 2 273 ""
v L "value" 2 273 "int16" `145 
f B "set_pwm1_duty" 2 273 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 275 "0"
d G "CCP_CAPTURE_FE" 2 276 "0x04"
d G "CCP_CAPTURE_RE" 2 277 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 278 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 279 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 280 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 281 "0x09"
d G "CCP_COMPARE_INT" 2 282 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 283 "0x0B"
d G "CCP_PWM" 2 284 "0x0C"
d G "CCP_PWM_PLUS_1" 2 285 "0x1c"
d G "CCP_PWM_PLUS_2" 2 286 "0x2c"
d G "CCP_PWM_PLUS_3" 2 287 "0x3c"
d G "CCP_PWM_H_H" 2 294 "0x0c"
d G "CCP_PWM_H_L" 2 295 "0x0d"
d G "CCP_PWM_L_H" 2 296 "0x0e"
d G "CCP_PWM_L_L" 2 297 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 299 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 300 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 301 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 303 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 304 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 305 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 306 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 307 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 308 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 309 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 311 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 312 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 313 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 315 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 316 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 317 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 319 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 321 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 322 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 323 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 324 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 325 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 328 ""
v L "mode" 2 328 "int32" `150 
f B "setup_ccp2" 2 328 "void(int32 mode)" `149 
f N "setup_ccp2" 2 329 ""
v L "mode" 2 329 "int32" `152 
v L "pwm" 2 329 "int8" `153 
f B "setup_ccp2" 2 329 "void(int32 mode,int8 pwm)" `151 
f N "set_pwm2_duty" 2 330 ""
v L "value" 2 330 "int8" `155 
f B "set_pwm2_duty" 2 330 "void(int8 value)" `154 
f N "set_pwm2_duty" 2 331 ""
v L "value" 2 331 "int16" `157 
f B "set_pwm2_duty" 2 331 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 339 ""
v L "mode" 2 339 "int32" `162 
f B "setup_spi" 2 339 "void(int32 mode)" `161 
f N "spi_write" 2 340 ""
v L "value" 2 340 "int8" `164 
f B "spi_write" 2 340 "void(int8 value)" `163 
f N "spi_write" 2 341 ""
v L "wait" 2 341 "int8" `166 
v L "value" 2 341 "int8" `167 
f B "spi_write" 2 341 "void(int8 wait,int8 value)" `165 
f N "spi_read" 2 342 ""
f B "spi_read" 2 342 "int8()" `168 
f N "spi_read" 2 343 ""
v L "value" 2 343 "int8" `170 
f B "spi_read" 2 343 "int8(int8 value)" `169 
f N "spi_data_is_in" 2 344 ""
f B "spi_data_is_in" 2 344 "int8()" `171  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 346 "0x00"
d G "SPI_MASTER" 2 347 "0x20"
d G "SPI_SLAVE" 2 348 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 349 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 350 "0x00"
d G "SPI_CLK_DIV_4" 2 351 "0x00"
d G "SPI_CLK_DIV_16" 2 352 "0x01"
d G "SPI_CLK_DIV_64" 2 353 "0x02"
d G "SPI_CLK_T2" 2 354 "0x03"
d G "SPI_SS_DISABLED" 2 355 "0x01"
d G "SPI_XMIT_L_TO_H" 2 357 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 358 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 360 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 361 "0x8000"
d G "SPI_L_TO_H" 2 364 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 365 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 369 ""
v L "baud" 2 369 "int32" `173 
f B "setup_uart" 2 369 "void(int32 baud)" `172 
f N "setup_uart" 2 370 ""
v L "baud" 2 370 "int32" `175 
v L "stream" 2 370 "int8" `176 
f B "setup_uart" 2 370 "void(int32 baud,int8 stream)" `174 
f N "setup_uart" 2 371 ""
v L "baud" 2 371 "int32" `178 
v L "stream" 2 371 "int8" `179 
v L "clock" 2 371 "int32" `180 
f B "setup_uart" 2 371 "void(int32 baud,int8 stream,int32 clock)" `177 
f N "set_uart_speed" 2 372 ""
v L "baud" 2 372 "int32" `182 
f B "set_uart_speed" 2 372 "void(int32 baud)" `181 
f N "set_uart_speed" 2 373 ""
v L "baud" 2 373 "int32" `184 
v L "stream" 2 373 "int8" `185 
f B "set_uart_speed" 2 373 "void(int32 baud,int8 stream)" `183 
f N "set_uart_speed" 2 374 ""
v L "baud" 2 374 "int32" `187 
v L "stream" 2 374 "int8" `188 
v L "clock" 2 374 "int32" `189 
f B "set_uart_speed" 2 374 "void(int32 baud,int8 stream,int32 clock)" `186  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 378 "2"
d G "UART_DATA" 2 379 "4"
d G "UART_AUTODETECT" 2 380 "8"
d G "UART_AUTODETECT_NOWAIT" 2 381 "9"
d G "UART_WAKEUP_ON_RDA" 2 382 "10"
d G "UART_SEND_BREAK" 2 383 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 388 ""
v L "mode" 2 388 "int32" `191 
f B "setup_comparator" 2 388 "void(int32 mode)" `190  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 392 "0x00"
d G "NC_NC" 2 393 "0x00"
d G "CP1_A0_A3" 2 396 "0x00090080"
d G "CP1_A1_A3" 2 397 "0x000A0081"
d G "CP1_B3_A3" 2 398 "0x00880082"
d G "CP1_B1_A3" 2 399 "0x00280083"
d G "CP1_A0_VREF" 2 400 "0x00010084"
d G "CP1_A1_VREF" 2 401 "0x00020085"
d G "CP1_B3_VREF" 2 402 "0x00800086"
d G "CP1_B1_VREF" 2 403 "0x00200087"
d G "CP1_OUT_ON_A4" 2 405 "0x00000020"
d G "CP1_INVERT" 2 406 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 2 407 "0x20000000"
d G "CP2_A0_A2" 2 410 "0x00058000"
d G "CP2_A1_A2" 2 411 "0x00068100"
d G "CP2_B3_A2" 2 412 "0x00848200"
d G "CP2_B1_A2" 2 413 "0x00248300"
d G "CP2_A0_VREF" 2 414 "0x00018400"
d G "CP2_A1_VREF" 2 415 "0x00028500"
d G "CP2_B3_VREF" 2 416 "0x00808600"
d G "CP2_B1_VREF" 2 417 "0x00208700"
d G "CP2_OUT_ON_A5" 2 419 "0x00002000"
d G "CP2_INVERT" 2 420 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 2 421 "0x10000000"
d G "CP2_T1_SYNC" 2 424 "0x01000000"
d G "CP2_T1_GATE" 2 425 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 433 ""
v L "mode" 2 433 "int8" `195 
f B "setup_vref" 2 433 "void(int8 mode)" `194  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 435 "0xa0"
d G "VREF_HIGH" 2 436 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_oscillator" 2 442 ""
v L "mode" 2 442 "int8" `197 
f B "setup_oscillator" 2 442 "int8(int8 mode)" `196 
f N "setup_oscillator" 2 443 ""
v L "mode" 2 443 "int8" `199 
v L "tune" 2 443 "sint8" `200 
f B "setup_oscillator" 2 443 "int8(int8 mode,sint8 tune)" `198  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 445 "1"
d G "OSC_125KHZ" 2 446 "0x11"
d G "OSC_250KHZ" 2 447 "0x21"
d G "OSC_500KHZ" 2 448 "0x31"
d G "OSC_1MHZ" 2 449 "0x41"
d G "OSC_2MHZ" 2 450 "0x51"
d G "OSC_4MHZ" 2 451 "0x61"
d G "OSC_8MHZ" 2 452 "0x71"
d G "OSC_INTRC" 2 453 "1"
d G "OSC_NORMAL" 2 454 "0"
d G "OSC_STATE_STABLE" 2 458 "4"
d G "OSC_31KHZ_STABLE" 2 459 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 466 ""
v L "mode" 2 466 "int16" `202 
f B "setup_adc" 2 466 "void(int16 mode)" `201 
f N "read_adc" 2 467 ""
f B "read_adc" 2 467 "int8()" `203 
f N "read_adc" 2 468 ""
v L "mode" 2 468 "int8" `205 
f B "read_adc" 2 468 "int8(int8 mode)" `204 
f N "read_adc" 2 469 ""
f G "read_adc" 2 469 "int16()" `206 
f N "read_adc" 2 470 ""
v L "mode" 2 470 "int8" `207 
f G "read_adc" 2 470 "int16(int8 mode,int32 pins)" `206 
f N "adc_done" 2 471 ""
f B "adc_done" 2 471 "int8(int8 mode,int32 pins)" `206  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 473 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 474 "0x100"
d G "ADC_CLOCK_DIV_8" 2 475 "0x40"
d G "ADC_CLOCK_DIV_32" 2 476 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 477 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 480 ""
v L "pins" 2 480 "int32" `208 
f B "setup_adc_ports" 2 480 "void(int32 pins)" `207 
f N "setup_adc_ports" 2 481 ""
v L "pins" 2 481 "int32" `210 
v L "reference" 2 481 "int32" `211 
f B "setup_adc_ports" 2 481 "void(int32 pins,int32 reference)" `209 
f N "set_analog_pins" 2 482 ""
v L "pins" 2 482 "int32" `213 
f B "set_analog_pins" 2 482 "void(int32 pins)" `212 
f N "set_analog_pins" 2 483 ""
v L "pins" 2 483 "int32" `215 
v L "reference" 2 483 "int32" `216 
f B "set_analog_pins" 2 483 "void(int32 pins,int32 reference)" `214 
f N "set_adc_channel" 2 484 ""
v L "channel" 2 484 "int8" `218 
f B "set_adc_channel" 2 484 "void(int8 channel)" `217  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 488 "1" "| A0"
d G "sAN1" 2 489 "2" "| A1"
d G "sAN2" 2 490 "4" "| A2"
d G "sAN3" 2 491 "8" "| A3"
d G "sAN4" 2 492 "16" "| A5"
d G "sAN5" 2 493 "32" "| E0"
d G "sAN6" 2 494 "64" "| E1"
d G "sAN7" 2 495 "128" "| E2"
d G "sAN8" 2 496 "0x10000" "| B2"
d G "sAN9" 2 497 "0x20000" "| B3"
d G "sAN10" 2 498 "0x40000" "| B1"
d G "sAN11" 2 499 "0x80000" "| B4"
d G "sAN12" 2 500 "0x100000" "| B0"
d G "sAN13" 2 501 "0x200000" "| B5"
d G "NO_ANALOGS" 2 502 "0" "None"
d G "ALL_ANALOG" 2 503 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 2 506 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 507 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 2 508 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 2 509 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 512 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 513 "1"
d G "ADC_READ_ONLY" 2 514 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 520 ""
v L "x" 2 520 "sint8" `220 
f B "abs" 2 520 "sint8(sint8 x)" `219 
f N "abs" 2 521 ""
v L "x" 2 521 "sint16" `222 
f B "abs" 2 521 "sint16(sint16 x)" `221 
f N "abs" 2 522 ""
v L "x" 2 522 "sint32" `224 
f B "abs" 2 522 "sint32(sint32 x)" `223 
f N "abs" 2 523 ""
v L "x" 2 523 "float" `226 
f B "abs" 2 523 "float(float x)" `225 
f N "_mul" 2 524 ""
v L "??65535" 2 524 "int8" `228 
v L "??65535" 2 524 "int8" `229 
f B "_mul" 2 524 "int16(int8 ,int8 )" `227 
f N "_mul" 2 525 ""
v L "??65535" 2 525 "sint8" `231 
v L "??65535" 2 525 "sint8" `232 
f B "_mul" 2 525 "sint16(sint8 ,sint8 )" `230 
f N "_mul" 2 526 ""
v L "??65535" 2 526 "int16" `234 
v L "??65535" 2 526 "int16" `235 
f B "_mul" 2 526 "int32(int16 ,int16 )" `233 
f N "_mul" 2 527 ""
v L "??65535" 2 527 "sint16" `237 
v L "??65535" 2 527 "sint16" `238 
f B "_mul" 2 527 "sint32(sint16 ,sint16 )" `236  "Memory Manipulation Prototypes:"
f N "read_bank" 2 530 ""
v L "bank" 2 530 "int8" `240 
v L "offset" 2 530 "int8" `241 
f B "read_bank" 2 530 "int8(int8 bank,int8 offset)" `239 
f N "write_bank" 2 531 ""
v L "bank" 2 531 "int8" `243 
v L "offset" 2 531 "int8" `244 
v L "value" 2 531 "int8" `245 
f B "write_bank" 2 531 "void(int8 bank,int8 offset,int8 value)" `242 
f N "strcpy" 2 532 ""
v L "dest" 2 532 "*int8" `247 
v L "src" 2 532 "*int8" `248 
f B "strcpy" 2 532 "void(*int8 dest,*int8 src)" `246 
f N "memset" 2 533 ""
v L "destination" 2 533 "*int8" `250 
v L "value" 2 533 "int8" `251 
v L "num" 2 533 "int16" `252 
f B "memset" 2 533 "void(*int8 destination,int8 value,int16 num)" `249 
f N "memcpy" 2 534 ""
v L "destination" 2 534 "*int8" `254 
v L "source" 2 534 "*int8" `255 
v L "num" 2 534 "int16" `256 
f B "memcpy" 2 534 "void(*int8 destination,*int8 source,int16 num)" `253  "String Prototypes:"
f N "toupper" 2 537 ""
v L "cvalue" 2 537 "int8" `258 
f B "toupper" 2 537 "int8(int8 cvalue)" `257 
f N "tolower" 2 538 ""
v L "cvalue" 2 538 "int8" `260 
f B "tolower" 2 538 "int8(int8 cvalue)" `259 
f N "sprintf" 2 539 ""
v L "string" 2 539 "*int8" `262 
v L "cstring" 2 539 "*int8" `263 
f B "sprintf" 2 539 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `261  "Data Manipulators Prototypes:"
f N "shift_left" 2 542 ""
v L "address" 2 542 "*int8" `266 
v L "bytes" 2 542 "int8" `267 
v L "value" 2 542 "int8" `268 
f B "shift_left" 2 542 "int8(*int8 address,int8 bytes,int8 value)" `265 
f N "shift_right" 2 543 ""
v L "address" 2 543 "*int8" `270 
v L "bytes" 2 543 "int8" `271 
v L "value" 2 543 "int8" `272 
f B "shift_right" 2 543 "int8(*int8 address,int8 bytes,int8 value)" `269 
f N "rotate_left" 2 544 ""
v L "address" 2 544 "*int8" `274 
v L "bytes" 2 544 "int8" `275 
f B "rotate_left" 2 544 "void(*int8 address,int8 bytes)" `273 
f N "rotate_right" 2 545 ""
v L "address" 2 545 "*int8" `277 
v L "bytes" 2 545 "int8" `278 
f B "rotate_right" 2 545 "void(*int8 address,int8 bytes)" `276 
f N "swap" 2 546 ""
v L "value" 2 546 "int8" `280 
f B "swap" 2 546 "void(int8 value)" `279 
f N "make8" 2 547 ""
v L "var" 2 547 "int16" `282 
v L "offset" 2 547 "int8" `283 
f B "make8" 2 547 "int8(int16 var,int8 offset)" `281 
f N "make8" 2 548 ""
v L "var" 2 548 "int32" `285 
v L "offset" 2 548 "int8" `286 
f B "make8" 2 548 "int8(int32 var,int8 offset)" `284 
f N "make16" 2 549 ""
v L "varhigh" 2 549 "int8" `288 
v L "varlow" 2 549 "int8" `289 
f B "make16" 2 549 "int16(int8 varhigh,int8 varlow)" `287 
f N "make32" 2 550 ""
v L "var1" 2 550 "int16" `291 
f B "make32" 2 550 "int32(int16 var1)" `290 
f N "make32" 2 551 ""
v L "var1" 2 551 "int16" `293 
v L "var2" 2 551 "int16" `294 
f B "make32" 2 551 "int32(int16 var1,int16 var2)" `292 
f N "make32" 2 552 ""
v L "var1" 2 552 "int16" `296 
v L "var2" 2 552 "int8" `297 
f B "make32" 2 552 "int32(int16 var1,int8 var2)" `295 
f N "make32" 2 553 ""
v L "var1" 2 553 "int16" `299 
v L "var2" 2 553 "int8" `300 
v L "var3" 2 553 "int8" `301 
f B "make32" 2 553 "int32(int16 var1,int8 var2,int8 var3)" `298 
f N "make32" 2 554 ""
v L "var1" 2 554 "int8" `303 
f B "make32" 2 554 "int32(int8 var1)" `302 
f N "make32" 2 555 ""
v L "var1" 2 555 "int8" `305 
v L "var2" 2 555 "int8" `306 
f B "make32" 2 555 "int32(int8 var1,int8 var2)" `304 
f N "make32" 2 556 ""
v L "var1" 2 556 "int8" `308 
v L "var2" 2 556 "int8" `309 
v L "var3" 2 556 "int8" `310 
f B "make32" 2 556 "int32(int8 var1,int8 var2,int8 var3)" `307 
f N "make32" 2 557 ""
v L "var1" 2 557 "int8" `312 
v L "var2" 2 557 "int8" `313 
v L "var3" 2 557 "int8" `314 
v L "var4" 2 557 "int8" `315 
f B "make32" 2 557 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `311 
f N "make32" 2 558 ""
v L "var1" 2 558 "int8" `317 
v L "var2" 2 558 "int16" `318 
f B "make32" 2 558 "int32(int8 var1,int16 var2)" `316 
f N "make32" 2 559 ""
v L "var1" 2 559 "int8" `320 
v L "var2" 2 559 "int16" `321 
v L "var3" 2 559 "int8" `322 
f B "make32" 2 559 "int32(int8 var1,int16 var2,int8 var3)" `319 
f N "make32" 2 560 ""
v L "var1" 2 560 "int8" `324 
v L "var2" 2 560 "int8" `325 
v L "var3" 2 560 "int16" `326 
f B "make32" 2 560 "int32(int8 var1,int8 var2,int16 var3)" `323 
f N "bit_set" 2 561 ""
v L "var" 2 561 "int8" `328 
v L "bit" 2 561 "int8" `329 
f B "bit_set" 2 561 "void(int8 var,int8 bit)" `327 
f N "bit_set" 2 562 ""
v L "var" 2 562 "int16" `331 
v L "bit" 2 562 "int8" `332 
f B "bit_set" 2 562 "void(int16 var,int8 bit)" `330 
f N "bit_set" 2 563 ""
v L "var" 2 563 "int32" `334 
v L "bit" 2 563 "int8" `335 
f B "bit_set" 2 563 "void(int32 var,int8 bit)" `333 
f N "bit_clear" 2 564 ""
v L "var" 2 564 "int8" `337 
v L "bit" 2 564 "int8" `338 
f B "bit_clear" 2 564 "void(int8 var,int8 bit)" `336 
f N "bit_clear" 2 565 ""
v L "var" 2 565 "int16" `340 
v L "bit" 2 565 "int8" `341 
f B "bit_clear" 2 565 "void(int16 var,int8 bit)" `339 
f N "bit_clear" 2 566 ""
v L "var" 2 566 "int32" `343 
v L "bit" 2 566 "int8" `344 
f B "bit_clear" 2 566 "void(int32 var,int8 bit)" `342 
f N "bit_test" 2 567 ""
v L "var" 2 567 "int8" `346 
v L "bit" 2 567 "int8" `347 
f B "bit_test" 2 567 "int8(int8 var,int8 bit)" `345 
f N "bit_test" 2 568 ""
v L "var" 2 568 "int16" `349 
v L "bit" 2 568 "int8" `350 
f B "bit_test" 2 568 "int8(int16 var,int8 bit)" `348 
f N "bit_test" 2 569 ""
v L "var" 2 569 "int32" `352 
v L "bit" 2 569 "int8" `353 
f B "bit_test" 2 569 "int8(int32 var,int8 bit)" `351  "#use delay() Prototypes:"
f N "delay_cycles" 2 572 ""
v L "count" 2 572 "int8" `355 
f B "delay_cycles" 2 572 "void(int8 count)" `354 
f N "delay_ms" 2 573 ""
v L "time" 2 573 "int16" `357 
f B "delay_ms" 2 573 "void(int16 time)" `356 
f N "delay_us" 2 574 ""
v L "time" 2 574 "int16" `359 
f B "delay_us" 2 574 "void(int16 time)" `358  "#use rs232() Prototypes:"
f N "putchar" 2 577 ""
v L "cdata" 2 577 "int8" `361 
f B "putchar" 2 577 "void(int8 cdata)" `360 
f N "putchar" 2 578 ""
v L "cdata" 2 578 "int8" `363 
v L "stream" 2 578 "int8" `364 
f B "putchar" 2 578 "void(int8 cdata,int8 stream)" `362 
f N "puts" 2 579 ""
v L "string" 2 579 "*int8" `366 
f B "puts" 2 579 "void(*int8 string)" `365 
f N "puts" 2 580 ""
v L "string" 2 580 "*int8" `368 
v L "stream" 2 580 "int8" `369 
f B "puts" 2 580 "void(*int8 string,int8 stream)" `367 
f N "getch" 2 581 ""
f B "getch" 2 581 "int8()" `370 
f N "getch" 2 582 ""
v L "stream" 2 582 "int8" `372 
f B "getch" 2 582 "int8(int8 stream)" `371 
f N "gets" 2 583 ""
v L "string" 2 583 "*int8" `374 
f B "gets" 2 583 "void(*int8 string)" `373 
f N "gets" 2 584 ""
v L "string" 2 584 "*int8" `376 
v L "stream" 2 584 "int8" `377 
f B "gets" 2 584 "void(*int8 string,int8 stream)" `375 
f N "kbhit" 2 585 ""
f B "kbhit" 2 585 "int8()" `378 
f N "kbhit" 2 586 ""
v L "stream" 2 586 "int8" `380 
f B "kbhit" 2 586 "int8(int8 stream)" `379 
f N "printf" 2 587 ""
v L "string" 2 587 "*int8" `382 
f B "printf" 2 587 "void(*int8 string,*int8 _VA_LIST)" `381 
f N "fprintf" 2 588 ""
v L "stream" 2 588 "int8" `385 
v L "string" 2 588 "*int8" `386 
f B "fprintf" 2 588 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `384 
f N "putc_send" 2 589 ""
f B "putc_send" 2 589 "void()" `388 
f N "fputc_send" 2 590 ""
v L "stream" 2 590 "int8" `390 
f B "fputc_send" 2 590 "void(int8 stream)" `389 
f N "rcv_buffer_full" 2 591 ""
f B "rcv_buffer_full" 2 591 "int8()" `391 
f N "rcv_buffer_full" 2 592 ""
v L "stream" 2 592 "int8" `393 
f B "rcv_buffer_full" 2 592 "int8(int8 stream)" `392 
f N "rcv_buffer_bytes" 2 593 ""
f B "rcv_buffer_bytes" 2 593 "int16()" `394 
f N "rcv_buffer_bytes" 2 594 ""
v L "stream" 2 594 "int8" `396 
f B "rcv_buffer_bytes" 2 594 "int16(int8 stream)" `395 
f N "tx_buffer_full" 2 595 ""
f B "tx_buffer_full" 2 595 "int8()" `397 
f N "tx_buffer_full" 2 596 ""
v L "stream" 2 596 "int8" `399 
f B "tx_buffer_full" 2 596 "int8(int8 stream)" `398 
f N "tx_buffer_bytes" 2 597 ""
f B "tx_buffer_bytes" 2 597 "int16()" `400 
f N "tx_buffer_bytes" 2 598 ""
v L "stream" 2 598 "int8" `402 
f B "tx_buffer_bytes" 2 598 "int16(int8 stream)" `401  "#use i2c() Prototypes:"
f N "i2c_read" 2 601 ""
f B "i2c_read" 2 601 "int8()" `403 
f N "i2c_read" 2 602 ""
v L "ack" 2 602 "int8" `405 
f B "i2c_read" 2 602 "int8(int8 ack)" `404 
f N "i2c_read" 2 603 ""
v L "stream" 2 603 "int8" `407 
v L "ack" 2 603 "int8" `408 
f B "i2c_read" 2 603 "int8(int8 stream,int8 ack)" `406 
f N "i2c_write" 2 604 ""
v L "data" 2 604 "int8" `410 
f B "i2c_write" 2 604 "int8(int8 data)" `409 
f N "i2c_write" 2 605 ""
v L "stream" 2 605 "int8" `412 
v L "data" 2 605 "int8" `413 
f B "i2c_write" 2 605 "int8(int8 stream,int8 data)" `411 
f N "i2c_start" 2 606 ""
f B "i2c_start" 2 606 "void()" `414 
f N "i2c_start" 2 607 ""
v L "stream" 2 607 "int8" `416 
f B "i2c_start" 2 607 "void(int8 stream)" `415 
f N "i2c_start" 2 608 ""
v L "stream" 2 608 "int8" `418 
v L "restart" 2 608 "int8" `419 
f B "i2c_start" 2 608 "void(int8 stream,int8 restart)" `417 
f N "i2c_stop" 2 609 ""
f B "i2c_stop" 2 609 "void()" `420 
f N "i2c_stop" 2 610 ""
v L "stream" 2 610 "int8" `422 
f B "i2c_stop" 2 610 "void(int8 stream)" `421 
f N "i2c_isr_state" 2 611 ""
f B "i2c_isr_state" 2 611 "int8()" `423 
f N "i2c_slaveaddr" 2 612 ""
v L "addr" 2 612 "int8" `425 
f B "i2c_slaveaddr" 2 612 "void(int8 addr)" `424 
f N "i2c_slaveaddr" 2 613 ""
v L "stream" 2 613 "int8" `427 
v L "addr" 2 613 "int8" `428 
f B "i2c_slaveaddr" 2 613 "void(int8 stream,int8 addr)" `426 
f N "i2c_poll" 2 614 ""
f B "i2c_poll" 2 614 "int8()" `429 
f N "i2c_poll" 2 615 ""
v L "stream" 2 615 "int8" `431 
f B "i2c_poll" 2 615 "int8(int8 stream)" `430 
f N "i2c_init" 2 616 ""
v L "baud" 2 616 "int32" `433 
f B "i2c_init" 2 616 "void(int32 baud)" `432 
f N "i2c_init" 2 617 ""
v L "stream" 2 617 "int8" `435 
v L "baud" 2 617 "int32" `436 
f B "i2c_init" 2 617 "void(int8 stream,int32 baud)" `434 
f N "i2c_transfer" 2 618 ""
v L "address" 2 618 "int8" `438 
v L "wData" 2 618 "*int8" `439 
v L "wCount" 2 618 "int8" `440 
f B "i2c_transfer" 2 618 "int8(int8 address,*int8 wData,int8 wCount)" `437 
f N "i2c_transfer" 2 619 ""
v L "address" 2 619 "int8" `442 
v L "wData" 2 619 "*int8" `443 
v L "wCount" 2 619 "int8" `444 
v L "rData" 2 619 "*int8" `445 
v L "rCount" 2 619 "*int8" `446 
f B "i2c_transfer" 2 619 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `441 
f N "i2c_transfer" 2 620 ""
v L "stream" 2 620 "int8" `448 
v L "address" 2 620 "int8" `449 
v L "wData" 2 620 "*int8" `450 
v L "wCount" 2 620 "int8" `451 
f B "i2c_transfer" 2 620 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `447 
f N "i2c_transfer" 2 621 ""
v L "stream" 2 621 "int8" `453 
v L "address" 2 621 "int8" `454 
v L "wData" 2 621 "*int8" `455 
v L "wCount" 2 621 "int8" `456 
v L "rData" 2 621 "*int8" `457 
v L "rCount" 2 621 "*int8" `458 
f B "i2c_transfer" 2 621 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `452 
f N "i2c_transfer_out" 2 622 ""
v L "address" 2 622 "int8" `460 
v L "wData" 2 622 "*int8" `461 
v L "wCount" 2 622 "int8" `462 
f B "i2c_transfer_out" 2 622 "int8(int8 address,*int8 wData,int8 wCount)" `459 
f N "i2c_transfer_out" 2 623 ""
v L "stream" 2 623 "int8" `464 
v L "address" 2 623 "int8" `465 
v L "wData" 2 623 "*int8" `466 
v L "wCount" 2 623 "int8" `467 
f B "i2c_transfer_out" 2 623 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `463 
f N "i2c_transfer_in" 2 624 ""
v L "address" 2 624 "int8" `469 
v L "rData" 2 624 "*int8" `470 
v L "rCount" 2 624 "int8" `471 
f B "i2c_transfer_in" 2 624 "int8(int8 address,*int8 rData,int8 rCount)" `468 
f N "i2c_transfer_in" 2 625 ""
v L "stream" 2 625 "int8" `473 
v L "address" 2 625 "int8" `474 
v L "rData" 2 625 "*int8" `475 
v L "rCount" 2 625 "int8" `476 
f B "i2c_transfer_in" 2 625 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `472  "#use spi() Prototypes:"
f N "spi_xfer" 2 628 ""
f B "spi_xfer" 2 628 "int8()" `477 
f N "spi_xfer" 2 629 ""
f G "spi_xfer" 2 629 "int16(int8 data)" `478 
f N "spi_xfer" 2 630 ""
f G "spi_xfer" 2 630 "int32(int8 data)" `478 
f N "spi_xfer" 2 631 ""
v L "data" 2 631 "int8" `479 
f B "spi_xfer" 2 631 "int8(int8 data)" `478 
f N "spi_xfer" 2 632 ""
v L "data" 2 632 "int16" `481 
f B "spi_xfer" 2 632 "int16(int16 data)" `480 
f N "spi_xfer" 2 633 ""
v L "data" 2 633 "int32" `483 
f B "spi_xfer" 2 633 "int32(int32 data)" `482 
f N "spi_xfer" 2 634 ""
v L "stream" 2 634 "int8" `485 
v L "data" 2 634 "int8" `486 
f B "spi_xfer" 2 634 "int8(int8 stream,int8 data)" `484 
f N "spi_xfer" 2 635 ""
v L "stream" 2 635 "int8" `488 
v L "data" 2 635 "int16" `489 
f B "spi_xfer" 2 635 "int16(int8 stream,int16 data)" `487 
f N "spi_xfer" 2 636 ""
v L "stream" 2 636 "int8" `491 
v L "data" 2 636 "int32" `492 
f B "spi_xfer" 2 636 "int32(int8 stream,int32 data)" `490 
f N "spi_xfer" 2 637 ""
v L "stream" 2 637 "int8" `494 
v L "data" 2 637 "int8" `495 
v L "bits" 2 637 "int8" `496 
f B "spi_xfer" 2 637 "int8(int8 stream,int8 data,int8 bits)" `493 
f N "spi_xfer" 2 638 ""
v L "stream" 2 638 "int8" `498 
v L "data" 2 638 "int16" `499 
v L "bits" 2 638 "int8" `500 
f B "spi_xfer" 2 638 "int16(int8 stream,int16 data,int8 bits)" `497 
f N "spi_xfer" 2 639 ""
v L "stream" 2 639 "int8" `502 
v L "data" 2 639 "int32" `503 
v L "bits" 2 639 "int8" `504 
f B "spi_xfer" 2 639 "int32(int8 stream,int32 data,int8 bits)" `501 
f N "spi_init" 2 640 ""
v L "baud" 2 640 "int32" `506 
f B "spi_init" 2 640 "void(int32 baud)" `505 
f N "spi_init" 2 641 ""
v L "stream" 2 641 "int8" `508 
v L "baud" 2 641 "int32" `509 
f B "spi_init" 2 641 "void(int8 stream,int32 baud)" `507 
f N "spi_speed" 2 642 ""
v L "baud" 2 642 "int32" `511 
f B "spi_speed" 2 642 "void(int32 baud)" `510 
f N "spi_speed" 2 643 ""
v L "stream" 2 643 "int8" `513 
v L "baud" 2 643 "int32" `514 
f B "spi_speed" 2 643 "void(int8 stream,int32 baud)" `512 
f N "spi_speed" 2 644 ""
v L "stream" 2 644 "int8" `516 
v L "baud" 2 644 "int32" `517 
v L "clock" 2 644 "int32" `518 
f B "spi_speed" 2 644 "void(int8 stream,int32 baud,int32 clock)" `515 
f N "spi_prewrite" 2 645 ""
v L "data" 2 645 "int8" `520 
f B "spi_prewrite" 2 645 "void(int8 data)" `519 
f N "spi_prewrite" 2 646 ""
v L "data" 2 646 "int16" `522 
f B "spi_prewrite" 2 646 "void(int16 data)" `521 
f N "spi_prewrite" 2 647 ""
v L "data" 2 647 "int32" `524 
f B "spi_prewrite" 2 647 "void(int32 data)" `523 
f N "spi_prewrite" 2 648 ""
v L "??65535" 2 648 "int8" `526 
v L "data" 2 648 "int8" `527 
f B "spi_prewrite" 2 648 "void(int8 ,int8 data)" `525 
f N "spi_prewrite" 2 649 ""
v L "??65535" 2 649 "int8" `529 
v L "data" 2 649 "int16" `530 
f B "spi_prewrite" 2 649 "void(int8 ,int16 data)" `528 
f N "spi_prewrite" 2 650 ""
v L "??65535" 2 650 "int8" `532 
v L "data" 2 650 "int32" `533 
f B "spi_prewrite" 2 650 "void(int8 ,int32 data)" `531 
f N "spi_xfer_in" 2 651 ""
f B "spi_xfer_in" 2 651 "int8()" `534 
f N "spi_xfer_in" 2 652 ""
f G "spi_xfer_in" 2 652 "int16(int8 bits)" `535 
f N "spi_xfer_in" 2 653 ""
f G "spi_xfer_in" 2 653 "int32(int8 bits)" `535 
f N "spi_xfer_in" 2 654 ""
v L "bits" 2 654 "int8" `536 
f B "spi_xfer_in" 2 654 "int8(int8 bits)" `535 
f N "spi_xfer_in" 2 655 ""
v L "bits" 2 655 "int8" `538 
f G "spi_xfer_in" 2 655 "int16(int8 bits,int8 bits)" `537 
f N "spi_xfer_in" 2 656 ""
v L "bits" 2 656 "int8" `538 
f G "spi_xfer_in" 2 656 "int32(int8 bits,int8 bits)" `537 
f N "spi_xfer_in" 2 657 ""
v L "stream" 2 657 "int8" `538 
v L "bits" 2 657 "int8" `539 
f B "spi_xfer_in" 2 657 "int8(int8 stream,int8 bits)" `537 
f N "spi_xfer_in" 2 658 ""
v L "stream" 2 658 "int8" `538 
v L "bits" 2 658 "int8" `542 
f G "spi_xfer_in" 2 658 "int16(int8 stream,int8 bits,int16 count)" `540 
f N "spi_xfer_in" 2 659 ""
v L "stream" 2 659 "int8" `538 
v L "bits" 2 659 "int8" `542 
f G "spi_xfer_in" 2 659 "int32(int8 stream,int8 bits,int16 count)" `540 
f N "spi_transfer" 2 660 ""
v L "wData" 2 660 "*int8" `541 
v L "rData" 2 660 "*int8" `542 
v L "count" 2 660 "int16" `543 
f B "spi_transfer" 2 660 "void(*int8 wData,*int8 rData,int16 count)" `540 
f N "spi_transfer" 2 661 ""
v L "stream" 2 661 "int8" `545 
v L "wData" 2 661 "*int8" `546 
v L "rData" 2 661 "*int8" `547 
v L "count" 2 661 "int16" `548 
f B "spi_transfer" 2 661 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `544 
f N "spi_transfer_write" 2 662 ""
v L "wData" 2 662 "*int8" `550 
v L "count" 2 662 "int16" `551 
f B "spi_transfer_write" 2 662 "void(*int8 wData,int16 count)" `549 
f N "spi_transfer_write" 2 663 ""
v L "stream" 2 663 "int8" `553 
v L "wData" 2 663 "*int8" `554 
v L "count" 2 663 "int16" `555 
f B "spi_transfer_write" 2 663 "void(int8 stream,*int8 wData,int16 count)" `552 
f N "spi_transfer_read" 2 664 ""
v L "rData" 2 664 "*int8" `557 
v L "count" 2 664 "int16" `558 
f B "spi_transfer_read" 2 664 "void(*int8 rData,int16 count)" `556 
f N "spi_transfer_read" 2 665 ""
v L "stream" 2 665 "int8" `560 
v L "rData" 2 665 "*int8" `561 
v L "count" 2 665 "int16" `562 
f B "spi_transfer_read" 2 665 "void(int8 stream,*int8 rData,int16 count)" `559  "#use rtos() Prototypes:"
f N "rtos_run" 2 668 ""
f B "rtos_run" 2 668 "void()" `563 
f N "rtos_yield" 2 669 ""
f B "rtos_yield" 2 669 "void()" `564 
f N "rtos_enable" 2 670 ""
v L "task" 2 670 "int8" `566 
f B "rtos_enable" 2 670 "void(int8 task)" `565 
f N "rtos_disable" 2 671 ""
v L "task" 2 671 "int8" `568 
f B "rtos_disable" 2 671 "void(int8 task)" `567 
f N "rtos_terminate" 2 672 ""
f B "rtos_terminate" 2 672 "void()" `569 
f N "rtos_await" 2 673 ""
v L "flag" 2 673 "int8" `571 
f B "rtos_await" 2 673 "void(int8 flag)" `570 
f N "rtos_wait" 2 674 ""
v L "sem" 2 674 "int8" `573 
f B "rtos_wait" 2 674 "void(int8 sem)" `572 
f N "rtos_signal" 2 675 ""
v L "sem" 2 675 "int8" `575 
f B "rtos_signal" 2 675 "void(int8 sem)" `574 
f N "rtos_msg_send" 2 676 ""
v L "task" 2 676 "int8" `577 
v L "msg" 2 676 "int8" `578 
f B "rtos_msg_send" 2 676 "void(int8 task,int8 msg)" `576 
f N "rtos_msg_read" 2 677 ""
f B "rtos_msg_read" 2 677 "int8()" `579 
f N "rtos_msg_poll" 2 678 ""
f B "rtos_msg_poll" 2 678 "int8()" `580 
f N "rtos_overrun" 2 679 ""
v L "task" 2 679 "int8" `582 
f B "rtos_overrun" 2 679 "int8(int8 task)" `581 
f N "rtos_stats" 2 680 ""
v L "task" 2 680 "int8" `584 
v L "stat" 2 680 "*int8" `585 
f B "rtos_stats" 2 680 "void(int8 task,*int8 stat)" `583  "#use timer() Prototypes:"
f N "get_ticks" 2 683 ""
f B "get_ticks" 2 683 "int8()" `586 
f N "get_ticks" 2 684 ""
f G "get_ticks" 2 684 "int16(int8 stream)" `587 
f N "get_ticks" 2 685 ""
f G "get_ticks" 2 685 "int32(int8 stream)" `587 
f N "get_ticks" 2 686 ""
v L "stream" 2 686 "int8" `588 
f B "get_ticks" 2 686 "int8(int8 stream)" `587 
f N "get_ticks" 2 687 ""
v L "stream" 2 687 "int8" `590 
f G "get_ticks" 2 687 "int16(int8 stream)" `589 
f N "get_ticks" 2 688 ""
v L "stream" 2 688 "int8" `590 
f G "get_ticks" 2 688 "int32(int8 stream)" `589 
f N "set_ticks" 2 689 ""
v L "value" 2 689 "int8" `590 
f B "set_ticks" 2 689 "void(int8 value)" `589 
f N "set_ticks" 2 690 ""
v L "value" 2 690 "int16" `592 
f B "set_ticks" 2 690 "void(int16 value)" `591 
f N "set_ticks" 2 691 ""
v L "value" 2 691 "int32" `594 
f B "set_ticks" 2 691 "void(int32 value)" `593 
f N "set_ticks" 2 692 ""
v L "stream" 2 692 "int8" `596 
v L "value" 2 692 "int8" `597 
f B "set_ticks" 2 692 "void(int8 stream,int8 value)" `595 
f N "set_ticks" 2 693 ""
v L "stream" 2 693 "int8" `599 
v L "value" 2 693 "int16" `600 
f B "set_ticks" 2 693 "void(int8 stream,int16 value)" `598 
f N "set_ticks" 2 694 ""
v L "stream" 2 694 "int8" `602 
v L "value" 2 694 "int32" `603 
f B "set_ticks" 2 694 "void(int8 stream,int32 value)" `601  "#use pwm() Prototypes:"
f N "pwm_on" 2 697 ""
f B "pwm_on" 2 697 "void()" `604 
f N "pwm_on" 2 698 ""
v L "stream" 2 698 "int8" `606 
f B "pwm_on" 2 698 "void(int8 stream)" `605 
f N "pwm_off" 2 699 ""
f B "pwm_off" 2 699 "void()" `607 
f N "pwm_off" 2 700 ""
v L "stream" 2 700 "int8" `609 
f B "pwm_off" 2 700 "void(int8 stream)" `608 
f N "pwm_set_duty" 2 701 ""
v L "duty" 2 701 "int16" `611 
f B "pwm_set_duty" 2 701 "void(int16 duty)" `610 
f N "pwm_set_duty" 2 702 ""
v L "stream" 2 702 "int8" `613 
v L "duty" 2 702 "int16" `614 
f B "pwm_set_duty" 2 702 "void(int8 stream,int16 duty)" `612 
f N "pwm_set_duty_percent" 2 703 ""
v L "percent" 2 703 "int16" `616 
f B "pwm_set_duty_percent" 2 703 "void(int16 percent)" `615 
f N "pwm_set_duty_percent" 2 704 ""
v L "stream" 2 704 "int8" `618 
v L "percent" 2 704 "int16" `619 
f B "pwm_set_duty_percent" 2 704 "void(int8 stream,int16 percent)" `617 
f N "pwm_set_frequency" 2 705 ""
v L "frequency" 2 705 "int32" `621 
f B "pwm_set_frequency" 2 705 "void(int32 frequency)" `620 
f N "pwm_set_frequency" 2 706 ""
v L "stream" 2 706 "int8" `623 
v L "frequency" 2 706 "int32" `624 
f B "pwm_set_frequency" 2 706 "void(int8 stream,int32 frequency)" `622 
f N "pwm_get_duty_period" 2 707 ""
f B "pwm_get_duty_period" 2 707 "int16()" `625 
f N "pwm_get_duty_period" 2 708 ""
v L "stream" 2 708 "int8" `627 
f B "pwm_get_duty_period" 2 708 "int16(int8 stream)" `626  "#use capture() Prototypes:"
f N "get_capture_time" 2 711 ""
f B "get_capture_time" 2 711 "int16()" `628 
f N "get_capture_time" 2 712 ""
v L "stream" 2 712 "int8" `630 
f B "get_capture_time" 2 712 "int16(int8 stream)" `629 
f N "get_capture_event" 2 713 ""
f B "get_capture_event" 2 713 "int8()" `631 
f N "get_capture_event" 2 714 ""
v L "stream" 2 714 "int8" `633 
f B "get_capture_event" 2 714 "int8(int8 stream)" `632  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 727 ""
v L "address" 2 727 "int16" `635 
f B "goto_address" 2 727 "void(int16 address)" `634 
f N "label_address" 2 728 ""
v L "label" 2 728 "int16" `637 
f B "label_address" 2 728 "int16(int16 label)" `636  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 731 ""
v L "address" 2 731 "int16" `639 
v L "dataptr" 2 731 "*int8" `640 
v L "count" 2 731 "int16" `641 
f B "read_program_memory" 2 731 "void(int16 address,*int8 dataptr,int16 count)" `638 
f N "read_program_eeprom" 2 732 ""
v L "address" 2 732 "int16" `643 
f B "read_program_eeprom" 2 732 "int16(int16 address)" `642  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 735 ""
v L "address" 2 735 "int16" `645 
f B "erase_program_eeprom" 2 735 "void(int16 address)" `644 
f N "write_program_memory" 2 736 ""
v L "address" 2 736 "int16" `647 
v L "dataptr" 2 736 "*int8" `648 
v L "count" 2 736 "int16" `649 
f B "write_program_memory" 2 736 "void(int16 address,*int8 dataptr,int16 count)" `646 
f N "write_program_eeprom" 2 737 ""
v L "address" 2 737 "int16" `651 
v L "data" 2 737 "int16" `652 
f B "write_program_eeprom" 2 737 "void(int16 address,int16 data)" `650  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 744 "unsigned int8"
f N "read_eeprom" 2 747 ""
v L "address" 2 747 "int8" `654 
f B "read_eeprom" 2 747 "int8(int8 address)" `653 
f N "write_eeprom" 2 748 ""
v L "address" 2 748 "int8" `656 
v L "value" 2 748 "int8" `657 
f B "write_eeprom" 2 748 "void(int8 address,int8 value)" `655  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 755 ""
v L "interrupt" 2 755 "int32" `659 
f B "enable_interrupts" 2 755 "void(int32 interrupt)" `658 
f N "disable_interrupts" 2 756 ""
v L "interrupt" 2 756 "int32" `661 
f B "disable_interrupts" 2 756 "void(int32 interrupt)" `660 
f N "clear_interrupt" 2 757 ""
v L "interrupt" 2 757 "int32" `663 
f B "clear_interrupt" 2 757 "void(int32 interrupt)" `662 
f N "interrupt_active" 2 758 ""
v L "interrupt" 2 758 "int32" `665 
f B "interrupt_active" 2 758 "int8(int32 interrupt)" `664 
f N "interrupt_enabled" 2 759 ""
v L "interrupt" 2 759 "int32" `667 
f B "interrupt_enabled" 2 759 "int8(int32 interrupt)" `666 
f N "ext_int_edge" 2 760 ""
v L "source" 2 760 "int8" `669 
v L "edge" 2 760 "int8" `670 
f B "ext_int_edge" 2 760 "void(int8 source,int8 edge)" `668 
f N "jump_to_isr" 2 761 ""
v L "address" 2 761 "int16" `672 
f B "jump_to_isr" 2 761 "void(int16 address)" `671  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 763 "0x40"
d G "H_TO_L" 2 764 "0"
d G "GLOBAL" 2 766 "0x0BC0"
d G "PERIPH" 2 767 "0x0B40"
d G "INT_RTCC" 2 768 "0x000B20"
d G "INT_RB" 2 769 "0x01FF0B08"
d G "INT_EXT_L2H" 2 770 "0x50000B10"
d G "INT_EXT_H2L" 2 771 "0x60000B10"
d G "INT_EXT" 2 772 "0x000B10"
d G "INT_AD" 2 773 "0x008C40"
d G "INT_TBE" 2 774 "0x008C10"
d G "INT_RDA" 2 775 "0x008C20"
d G "INT_TIMER1" 2 776 "0x008C01"
d G "INT_TIMER2" 2 777 "0x008C02"
d G "INT_CCP1" 2 778 "0x008C04"
d G "INT_CCP2" 2 779 "0x008D01"
d G "INT_SSP" 2 780 "0x008C08"
d G "INT_BUSCOL" 2 781 "0x008D08"
d G "INT_EEPROM" 2 782 "0x008D10"
d G "INT_TIMER0" 2 783 "0x000B20"
d G "INT_OSC_FAIL" 2 784 "0x008D80"
d G "INT_COMP" 2 785 "0x008D20"
d G "INT_COMP2" 2 786 "0x008D40"
d G "INT_ULPWU" 2 787 "0x008D04"
d G "INT_RB0" 2 788 "0x1010B08"
d G "INT_RB1" 2 789 "0x1020B08"
d G "INT_RB2" 2 790 "0x1040B08"
d G "INT_RB3" 2 791 "0x1080B08"
d G "INT_RB4" 2 792 "0x1100B08"
d G "INT_RB5" 2 793 "0x1200B08"
d G "INT_RB6" 2 794 "0x1400B08"
d G "INT_RB7" 2 795 "0x1800B08"
D G "MFRC522_CS" 1 8 "PIN_E0"
D G "MFRC522_SCK" 1 9 "PIN_C3"
D G "MFRC522_SI" 1 10 "PIN_C4"
D G "MFRC522_SO" 1 11 "PIN_C5"
D G "MFRC522_RST" 1 12 "PIN_E2"
D G "_lcd_h_" 3 1 ""
D G "MATH_H" 4 30 ""
D G "PI" 4 35 "3.1415926535897932"
D G "SQRT2" 4 38 "1.4142135623730950"
C L "jump_to_isr" 4 2 3 "FUNCTION"
F N "CEIL_FLOOR" 4 45 ""
V L "x" 4 45 "float" `678 
V L "n" 4 45 "int8" `679 
F G "CEIL_FLOOR" 4 46 "float(float x,int8 n)" `677 
V L "y" 4 47 "float" `680 
V L "res" 4 47 "float" `681 
V L "l" 4 48 "int16" `682 
V L "s" 4 49 "int1" `683 
C L "floor" 4 2 5 "FUNCTION"
F N "floor" 4 207 ""
V L "x" 4 207 "float" `698 
F G "floor" 4 208 "float(float x)" `697 
C L "ceil" 4 2 5 "FUNCTION"
F N "ceil" 4 233 ""
V L "x" 4 233 "float" `700 
F G "ceil" 4 234 "float(float x)" `699 
D G "fabs" 4 259 "abs"
C L "fmod" 4 2 6 "FUNCTION"
F N "fmod" 4 271 ""
V L "x" 4 271 "float" `702 
V L "y" 4 271 "float" `703 
F G "fmod" 4 272 "float(float x,float y)" `701 
V L "i" 4 273 "float" `704 
D G "LN2" 4 334 "0.6931471805599453"
D G "LN2_INV" 4 335 "1.4426950408889634073"
V G "pe" 4 337 "[6]" `709 
F N "exp" 4 341 ""
V L "x" 4 341 "float" `712 
F G "exp" 4 342 "float(float x)" `711 
V L "y" 4 343 "float" `713 
V L "res" 4 343 "float" `714 
V L "r" 4 343 "float" `715 
V L "n" 4 347 "sint8" `716 
V L "s" 4 348 "int1" `717 
C L "exp" 4 2 1 "FUNCTION"
V G "pl" 4 525 "[4]" `721 
V G "ql" 4 526 "[4]" `724 
C L "log" 4 2 3 "FUNCTION"
F N "log" 4 534 ""
V L "x" 4 534 "float" `727 
F G "log" 4 535 "float(float x)" `726 
V L "y" 4 536 "float" `728 
V L "res" 4 536 "float" `729 
V L "r" 4 536 "float" `730 
V L "y2" 4 536 "float" `731 
V L "n" 4 540 "sint8" `732 
C L "log" 4 2 1 "FUNCTION"
D G "LN10" 4 758 "2.3025850929940456"
D G "LN10_INV" 4 759 "0.4342944819032518276"
C L "log10" 4 2 3 "FUNCTION"
F N "log10" 4 767 ""
V L "x" 4 767 "float" `734 
F G "log10" 4 768 "float(float x)" `733 
V L "r" 4 769 "float" `735 
C L "modf" 4 2 8 "FUNCTION"
F N "modf" 4 808 ""
V L "value" 4 808 "float" `737 
V L "iptr" 4 808 "*float" `738 
F G "modf" 4 809 "float(float value,*float iptr)" `736 
C L "pwr" 4 2 6 "FUNCTION"
F N "pwr" 4 836 ""
V L "x" 4 836 "float" `740 
V L "y" 4 836 "float" `741 
F G "pwr" 4 837 "float(float x,float y)" `739 
C L "pow" 4 2 7 "FUNCTION"
F N "pow" 4 899 ""
V L "x" 4 899 "float" `743 
V L "y" 4 899 "float" `744 
F G "pow" 4 900 "float(float x,float y)" `742 
C L "sqrt" 4 2 5 "FUNCTION"
F N "sqrt" 4 960 ""
V L "x" 4 960 "float" `746 
F G "sqrt" 4 961 "float(float x)" `745 
V L "y" 4 962 "float" `747 
V L "res" 4 962 "float" `748 
V L "p" 4 966 "*int8" `749 
D G "PI_DIV_BY_TWO_INV" 4 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 4 1159 "1.5707963267948966"
D G "TWOBYPI" 4 1163 "0.6366197723675813"
C L "cos" 4 2 3 "FUNCTION"
F N "cos" 4 1171 ""
V L "x" 4 1171 "float" `751 
F G "cos" 4 1172 "float(float x)" `750 
V L "y" 4 1173 "float" `752 
V L "t" 4 1173 "float" `753 
V L "t2" 4 1173 "float" `754 
V L "quad" 4 1174 "int8" `755 
V L "i" 4 1174 "int8" `756 
V L "frac" 4 1175 "float" `757 
V L "p" 4 1176 "float[5]" `758  "by the series definition for cosine"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 2 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "sin" 4 2 5 "FUNCTION"
F N "sin" 4 1310 ""
V L "x" 4 1310 "float" `760 
F G "sin" 4 1311 "float(float x)" `759 
C L "tan" 4 2 5 "FUNCTION"
F N "tan" 4 1336 ""
V L "x" 4 1336 "float" `762 
F G "tan" 4 1337 "float(float x)" `761 
V L "c" 4 1338 "float" `763 
V L "s" 4 1338 "float" `764 
V G "pas" 4 1376 "[3]" `766 
V G "qas" 4 1377 "[3]" `769 
F N "ASIN_COS" 4 1379 ""
V L "x" 4 1379 "float" `772 
V L "n" 4 1379 "int8" `773 
F G "ASIN_COS" 4 1380 "float(float x,int8 n)" `771 
V L "y" 4 1381 "float" `774 
V L "res" 4 1381 "float" `775 
V L "r" 4 1381 "float" `776 
V L "y2" 4 1381 "float" `777 
V L "s" 4 1382 "int1" `778 
C L "ASIN_COS" 4 2 1 "FUNCTION"
C L "ASIN_COS" 4 2 1 "FUNCTION"
C L "asin" 4 2 5 "FUNCTION"
F N "asin" 4 1537 ""
V L "x" 4 1537 "float" `780 
F G "asin" 4 1538 "float(float x)" `779 
V L "r" 4 1539 "float" `781 
C L "acos" 4 2 5 "FUNCTION"
F N "acos" 4 1571 ""
V L "x" 4 1571 "float" `783 
F G "acos" 4 1572 "float(float x)" `782 
V L "r" 4 1573 "float" `784 
V G "pat" 4 1599 "[4]" `786 
V G "qat" 4 1600 "[4]" `789 
C L "atan" 4 2 3 "FUNCTION"
F N "atan" 4 1608 ""
V L "x" 4 1608 "float" `792 
F G "atan" 4 1609 "float(float x)" `791 
V L "y" 4 1610 "float" `793 
V L "res" 4 1610 "float" `794 
V L "r" 4 1610 "float" `795 
V L "s" 4 1611 "int1" `796 
V L "flag" 4 1611 "int1" `797 
C L "atan" 4 2 1 "FUNCTION"
C L "atan2" 4 2 7 "FUNCTION"
F N "atan2" 4 1751 ""
V L "y" 4 1751 "float" `799 
V L "x" 4 1751 "float" `800 
F G "atan2" 4 1752 "float(float y,float x)" `798 
V L "z" 4 1753 "float" `801 
V L "sign" 4 1754 "int1" `802 
V L "quad" 4 1755 "int8" `803 
C L "atan2" 4 2 1 "FUNCTION"
C L "atan2" 4 2 1 "FUNCTION"
C L "cosh" 4 2 7 "FUNCTION"
F N "cosh" 4 1973 ""
V L "x" 4 1973 "float" `806 
F G "cosh" 4 1974 "float(float x)" `805 
C L "sinh" 4 2 6 "FUNCTION"
F N "sinh" 4 2000 ""
V L "x" 4 2000 "float" `808 
F G "sinh" 4 2001 "float(float x)" `807 
C L "tanh" 4 2 6 "FUNCTION"
F N "tanh" 4 2030 ""
V L "x" 4 2030 "float" `810 
F G "tanh" 4 2031 "float(float x)" `809 
D G "LOG2" 4 2060 ".30102999566398119521"
D G "LOG2_INV" 4 2061 "3.32192809488736234787"
F N "frexp" 4 2062 ""
V L "x" 4 2062 "float" `812 
V L "exp" 4 2062 "*sint8" `813 
F G "frexp" 4 2063 "float(float x,*sint8 exp)" `811 
V L "res" 4 2064 "float" `814 
V L "sign" 4 2065 "int1" `815 
C L "ldexp" 4 2 6 "FUNCTION"
F N "ldexp" 4 2207 ""
V L "value" 4 2207 "float" `817 
V L "exp" 4 2207 "sint8" `818 
F G "ldexp" 4 2208 "float(float value,sint8 exp)" `816 
C L "lcd_init" 4 2 2 "FUNCTION"
F N "lcd_init" 3 4 ""
f G "lcd_init" 3 4 "void()" `823  "Ham dung de khoi dong C.LCD."
F N "lcd_read_byte" 3 5 ""
f G "lcd_read_byte" 3 5 "int8()" `824  "Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD."
F N "lcd_read_nibble" 3 6 ""
f G "lcd_read_nibble" 3 6 "int8()" `825  "Ham doc thong tin (dang 4 bit / nibble) tu C.LCD."
F N "lcd_send_byte" 3 7 ""
V L "address" 3 7 "int8" `827 
V L "n" 3 7 "int8" `828 
f G "lcd_send_byte" 3 7 "void(int8 address,int8 n)" `826  "Ham gui thong tin (byte) toi C.LCD tai dia chi (address)."
F N "lcd_send_nibble" 3 8 ""
V L "n" 3 8 "int8" `830 
f G "lcd_send_nibble" 3 8 "void(int8 n)" `829  "Ham gui thong tin (dang 4 bit / nibble) sang C.LCD."
F N "lcd_gotoxy" 3 9 ""
V L "x" 3 9 "int8" `832 
V L "y" 3 9 "int8" `833 
f G "lcd_gotoxy" 3 9 "void(int8 x,int8 y)" `831  "Ham thiet lap vi tri ghi tren C.LCD."
F N "lcd_getc" 3 10 ""
V L "x" 3 10 "int8" `835 
V L "y" 3 10 "int8" `836 
f G "lcd_getc" 3 10 "int8(int8 x,int8 y)" `834  "Ham tra ve ky tu tai vi tri (x,y) tren C.LCD."
F N "lcd_putc" 3 11 ""
V L "c" 3 11 "int8" `838 
f G "lcd_putc" 3 11 "void(int8 c)" `837  "Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD."
D G "LCD_RS_PIN" 3 14 "PIN_B7" "Cac ket noi C.LCD voi vi dieu khien."
D G "LCD_RW_PIN" 3 15 "PIN_B6"
D G "LCD_ENABLE_PIN" 3 16 "PIN_B5"
D G "LCD_DATA4" 3 17 "PIN_B4"
D G "LCD_DATA5" 3 18 "PIN_B3"
D G "LCD_DATA6" 3 19 "PIN_B2"
D G "LCD_DATA7" 3 20 "PIN_B1"
D G "lcd_output_enable" 3 39 "(x)   output_bit(LCD_ENABLE_PIN, x)" "Lenh dieu khien chan LCD_ENABLE_PIN."
D G "lcd_enable_tris" 3 40 "()   output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 3 42 "(x)   output_bit(LCD_RS_PIN, x)" "Lenh dieu khien chan LCD_RS_PIN."
D G "lcd_rs_tris" 3 43 "()      output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 3 45 "(x)   output_bit(LCD_RW_PIN, x)" "Lenh dieu khien chan LCD_RW_PIN"
D G "lcd_rw_tris" 3 46 "()      output_drive(LCD_RW_PIN)"
D G "lcd_line_one" 3 48 "0x00" "Dia chi RAM C.LCD cho hang thu 1."
D G "lcd_line_two" 3 49 "0x40" "Dia chi RAM C.LCD cho hang thu 2."
D G "lcd_line_three" 3 50 "0x14"
D G "lcd_line_four" 3 51 "0x54"
D G "LCD_TYPE" 3 52 "0x02" "Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines"
C L "lcd_putc" 3 12 1 "FUNCTION"
V G "LCD_INIT_STRING" 3 55 "[4]" `840 
C L "lcd_putc" 3 12 13 "FUNCTION"
F N "lcd_init" 3 71 ""
C L "lcd_init" 3 12 1 "FUNCTION"
F G "lcd_init" 3 72 "void()" `823  "Khai bao bien."
V L "i" 3 74 "int8" `842  "Dinh nghia ham."
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 2 "FUNCTION"
C L "lcd_init" 3 12 4 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
F N "lcd_read_byte" 3 108 ""
C L "lcd_read_byte" 3 12 1 "FUNCTION"
F G "lcd_read_byte" 3 109 "int8()" `824  "Khai bao bien."
V L "low" 3 111 "int8" `843 
V L "high" 3 111 "int8" `844  "Dinh nghia ham."
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 2 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 2 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
F N "lcd_read_nibble" 3 141 ""
C L "lcd_read_nibble" 3 12 1 "FUNCTION"
F G "lcd_read_nibble" 3 142 "int8()" `825  "Khai bao bien."
V L "n" 3 144 "int8" `845 
C L "lcd_read_nibble" 3 12 2 "FUNCTION"
C L "lcd_read_nibble" 3 12 1 "FUNCTION"
C L "lcd_read_nibble" 3 12 1 "FUNCTION"
F N "lcd_send_byte" 3 155 ""
V L "address" 3 155 "int8" `827 
V L "n" 3 155 "int8" `828  "Ham gui thong tin (byte) toi C.LCD tai dia chi (address)."
F G "lcd_send_byte" 3 156 "void(int8 address,int8 n)" `826  "address = 0: Lenh / 1: Du lieu."
C L "lcd_send_byte" 3 12 3 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
F N "lcd_send_nibble" 3 173 ""
V L "n" 3 173 "int8" `830  "Ham gui thong tin (dang 4 bit / nibble) sang C.LCD."
F G "lcd_send_nibble" 3 174 "void(int8 n)" `829  "n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap."
C L "lcd_send_nibble" 3 12 2 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
F N "lcd_gotoxy" 3 190 ""
V L "x" 3 190 "int8" `832 
V L "y" 3 190 "int8" `833  "Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1)."
F G "lcd_gotoxy" 3 191 "void(int8 x,int8 y)" `831  "Khai bao bien."
V L "address" 3 193 "int8" `846  "Dinh nghia ham."
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 3 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
F N "lcd_getc" 3 211 ""
V L "x" 3 211 "int8" `835 
V L "y" 3 211 "int8" `836  "Ham tra ve ky tu tai vi tri (x,y) tren C.LCD."
F G "lcd_getc" 3 212 "int8(int8 x,int8 y)" `834  "Khai bao bien."
V L "value" 3 214 "int8" `847  "Dinh nghia ham."
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
F N "lcd_putc" 3 226 ""
V L "c" 3 226 "int8" `838  "Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD."
F G "lcd_putc" 3 227 "void(int8 c)" `837  "Khai bao bien."
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
D G "_Keypad_h_" 5 1 ""
C L "control" 4 2 24 "FUNCTION"
F N "control" 5 5 ""
V L "TenCot" 5 5 "int8" `853 
V L "TrangThai" 5 5 "int8" `854 
f G "control" 5 5 "void(int8 TenCot,int8 TrangThai)" `852 
F N "keypad_init" 5 6 ""
f G "keypad_init" 5 6 "void()" `855 
F N "scan" 5 7 ""
f G "scan" 5 7 "int8()" `856  "khai bao ket noi cac cot"
D G "COT_1" 5 9 "PIN_D0"
D G "COT_2" 5 10 "PIN_D1"
D G "COT_3" 5 11 "PIN_D2"
D G "COT_4" 5 12 "PIN_D3"
D G "HANG_1" 5 15 "input(PIN_D4)"
D G "HANG_2" 5 16 "input(PIN_D5)"
D G "HANG_3" 5 17 "input(PIN_D6)"
D G "HANG_4" 5 18 "input(PIN_D7)"
V G "PhimNhan" 5 20 "int8[16]" `857 
F N "control" 5 29 ""
V L "TenCot" 5 29 "int8" `853 
V L "TrangThai" 5 29 "int8" `860 
F G "control" 5 30 "void(int8 TenCot,int8 TrangThai)" `852 
C L "control" 5 14 1 "FUNCTION"
C L "control" 5 14 1 "FUNCTION"
C L "control" 5 14 1 "FUNCTION"
C L "control" 5 14 1 "FUNCTION"
F N "keypad_init" 5 56 ""
F G "keypad_init" 5 57 "void()" `855 
V L "i" 5 58 "int8" `859 
C L "keypad_init" 5 14 1 "FUNCTION"
F N "scan" 5 66 ""
F G "scan" 5 67 "int8()" `856 
V L "Key" 5 68 "int8" `860 
C L "scan" 5 14 1 "FUNCTION"
C L "scan" 5 14 1 "FUNCTION"
C L "scan" 5 14 2 "FUNCTION"
C L "scan" 5 14 1 "FUNCTION"
C L "scan" 5 14 2 "FUNCTION"
C L "scan" 5 14 1 "FUNCTION"
C L "scan" 5 14 2 "FUNCTION"
C L "scan" 5 14 1 "FUNCTION"
C L "scan" 5 14 1 "FUNCTION"
C L "scan" 5 14 1 "FUNCTION"
D G "PCD_IDLE" 6 3 "0x00" "NO action; Cancel the current command"
D G "PCD_AUTHENT" 6 4 "0x0E" "Authentication Key"
D G "PCD_RECEIVE" 6 5 "0x08" "Receive Data"
D G "PCD_TRANSMIT" 6 6 "0x04" "Transmit data"
D G "PCD_TRANSCEIVE" 6 7 "0x0C" "Transmit and receive data,"
D G "PCD_RESETPHASE" 6 8 "0x0F" "Reset"
D G "PCD_CALCCRC" 6 9 "0x03" "CRC Calculate"
D G "PICC_REQIDL" 6 11 "0x26" "find the antenna area does not enter hibernation"
D G "PICC_REQALL" 6 12 "0x52" "find all the cards antenna area"
D G "PICC_ANTICOLL" 6 13 "0x93" "anti-collision"
D G "PICC_SElECTTAG" 6 14 "0x93" "election card"
D G "PICC_AUTHENT1A" 6 15 "0x60" "authentication key A"
D G "PICC_AUTHENT1B" 6 16 "0x61" "authentication key B"
D G "PICC_READ" 6 17 "0x30" "Read Block"
D G "PICC_WRITE" 6 18 "0xA0" "write block"
D G "PICC_DECREMENT" 6 19 "0xC0" "debit"
D G "PICC_INCREMENT" 6 20 "0xC1" "recharge"
D G "PICC_RESTORE" 6 21 "0xC2" "transfer block data to the buffer"
D G "PICC_TRANSFER" 6 22 "0xB0" "save the data in the buffer"
D G "PICC_HALT" 6 23 "0x50" "Sleep"
D G "MI_OK" 6 25 "0"
D G "MI_NOTAGERR" 6 26 "1"
D G "MI_ERR" 6 27 "2"
D G "RESERVED00" 6 30 "0x00"
D G "COMMANDREG" 6 31 "0x01"
D G "COMMIENREG" 6 32 "0x02"
D G "DIVLENREG" 6 33 "0x03"
D G "COMMIRQREG" 6 34 "0x04"
D G "DIVIRQREG" 6 35 "0x05"
D G "ERRORREG" 6 36 "0x06"
D G "STATUS1REG" 6 37 "0x07"
D G "STATUS2REG" 6 38 "0x08"
D G "FIFODATAREG" 6 39 "0x09"
D G "FIFOLEVELREG" 6 40 "0x0A"
D G "WATERLEVELREG" 6 41 "0x0B"
D G "CONTROLREG" 6 42 "0x0C"
D G "BITFRAMINGREG" 6 43 "0x0D"
D G "COLLREG" 6 44 "0x0E"
D G "RESERVED01" 6 45 "0x0F"
D G "RESERVED10" 6 47 "0x10"
D G "MODEREG" 6 48 "0x11"
D G "TXMODEREG" 6 49 "0x12"
D G "RXMODEREG" 6 50 "0x13"
D G "TXCONTROLREG" 6 51 "0x14"
D G "TXAUTOREG" 6 52 "0x15"
D G "TXSELREG" 6 53 "0x16"
D G "RXSELREG" 6 54 "0x17"
D G "RXTHRESHOLDREG" 6 55 "0x18"
D G "DEMODREG" 6 56 "0x19"
D G "RESERVED11" 6 57 "0x1A"
D G "RESERVED12" 6 58 "0x1B"
D G "MIFAREREG" 6 59 "0x1C"
D G "RESERVED13" 6 60 "0x1D"
D G "RESERVED14" 6 61 "0x1E"
D G "SERIALSPEEDREG" 6 62 "0x1F"
D G "RESERVED20" 6 64 "0x20"
D G "CRCRESULTREGM" 6 65 "0x21"
D G "CRCRESULTREGL" 6 66 "0x22"
D G "RESERVED21" 6 67 "0x23"
D G "MODWIDTHREG" 6 68 "0x24"
D G "RESERVED22" 6 69 "0x25"
D G "RFCFGREG" 6 70 "0x26"
D G "GSNREG" 6 71 "0x27"
D G "CWGSPREG" 6 72 "0x28"
D G "MODGSPREG" 6 73 "0x29"
D G "TMODEREG" 6 74 "0x2A"
D G "TPRESCALERREG" 6 75 "0x2B"
D G "TRELOADREGH" 6 76 "0x2C"
D G "TRELOADREGL" 6 77 "0x2D"
D G "TCOUNTERVALUEREGH" 6 78 "0x2E"
D G "TCOUNTERVALUEREGL" 6 79 "0x2F"
D G "RESERVED30" 6 81 "0x30"
D G "TESTSEL1REG" 6 82 "0x31"
D G "TESTSEL2REG" 6 83 "0x32"
D G "TESTPINENREG" 6 84 "0x33"
D G "TESTPINVALUEREG" 6 85 "0x34"
D G "TESTBUSREG" 6 86 "0x35"
D G "AUTOTESTREG" 6 87 "0x36"
D G "VERSIONREG" 6 88 "0x37"
D G "ANALOGTESTREG" 6 89 "0x38"
D G "TESTDAC1REG" 6 90 "0x39"
D G "TESTDAC2REG" 6 91 "0x3A"
D G "TESTADCREG" 6 92 "0x3B"
D G "RESERVED31" 6 93 "0x3C"
D G "RESERVED32" 6 94 "0x3D"
D G "RESERVED33" 6 95 "0x3E"
D G "RESERVED34" 6 96 "0x3F"
F N "MFRC522_Wr_Old" 6 97 ""
V L "addr" 6 97 "int8" `862 
V L "value" 6 97 "int8" `863 
F G "MFRC522_Wr_Old" 6 98 "void(int8 addr,int8 value)" `861 
F N "MFRC522_Rd_Old" 6 104 ""
V L "addr" 6 104 "int8" `865 
F G "MFRC522_Rd_Old" 6 105 "int8(int8 addr)" `864 
V L "value" 6 106 "int8" `866 
F N "MFRC522_Rd" 6 114 ""
V L "address" 6 114 "int8" `868 
F G "MFRC522_Rd" 6 115 "int8(int8 address)" `867 
V L "i" 6 116 "int8" `869 
V L "ucAddr" 6 116 "int8" `870 
V L "ucResult" 6 117 "int8" `871 
C L "MFRC522_Rd" 6 1 1 "FUNCTION"
C L "MFRC522_Rd" 6 1 1 "FUNCTION"
F N "MFRC522_Wr" 6 144 ""
V L "address" 6 144 "int8" `874 
V L "value" 6 144 "int8" `875 
F G "MFRC522_Wr" 6 145 "void(int8 address,int8 value)" `873 
V L "i" 6 147 "int8" `876 
V L "ucAddr" 6 147 "int8" `877 
F N "MFRC522_Clear_Bit" 6 171 ""
V L "addr" 6 171 "int8" `879 
V L "mask" 6 171 "int8" `880 
F G "MFRC522_Clear_Bit" 6 172 "void(int8 addr,int8 mask)" `878 
V L "tmp" 6 172 "int8" `881 
C L "MFRC522_Clear_Bit" 6 1 1 "FUNCTION"
F N "MFRC522_Set_Bit" 6 176 ""
V L "addr" 6 176 "int8" `883 
V L "mask" 6 176 "int8" `884 
F G "MFRC522_Set_Bit" 6 177 "void(int8 addr,int8 mask)" `882 
V L "tmp" 6 177 "int8" `885 
F N "MFRC522_Reset" 6 181 ""
F G "MFRC522_Reset" 6 182 "void()" `886 
F N "MFRC522_AntennaOn" 6 192 ""
F G "MFRC522_AntennaOn" 6 193 "void()" `887 
V L "stt" 6 194 "int8" `888 
C L "MFRC522_AntennaOn" 6 1 3 "FUNCTION"
F N "MFRC522_AntennaOff" 6 201 ""
F G "MFRC522_AntennaOff" 6 202 "void()" `889 
F N "MFRC522_Init" 6 205 ""
F G "MFRC522_Init" 6 206 "void()" `890 
C L "MFRC522_Init" 6 1 1 "FUNCTION"
C L "MFRC522_Init" 6 1 1 "FUNCTION"
C L "MFRC522_Init" 6 1 1 "FUNCTION"
C L "MFRC522_Init" 6 1 4 "FUNCTION"
F N "MFRC522_ToCard" 6 225 ""
V L "command" 6 225 "int8" `892 
V L "sendData" 6 225 "*int8" `893 
V L "sendLen" 6 225 "int8" `894 
V L "backData" 6 225 "*int8" `895 
V L "backLen" 6 225 "*int8" `896 
F G "MFRC522_ToCard" 6 226 "int8(int8 command,*int8 sendData,int8 sendLen,*int8 backData,*int8 backLen)" `891 
V L "_status" 6 227 "int8" `897 
V L "irqEn" 6 228 "int8" `898 
V L "waitIRq" 6 229 "int8" `899 
V L "lastBits" 6 230 "int8" `900 
V L "n" 6 231 "int8" `901 
V L "i" 6 232 "int8" `902 
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 2 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 2 "FUNCTION"
C L "MFRC522_ToCard" 6 1 2 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 1 "FUNCTION"
C L "MFRC522_ToCard" 6 1 2 "FUNCTION"
F N "MFRC522_Request" 6 328 ""
V L "reqMode" 6 328 "int8" `904 
V L "TagType" 6 328 "*int8" `905 
F G "MFRC522_Request" 6 329 "int8(int8 reqMode,*int8 TagType)" `903 
V L "_status" 6 330 "int8" `906 
V L "backBits" 6 331 "int8" `907  "The received data bits"
C L "MFRC522_Request" 6 1 1 "FUNCTION"
F N "MFRC522_CRC" 6 341 ""
V L "dataIn" 6 341 "*int8" `909 
V L "length" 6 341 "int8" `910 
V L "dataOut" 6 341 "*int8" `911 
F G "MFRC522_CRC" 6 342 "void(*int8 dataIn,int8 length,*int8 dataOut)" `908 
V L "i" 6 343 "int8" `912 
V L "n" 6 343 "int8" `913 
C L "MFRC522_CRC" 6 1 1 "FUNCTION"
C L "MFRC522_CRC" 6 1 1 "FUNCTION"
C L "MFRC522_CRC" 6 1 1 "FUNCTION"
F N "MFRC522_SelectTag" 6 367 ""
V L "serNum" 6 367 "*int8" `915 
F G "MFRC522_SelectTag" 6 368 "int8(*int8 serNum)" `914 
V L "i" 6 369 "int8" `916 
V L "_status" 6 370 "int8" `917 
V L "size" 6 371 "int8" `918 
V L "recvBits" 6 372 "int8" `919 
V L "buffer" 6 373 "int8[9]" `920  "MFRC522_Clear_Bit( STATUS2REG, 0x08 );   //MFCrypto1On=0"
C L "MFRC522_Halt" 6 1 1 "FUNCTION"
F N "MFRC522_Halt" 6 399 ""
F G "MFRC522_Halt" 6 400 "void()" `921 
V L "unLen" 6 401 "int8" `922 
V L "buff" 6 402 "int8[4]" `923 
F N "MFRC522_Auth" 6 411 ""
V L "authMode" 6 411 "int8" `925 
V L "BlockAddr" 6 411 "int8" `926 
V L "Sectorkey" 6 411 "*int8" `927 
V L "serNum" 6 411 "*int8" `928 
F G "MFRC522_Auth" 6 412 "int8(int8 authMode,int8 BlockAddr,*int8 Sectorkey,*int8 serNum)" `924 
V L "_status" 6 413 "int8" `929 
V L "recvBits" 6 414 "int8" `930 
V L "i" 6 415 "int8" `931 
V L "buff" 6 416 "int8[12]" `932  "Verify the command block address + sector + password + card serial number"
F N "MFRC522_Write" 6 441 ""
V L "BlockAddr" 6 441 "int8" `934 
V L "writeData" 6 441 "*int8" `935 
F G "MFRC522_Write" 6 442 "int8(int8 BlockAddr,*int8 writeData)" `933 
V L "_status" 6 443 "int8" `936 
V L "recvBits" 6 444 "int8" `937 
V L "i" 6 445 "int8" `938 
V L "buff" 6 446 "int8[18]" `939 
C L "MFRC522_Write" 6 1 1 "FUNCTION"
F N "MFRC522_Read" 6 472 ""
V L "BlockAddr" 6 472 "int8" `941 
V L "recvData" 6 472 "*int8" `942 
F G "MFRC522_Read" 6 473 "int8(int8 BlockAddr,*int8 recvData)" `940 
V L "_status" 6 474 "int8" `943 
V L "unLen" 6 475 "int8" `944 
F N "MFRC522_AntiColl" 6 488 ""
V L "serNum" 6 488 "*int8" `946 
F G "MFRC522_AntiColl" 6 489 "int8(*int8 serNum)" `945 
V L "_status" 6 490 "int8" `947 
V L "i" 6 491 "int8" `948 
V L "serNumCheck" 6 492 "int8" `949 
V L "unLen" 6 493 "int8" `950 
C L "MFRC522_AntiColl" 6 1 1 "FUNCTION"
C L "MFRC522_isCard" 6 1 5 "FUNCTION"
F N "MFRC522_isCard" 6 518 ""
V L "TagType" 6 518 "*int8" `952 
F G "MFRC522_isCard" 6 519 "int8(*int8 TagType)" `951 
F N "MFRC522_ReadCardSerial" 6 525 ""
V L "str" 6 525 "*int8" `954 
F G "MFRC522_ReadCardSerial" 6 526 "int8(*int8 str)" `953 
V L "_status" 6 527 "int8" `955 
D G "pass_add" 0 3 "0x04"
D G "card_add" 0 4 "0x24"
D G "card_num_add" 0 5 "0x14"
V G "key_UID" 0 8 "*int8" `956 
V G "TagType" 0 9 "int8" `957 
V G "checkpass" 0 10 "int8" `958 
V G "keypad" 0 11 "int8" `959 
V G "Key" 0 11 "int8" `960 
V G "pass" 0 12 "int8[5]" `961 
V G "rightpass" 0 13 "int8[5]" `962 
V G "rightid" 0 14 "int8[5]" `963  "= {0xe0, 0x10, 0x02, 0xa8, 0x5a};"
V G "matchpass" 0 16 "int8" `964 
V G "matchcard" 0 16 "int8" `965 
V G "card_num" 0 17 "int8" `966  "int8 eeppass[6];"
F N "_CaiDatLCD" 0 20 ""
f G "_CaiDatLCD" 0 20 "void()" `967 
F N "lcd_clear" 0 21 ""
f G "lcd_clear" 0 21 "void()" `968 
F N "clear_UID" 0 22 ""
f G "clear_UID" 0 22 "void()" `969 
F N "card_id" 0 23 ""
f G "card_id" 0 23 "*int8()" `970 
F N "door" 0 24 ""
f G "door" 0 24 "void()" `971 
F N "lockdoor" 0 25 ""
f G "lockdoor" 0 25 "void()" `972 
F N "enter_pass" 0 26 ""
f G "enter_pass" 0 26 "void()" `973 
F N "check_pass" 0 27 ""
V L "c" 0 27 "*int8" `975 
f G "check_pass" 0 27 "void(*int8 c)" `974 
F N "scan_card" 0 28 ""
f G "scan_card" 0 28 "void()" `976 
F N "check_card" 0 29 ""
f G "check_card" 0 29 "void()" `977 
F N "help" 0 30 ""
f G "help" 0 30 "void()" `978 
F N "eeprom_w_pass" 0 31 ""
V L "addr" 0 31 "int8" `980 
V L "arr" 0 31 "*int8" `981 
f G "eeprom_w_pass" 0 31 "void(int8 addr,*int8 arr)" `979 
F N "eeprom_r_pass" 0 32 ""
V L "addr" 0 32 "int8" `983 
V L "arr" 0 32 "*int8" `984 
f G "eeprom_r_pass" 0 32 "void(int8 addr,*int8 arr)" `982 
F N "MAIN" 0 40 ""
F G "MAIN" 0 41 "void()" `985 
V L "k" 0 49 "int8" `988 
V L "checkeep" 0 49 "int8" `989 
V L "m" 0 57 "int8" `995 
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 2 "FUNCTION"
C L "MAIN" 0 15 1 "FUNCTION"
V L "done" 0 113 "int8" `1001 
V L "i" 0 120 "int8" `1003 
C L "MAIN" 0 15 3 "FUNCTION"
V L "i" 0 156 "int8" `1008 
C L "MAIN" 0 15 1 "FUNCTION"
V L "n" 0 180 "int8" `1013 
V L "done" 0 220 "int8" `1019 
V L "UID" 0 221 "int8[6]" `1020 
V L "i" 0 221 "int8" `1021  "card_num =read_eeprom(card_num_add);"
C L "MAIN" 0 15 1 "FUNCTION"
C L "MAIN" 0 15 6 "FUNCTION"
V L "done" 0 299 "int8" `1035 
V L "key_del" 0 310 "int8" `1038 
V L "UID" 0 311 "int8[5]" `1039 
V L "z" 0 311 "int8" `1040 
C L "MAIN" 0 15 1 "FUNCTION"
V L "UID_del" 0 338 "int8[5]" `1052 
F N "_CaiDatLCD" 0 375 ""
F G "_CaiDatLCD" 0 376 "void()" `967 
C L "_CaiDatLCD" 0 15 1 "FUNCTION"
C L "_CaiDatLCD" 0 15 1 "FUNCTION"
F N "lcd_clear" 0 381 ""
F G "lcd_clear" 0 381 "void()" `968 
F N "clear_UID" 0 385 ""
F G "clear_UID" 0 385 "void()" `969 
V L "i" 0 387 "int8" `1054 
F N "card_id" 0 393 ""
F G "card_id" 0 393 "*int8()" `970 
V L "UID" 0 394 "int8[5]" `1055 
V L "TagType" 0 395 "int8" `1056 
C L "card_id" 0 15 1 "FUNCTION"
F N "lockdoor" 0 408 ""
F G "lockdoor" 0 408 "void()" `972 
C L "lockdoor" 0 15 1 "FUNCTION"
C L "lockdoor" 0 15 1 "FUNCTION"
F N "unlockdoor" 0 419 ""
F G "unlockdoor" 0 419 "void()" `1059 
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
C L "unlockdoor" 0 15 1 "FUNCTION"
F N "enter_pass" 0 446 ""
F G "enter_pass" 0 446 "void()" `973 
V L "i" 0 452 "int8" `1063 
F N "check_pass" 0 482 ""
V L "c" 0 482 "*int8" `1068 
F G "check_pass" 0 482 "void(*int8 c)" `974 
F N "scan_card" 0 515 ""
F G "scan_card" 0 515 "void()" `976  "lcd_clear();"
V L "UID" 0 517 "int8[6]" `1070 
V L "i" 0 517 "int8" `1071 
V L "j" 0 517 "int8" `1072 
V L "TagType" 0 518 "int8" `1073 
F N "check_card" 0 538 ""
F G "check_card" 0 538 "void()" `977 
C L "check_card" 0 15 1 "FUNCTION"
F N "help" 0 549 ""
F G "help" 0 549 "void()" `978 
F N "eeprom_w_pass" 0 571 ""
V L "addr" 0 571 "int8" `980 
V L "arr" 0 571 "*int8" `1083 
F G "eeprom_w_pass" 0 572 "void(int8 addr,*int8 arr)" `979 
V L "i" 0 573 "int8" `1081 
F N "eeprom_r_pass" 0 579 ""
V L "addr" 0 579 "int8" `983 
V L "arr" 0 579 "*int8" `1084 
F G "eeprom_r_pass" 0 580 "void(int8 addr,*int8 arr)" `982 
V L "i" 0 581 "int8" `1082 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
